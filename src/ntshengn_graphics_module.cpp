#include "ntshengn_graphics_module.h"
#include "../external/Module/utils/ntshengn_dynamic_library.h"
#include "../external/Common/module_interfaces/ntshengn_window_module_interface.h"
#include "../external/Common/utils/ntshengn_utils_file.h"
#include "../external/nml/include/nml.h"
#include <limits>
#include <array>
#include <chrono>
#include <algorithm>
#include <cmath>

void NtshEngn::GraphicsModule::init() {
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		m_framesInFlight = 2;
	}
	else {
		m_framesInFlight = 1;
	}

	// Create instance
	VkApplicationInfo applicationInfo = {};
	applicationInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
	applicationInfo.pNext = nullptr;
	applicationInfo.pApplicationName = m_name.c_str();
	applicationInfo.applicationVersion = VK_MAKE_VERSION(0, 0, 1);
	applicationInfo.pEngineName = "NutshellEngine";
	applicationInfo.engineVersion = VK_MAKE_VERSION(0, 0, 1);
	applicationInfo.apiVersion = VK_API_VERSION_1_1;

	VkInstanceCreateInfo instanceCreateInfo = {};
	instanceCreateInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
	instanceCreateInfo.pNext = nullptr;
	instanceCreateInfo.flags = 0;
	instanceCreateInfo.pApplicationInfo = &applicationInfo;
#if defined(NTSHENGN_DEBUG)
	std::array<const char*, 1> explicitLayers = { "VK_LAYER_KHRONOS_validation" };
	bool foundValidationLayer = false;
	uint32_t instanceLayerPropertyCount;
	NTSHENGN_VK_CHECK(vkEnumerateInstanceLayerProperties(&instanceLayerPropertyCount, nullptr));
	std::vector<VkLayerProperties> instanceLayerProperties(instanceLayerPropertyCount);
	NTSHENGN_VK_CHECK(vkEnumerateInstanceLayerProperties(&instanceLayerPropertyCount, instanceLayerProperties.data()));

	for (const VkLayerProperties& availableLayer : instanceLayerProperties) {
		if (strcmp(availableLayer.layerName, "VK_LAYER_KHRONOS_validation") == 0) {
			foundValidationLayer = true;
			break;
		}
	}

	if (foundValidationLayer) {
		instanceCreateInfo.enabledLayerCount = 1;
		instanceCreateInfo.ppEnabledLayerNames = explicitLayers.data();
	}
	else {
		NTSHENGN_MODULE_WARNING("Could not find validation layer VK_LAYER_KHRONOS_validation.");
		instanceCreateInfo.enabledLayerCount = 0;
		instanceCreateInfo.ppEnabledLayerNames = nullptr;
	}
#else
	instanceCreateInfo.enabledLayerCount = 0;
	instanceCreateInfo.ppEnabledLayerNames = nullptr;
#endif
	std::vector<const char*> instanceExtensions;
#if defined(NTSHENGN_DEBUG)
	instanceExtensions.push_back("VK_EXT_debug_utils");
#endif
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		instanceExtensions.push_back("VK_KHR_surface");
		instanceExtensions.push_back("VK_KHR_get_surface_capabilities2");
#if defined(NTSHENGN_OS_WINDOWS)
		instanceExtensions.push_back("VK_KHR_win32_surface");
#elif defined(NTSHENGN_OS_LINUX)
		instanceExtensions.push_back("VK_KHR_xlib_surface");
#endif
	}
	instanceCreateInfo.enabledExtensionCount = static_cast<uint32_t>(instanceExtensions.size());
	instanceCreateInfo.ppEnabledExtensionNames = instanceExtensions.data();
	NTSHENGN_VK_CHECK(vkCreateInstance(&instanceCreateInfo, nullptr, &m_instance));

#if defined(NTSHENGN_DEBUG)
	// Create debug messenger
	VkDebugUtilsMessengerCreateInfoEXT debugMessengerCreateInfo = {};
	debugMessengerCreateInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
	debugMessengerCreateInfo.pNext = nullptr;
	debugMessengerCreateInfo.flags = 0;
	debugMessengerCreateInfo.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT |
		VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
	debugMessengerCreateInfo.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT |
		VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT |
		VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
	debugMessengerCreateInfo.pfnUserCallback = debugCallback;
	debugMessengerCreateInfo.pUserData = nullptr;

	auto createDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(m_instance, "vkCreateDebugUtilsMessengerEXT");
	NTSHENGN_VK_CHECK(createDebugUtilsMessengerEXT(m_instance, &debugMessengerCreateInfo, nullptr, &m_debugMessenger));
#endif

	// Create surface
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
#if defined(NTSHENGN_OS_WINDOWS)
		HWND windowHandle = reinterpret_cast<HWND>(m_windowModule->getNativeHandle(NTSHENGN_MAIN_WINDOW));
		VkWin32SurfaceCreateInfoKHR surfaceCreateInfo = {};
		surfaceCreateInfo.sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
		surfaceCreateInfo.pNext = nullptr;
		surfaceCreateInfo.flags = 0;
		surfaceCreateInfo.hinstance = reinterpret_cast<HINSTANCE>(m_windowModule->getNativeAdditionalInformation(NTSHENGN_MAIN_WINDOW));
		surfaceCreateInfo.hwnd = windowHandle;
		auto createWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR)vkGetInstanceProcAddr(m_instance, "vkCreateWin32SurfaceKHR");
		NTSHENGN_VK_CHECK(createWin32SurfaceKHR(m_instance, &surfaceCreateInfo, nullptr, &m_surface));
#elif defined(NTSHENGN_OS_LINUX)
		Window windowHandle = reinterpret_cast<Window>(m_windowModule->getNativeHandle(NTSHENGN_MAIN_WINDOW));
		VkXlibSurfaceCreateInfoKHR surfaceCreateInfo = {};
		surfaceCreateInfo.sType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
		surfaceCreateInfo.pNext = nullptr;
		surfaceCreateInfo.flags = 0;
		surfaceCreateInfo.dpy = reinterpret_cast<Display*>(m_windowModule->getNativeAdditionalInformation(NTSHENGN_MAIN_WINDOW));;
		surfaceCreateInfo.window = windowHandle;
		auto createXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR)vkGetInstanceProcAddr(m_instance, "vkCreateXlibSurfaceKHR");
		NTSHENGN_VK_CHECK(createXlibSurfaceKHR(m_instance, &surfaceCreateInfo, nullptr, &m_surface));
#endif
	}

	// Pick a physical device
	uint32_t deviceCount;
	vkEnumeratePhysicalDevices(m_instance, &deviceCount, nullptr);
	if (deviceCount == 0) {
		NTSHENGN_MODULE_ERROR("Vulkan: Found no suitable GPU.", NTSHENGN_RESULT_UNKNOWN_ERROR);
	}
	std::vector<VkPhysicalDevice> physicalDevices(deviceCount);
	vkEnumeratePhysicalDevices(m_instance, &deviceCount, physicalDevices.data());
	m_physicalDevice = physicalDevices[0];

	VkPhysicalDeviceProperties2 physicalDeviceProperties2 = {};
	physicalDeviceProperties2.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
	physicalDeviceProperties2.pNext = nullptr;
	vkGetPhysicalDeviceProperties2(m_physicalDevice, &physicalDeviceProperties2);

	std::string physicalDeviceType;
	switch (physicalDeviceProperties2.properties.deviceType) {
	case VK_PHYSICAL_DEVICE_TYPE_OTHER:
		physicalDeviceType = "Other";
		break;
	case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU:
		physicalDeviceType = "Integrated";
		break;
	case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU:
		physicalDeviceType = "Discrete";
		break;
	case VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU:
		physicalDeviceType = "Virtual";
		break;
	case VK_PHYSICAL_DEVICE_TYPE_CPU:
		physicalDeviceType = "CPU";
		break;
	}

	std::string driverVersion = std::to_string(VK_API_VERSION_MAJOR(physicalDeviceProperties2.properties.driverVersion)) + "."
		+ std::to_string(VK_API_VERSION_MINOR(physicalDeviceProperties2.properties.driverVersion)) + "."
		+ std::to_string(VK_API_VERSION_PATCH(physicalDeviceProperties2.properties.driverVersion));
	if (physicalDeviceProperties2.properties.vendorID == 4318) { // NVIDIA
		uint32_t major = (physicalDeviceProperties2.properties.driverVersion >> 22) & 0x3ff;
		uint32_t minor = (physicalDeviceProperties2.properties.driverVersion >> 14) & 0x0ff;
		uint32_t patch = (physicalDeviceProperties2.properties.driverVersion >> 6) & 0x0ff;
		driverVersion = std::to_string(major) + "." + std::to_string(minor) + "." + std::to_string(patch);
	}
#if defined(NTSHENGN_OS_WINDOWS)
	else if (physicalDeviceProperties2.properties.vendorID == 0x8086) { // Intel
		uint32_t major = (physicalDeviceProperties2.properties.driverVersion >> 14);
		uint32_t minor = (physicalDeviceProperties2.properties.driverVersion) & 0x3fff;
		driverVersion = std::to_string(major) + "." + std::to_string(minor);
	}
#endif

	NTSHENGN_MODULE_INFO("Physical Device Name: " + std::string(physicalDeviceProperties2.properties.deviceName));
	NTSHENGN_MODULE_INFO("Physical Device Type: " + physicalDeviceType);
	NTSHENGN_MODULE_INFO("Physical Device Driver Version: " + driverVersion);
	NTSHENGN_MODULE_INFO("Physical Device Vulkan API Version: " + std::to_string(VK_API_VERSION_MAJOR(physicalDeviceProperties2.properties.apiVersion)) + "."
		+ std::to_string(VK_API_VERSION_MINOR(physicalDeviceProperties2.properties.apiVersion)) + "."
		+ std::to_string(VK_API_VERSION_PATCH(physicalDeviceProperties2.properties.apiVersion)));

	// Find a queue family supporting graphics
	uint32_t queueFamilyPropertyCount;
	vkGetPhysicalDeviceQueueFamilyProperties(m_physicalDevice, &queueFamilyPropertyCount, nullptr);
	std::vector<VkQueueFamilyProperties> queueFamilyProperties(queueFamilyPropertyCount);
	vkGetPhysicalDeviceQueueFamilyProperties(m_physicalDevice, &queueFamilyPropertyCount, queueFamilyProperties.data());
	m_graphicsQueueIndex = 0;
	for (const VkQueueFamilyProperties& queueFamilyProperty : queueFamilyProperties) {
		if (queueFamilyProperty.queueCount > 0 && queueFamilyProperty.queueFlags & VK_QUEUE_GRAPHICS_BIT) {
			if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
				VkBool32 presentSupport;
				vkGetPhysicalDeviceSurfaceSupportKHR(m_physicalDevice, m_graphicsQueueIndex, m_surface, &presentSupport);
				if (presentSupport) {
					break;
				}
			}
			else {
				break;
			}
		}
		m_graphicsQueueIndex++;
	}

	// Create a queue supporting graphics
	float queuePriority = 1.0f;
	VkDeviceQueueCreateInfo deviceQueueCreateInfo = {};
	deviceQueueCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
	deviceQueueCreateInfo.pNext = nullptr;
	deviceQueueCreateInfo.flags = 0;
	deviceQueueCreateInfo.queueFamilyIndex = m_graphicsQueueIndex;
	deviceQueueCreateInfo.queueCount = 1;
	deviceQueueCreateInfo.pQueuePriorities = &queuePriority;

	// Enable features
	VkPhysicalDeviceMaintenance4Features physicalDeviceMaintenance4Features = {};
	physicalDeviceMaintenance4Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
	physicalDeviceMaintenance4Features.pNext = nullptr;
	physicalDeviceMaintenance4Features.maintenance4 = VK_TRUE;

	VkPhysicalDeviceDynamicRenderingFeatures physicalDeviceDynamicRenderingFeatures = {};
	physicalDeviceDynamicRenderingFeatures.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
	physicalDeviceDynamicRenderingFeatures.pNext = &physicalDeviceMaintenance4Features;
	physicalDeviceDynamicRenderingFeatures.dynamicRendering = VK_TRUE;

	VkPhysicalDeviceSynchronization2Features physicalDeviceSynchronization2Features = {};
	physicalDeviceSynchronization2Features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
	physicalDeviceSynchronization2Features.pNext = &physicalDeviceDynamicRenderingFeatures;
	physicalDeviceSynchronization2Features.synchronization2 = VK_TRUE;

	// Create the logical device
	VkDeviceCreateInfo deviceCreateInfo = {};
	deviceCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
	deviceCreateInfo.pNext = &physicalDeviceSynchronization2Features;
	deviceCreateInfo.queueCreateInfoCount = 1;
	deviceCreateInfo.pQueueCreateInfos = &deviceQueueCreateInfo;
	deviceCreateInfo.enabledLayerCount = 0;
	deviceCreateInfo.ppEnabledLayerNames = nullptr;
	std::vector<const char*> deviceExtensions = { "VK_KHR_synchronization2",
		"VK_KHR_create_renderpass2",
		"VK_KHR_depth_stencil_resolve",
		"VK_KHR_dynamic_rendering",
		"VK_KHR_maintenance4" };
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		deviceExtensions.push_back("VK_KHR_swapchain");
	}
	deviceCreateInfo.enabledExtensionCount = static_cast<uint32_t>(deviceExtensions.size());
	deviceCreateInfo.ppEnabledExtensionNames = deviceExtensions.data();
	deviceCreateInfo.pEnabledFeatures = nullptr;
	NTSHENGN_VK_CHECK(vkCreateDevice(m_physicalDevice, &deviceCreateInfo, nullptr, &m_device));

	vkGetDeviceQueue(m_device, m_graphicsQueueIndex, 0, &m_graphicsQueue);

	// Get functions
	m_vkCmdPipelineBarrier2KHR = (PFN_vkCmdPipelineBarrier2KHR)vkGetDeviceProcAddr(m_device, "vkCmdPipelineBarrier2KHR");
	m_vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR)vkGetDeviceProcAddr(m_device, "vkCmdBeginRenderingKHR");
	m_vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR)vkGetDeviceProcAddr(m_device, "vkCmdEndRenderingKHR");

	// Initialize VMA
	VmaAllocatorCreateInfo vmaAllocatorCreateInfo = {};
	vmaAllocatorCreateInfo.flags = 0;
	vmaAllocatorCreateInfo.physicalDevice = m_physicalDevice;
	vmaAllocatorCreateInfo.device = m_device;
	vmaAllocatorCreateInfo.preferredLargeHeapBlockSize = 0;
	vmaAllocatorCreateInfo.pAllocationCallbacks = nullptr;
	vmaAllocatorCreateInfo.pDeviceMemoryCallbacks = nullptr;
	vmaAllocatorCreateInfo.pHeapSizeLimit = nullptr;
	vmaAllocatorCreateInfo.pVulkanFunctions = nullptr;
	vmaAllocatorCreateInfo.instance = m_instance;
	vmaAllocatorCreateInfo.vulkanApiVersion = VK_API_VERSION_1_1;
	NTSHENGN_VK_CHECK(vmaCreateAllocator(&vmaAllocatorCreateInfo, &m_allocator));

	// Create the swapchain
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		createSwapchain(VK_NULL_HANDLE);

		m_prevMouseX = m_windowModule->getWidth(NTSHENGN_MAIN_WINDOW) / 2;
		m_prevMouseY = m_windowModule->getHeight(NTSHENGN_MAIN_WINDOW) / 2;
		m_windowModule->setCursorPosition(NTSHENGN_MAIN_WINDOW, m_prevMouseX, m_prevMouseY);
		m_windowModule->setCursorVisibility(NTSHENGN_MAIN_WINDOW, !m_mouseMiddleMode);
	}
	// Or create an image to draw on
	else {
		m_imageCount = 1;

		m_viewport.x = 0.0f;
		m_viewport.y = 0.0f;
		m_viewport.width = 1280.0f;
		m_viewport.height = 720.0f;
		m_viewport.minDepth = 0.0f;
		m_viewport.maxDepth = 1.0f;

		m_scissor.offset.x = 0;
		m_scissor.offset.y = 0;
		m_scissor.extent.width = 1280;
		m_scissor.extent.height = 720;

		VkImageCreateInfo imageCreateInfo = {};
		imageCreateInfo.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
		imageCreateInfo.pNext = nullptr;
		imageCreateInfo.flags = 0;
		imageCreateInfo.imageType = VK_IMAGE_TYPE_2D;
		imageCreateInfo.format = VK_FORMAT_R8G8B8A8_SRGB;
		imageCreateInfo.extent.width = 1280;
		imageCreateInfo.extent.height = 720;
		imageCreateInfo.extent.depth = 1;
		imageCreateInfo.mipLevels = 1;
		imageCreateInfo.arrayLayers = 1;
		imageCreateInfo.samples = VK_SAMPLE_COUNT_1_BIT;
		imageCreateInfo.tiling = VK_IMAGE_TILING_OPTIMAL;
		imageCreateInfo.usage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
		imageCreateInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
		imageCreateInfo.queueFamilyIndexCount = 0;
		imageCreateInfo.pQueueFamilyIndices = nullptr;
		imageCreateInfo.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
		NTSHENGN_VK_CHECK(vkCreateImage(m_device, &imageCreateInfo, nullptr, &m_drawImage));

		// Allocate memory for the image
		VkMemoryRequirements memoryRequirements;
		vkGetImageMemoryRequirements(m_device, m_drawImage, &memoryRequirements);

		VkPhysicalDeviceMemoryProperties memoryProperties = getMemoryProperties();
		uint32_t memoryTypeIndex = memoryProperties.memoryTypeCount;
		for (uint32_t i = 0; i < memoryProperties.memoryTypeCount; i++) {
			uint32_t memoryTypeBits = (1 << i);
			bool isRequiredMemoryType = memoryRequirements.memoryTypeBits & memoryTypeBits;

			VkMemoryPropertyFlags properties = memoryProperties.memoryTypes[i].propertyFlags;
			bool hasRequiredProperties = (properties & VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT) == VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;

			if (isRequiredMemoryType && hasRequiredProperties) {
				memoryTypeIndex = i;
			}
		}
		NTSHENGN_ASSERT(memoryTypeIndex < memoryProperties.memoryTypeCount);

		VkMemoryAllocateInfo memoryAllocateInfo = {};
		memoryAllocateInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
		memoryAllocateInfo.pNext = nullptr;
		memoryAllocateInfo.allocationSize = 268435456;
		memoryAllocateInfo.memoryTypeIndex = memoryTypeIndex;
		NTSHENGN_VK_CHECK(vkAllocateMemory(m_device, &memoryAllocateInfo, nullptr, &m_drawImageMemory));

		NTSHENGN_VK_CHECK(vkBindImageMemory(m_device, m_drawImage, m_drawImageMemory, 0));

		// Create the image view
		VkImageViewCreateInfo imageViewCreateInfo = {};
		imageViewCreateInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
		imageViewCreateInfo.pNext = nullptr;
		imageViewCreateInfo.flags = 0;
		imageViewCreateInfo.image = m_drawImage;
		imageViewCreateInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
		imageViewCreateInfo.format = imageCreateInfo.format;
		imageViewCreateInfo.components.r = VK_COMPONENT_SWIZZLE_R;
		imageViewCreateInfo.components.g = VK_COMPONENT_SWIZZLE_G;
		imageViewCreateInfo.components.b = VK_COMPONENT_SWIZZLE_B;
		imageViewCreateInfo.components.a = VK_COMPONENT_SWIZZLE_A;
		imageViewCreateInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
		imageViewCreateInfo.subresourceRange.baseMipLevel = 0;
		imageViewCreateInfo.subresourceRange.levelCount = 1;
		imageViewCreateInfo.subresourceRange.baseArrayLayer = 0;
		imageViewCreateInfo.subresourceRange.layerCount = 1;
		NTSHENGN_VK_CHECK(vkCreateImageView(m_device, &imageViewCreateInfo, nullptr, &m_drawImageView));
	}

	VkDescriptorSetLayoutBinding lightDescriptorSetLayoutBinding = {};
	lightDescriptorSetLayoutBinding.binding = 0;
	lightDescriptorSetLayoutBinding.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	lightDescriptorSetLayoutBinding.descriptorCount = 1;
	lightDescriptorSetLayoutBinding.stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;
	lightDescriptorSetLayoutBinding.pImmutableSamplers = nullptr;

	VkDescriptorSetLayoutCreateInfo descriptorSetLayoutCreateInfo = {};
	descriptorSetLayoutCreateInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
	descriptorSetLayoutCreateInfo.pNext = nullptr;
	descriptorSetLayoutCreateInfo.flags = 0;
	descriptorSetLayoutCreateInfo.bindingCount = 1;
	descriptorSetLayoutCreateInfo.pBindings = &lightDescriptorSetLayoutBinding;
	NTSHENGN_VK_CHECK(vkCreateDescriptorSetLayout(m_device, &descriptorSetLayoutCreateInfo, nullptr, &m_descriptorSetLayout));

	// Create graphics pipeline
	const std::vector<uint32_t> vertexShaderCode = { 0x07230203,0x00010000,0x0008000b,0x0000002c,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0008000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000c,0x0000001d,
	0x00030003,0x00000002,0x000001cc,0x00040005,0x00000004,0x6e69616d,0x00000000,0x00040005,
	0x00000009,0x5574756f,0x00000076,0x00060005,0x0000000c,0x565f6c67,0x65747265,0x646e4978,
	0x00007865,0x00060005,0x0000001b,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,
	0x0000001b,0x00000000,0x505f6c67,0x7469736f,0x006e6f69,0x00070006,0x0000001b,0x00000001,
	0x505f6c67,0x746e696f,0x657a6953,0x00000000,0x00070006,0x0000001b,0x00000002,0x435f6c67,
	0x4470696c,0x61747369,0x0065636e,0x00070006,0x0000001b,0x00000003,0x435f6c67,0x446c6c75,
	0x61747369,0x0065636e,0x00030005,0x0000001d,0x00000000,0x00040047,0x00000009,0x0000001e,
	0x00000000,0x00040047,0x0000000c,0x0000000b,0x0000002a,0x00050048,0x0000001b,0x00000000,
	0x0000000b,0x00000000,0x00050048,0x0000001b,0x00000001,0x0000000b,0x00000001,0x00050048,
	0x0000001b,0x00000002,0x0000000b,0x00000003,0x00050048,0x0000001b,0x00000003,0x0000000b,
	0x00000004,0x00030047,0x0000001b,0x00000002,0x00020013,0x00000002,0x00030021,0x00000003,
	0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000002,
	0x00040020,0x00000008,0x00000003,0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,
	0x00040015,0x0000000a,0x00000020,0x00000001,0x00040020,0x0000000b,0x00000001,0x0000000a,
	0x0004003b,0x0000000b,0x0000000c,0x00000001,0x0004002b,0x0000000a,0x0000000e,0x00000001,
	0x0004002b,0x0000000a,0x00000010,0x00000002,0x00040017,0x00000017,0x00000006,0x00000004,
	0x00040015,0x00000018,0x00000020,0x00000000,0x0004002b,0x00000018,0x00000019,0x00000001,
	0x0004001c,0x0000001a,0x00000006,0x00000019,0x0006001e,0x0000001b,0x00000017,0x00000006,
	0x0000001a,0x0000001a,0x00040020,0x0000001c,0x00000003,0x0000001b,0x0004003b,0x0000001c,
	0x0000001d,0x00000003,0x0004002b,0x0000000a,0x0000001e,0x00000000,0x0004002b,0x00000006,
	0x00000020,0x40000000,0x0004002b,0x00000006,0x00000022,0xbf800000,0x0004002b,0x00000006,
	0x00000025,0x00000000,0x0004002b,0x00000006,0x00000026,0x3f800000,0x00040020,0x0000002a,
	0x00000003,0x00000017,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,
	0x00000005,0x0004003d,0x0000000a,0x0000000d,0x0000000c,0x000500c4,0x0000000a,0x0000000f,
	0x0000000d,0x0000000e,0x000500c7,0x0000000a,0x00000011,0x0000000f,0x00000010,0x0004006f,
	0x00000006,0x00000012,0x00000011,0x0004003d,0x0000000a,0x00000013,0x0000000c,0x000500c7,
	0x0000000a,0x00000014,0x00000013,0x00000010,0x0004006f,0x00000006,0x00000015,0x00000014,
	0x00050050,0x00000007,0x00000016,0x00000012,0x00000015,0x0003003e,0x00000009,0x00000016,
	0x0004003d,0x00000007,0x0000001f,0x00000009,0x0005008e,0x00000007,0x00000021,0x0000001f,
	0x00000020,0x00050050,0x00000007,0x00000023,0x00000022,0x00000022,0x00050081,0x00000007,
	0x00000024,0x00000021,0x00000023,0x00050051,0x00000006,0x00000027,0x00000024,0x00000000,
	0x00050051,0x00000006,0x00000028,0x00000024,0x00000001,0x00070050,0x00000017,0x00000029,
	0x00000027,0x00000028,0x00000025,0x00000026,0x00050041,0x0000002a,0x0000002b,0x0000001d,
	0x0000001e,0x0003003e,0x0000002b,0x00000029,0x000100fd,0x00010038 };

	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		m_pipelineRenderingColorFormat = m_swapchainFormat;
	}

	m_pipelineRenderingCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO;
	m_pipelineRenderingCreateInfo.pNext = nullptr;
	m_pipelineRenderingCreateInfo.viewMask = 0;
	m_pipelineRenderingCreateInfo.colorAttachmentCount = 1;
	m_pipelineRenderingCreateInfo.pColorAttachmentFormats = &m_pipelineRenderingColorFormat;
	m_pipelineRenderingCreateInfo.depthAttachmentFormat = VK_FORMAT_UNDEFINED;
	m_pipelineRenderingCreateInfo.stencilAttachmentFormat = VK_FORMAT_UNDEFINED;

	VkShaderModuleCreateInfo vertexShaderModuleCreateInfo = {};
	vertexShaderModuleCreateInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
	vertexShaderModuleCreateInfo.pNext = nullptr;
	vertexShaderModuleCreateInfo.flags = 0;
	vertexShaderModuleCreateInfo.codeSize = vertexShaderCode.size() * sizeof(uint32_t);
	vertexShaderModuleCreateInfo.pCode = vertexShaderCode.data();
	NTSHENGN_VK_CHECK(vkCreateShaderModule(m_device, &vertexShaderModuleCreateInfo, nullptr, &m_vertexShaderModule));
	
	m_vertexShaderStageCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
	m_vertexShaderStageCreateInfo.pNext = nullptr;
	m_vertexShaderStageCreateInfo.flags = 0;
	m_vertexShaderStageCreateInfo.stage = VK_SHADER_STAGE_VERTEX_BIT;
	m_vertexShaderStageCreateInfo.module = m_vertexShaderModule;
	m_vertexShaderStageCreateInfo.pName = "main";
	m_vertexShaderStageCreateInfo.pSpecializationInfo = nullptr;

	VkPushConstantRange fragmentShaderPushConstantRange = {};
	fragmentShaderPushConstantRange.stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;
	fragmentShaderPushConstantRange.offset = 0;
	fragmentShaderPushConstantRange.size = sizeof(PushConstants);

	VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {};
	pipelineLayoutCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
	pipelineLayoutCreateInfo.pNext = nullptr;
	pipelineLayoutCreateInfo.flags = 0;
	pipelineLayoutCreateInfo.setLayoutCount = 1;
	pipelineLayoutCreateInfo.pSetLayouts = &m_descriptorSetLayout;
	pipelineLayoutCreateInfo.pushConstantRangeCount = 1;
	pipelineLayoutCreateInfo.pPushConstantRanges = &fragmentShaderPushConstantRange;
	NTSHENGN_VK_CHECK(vkCreatePipelineLayout(m_device, &pipelineLayoutCreateInfo, nullptr, &m_graphicsPipelineLayout));

	m_vertexInputStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
	m_vertexInputStateCreateInfo.pNext = nullptr;
	m_vertexInputStateCreateInfo.flags = 0;
	m_vertexInputStateCreateInfo.vertexBindingDescriptionCount = 0;
	m_vertexInputStateCreateInfo.pVertexBindingDescriptions = nullptr;
	m_vertexInputStateCreateInfo.vertexAttributeDescriptionCount = 0;
	m_vertexInputStateCreateInfo.pVertexAttributeDescriptions = nullptr;

	m_inputAssemblyStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
	m_inputAssemblyStateCreateInfo.pNext = nullptr;
	m_inputAssemblyStateCreateInfo.flags = 0;
	m_inputAssemblyStateCreateInfo.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
	m_inputAssemblyStateCreateInfo.primitiveRestartEnable = VK_FALSE;

	m_viewportStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
	m_viewportStateCreateInfo.pNext = nullptr;
	m_viewportStateCreateInfo.flags = 0;
	m_viewportStateCreateInfo.viewportCount = 1;
	m_viewportStateCreateInfo.pViewports = &m_viewport;
	m_viewportStateCreateInfo.scissorCount = 1;
	m_viewportStateCreateInfo.pScissors = &m_scissor;

	m_rasterizationStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
	m_rasterizationStateCreateInfo.pNext = nullptr;
	m_rasterizationStateCreateInfo.flags = 0;
	m_rasterizationStateCreateInfo.depthClampEnable = VK_FALSE;
	m_rasterizationStateCreateInfo.rasterizerDiscardEnable = VK_FALSE;
	m_rasterizationStateCreateInfo.polygonMode = VK_POLYGON_MODE_FILL;
	m_rasterizationStateCreateInfo.cullMode = VK_CULL_MODE_BACK_BIT;
	m_rasterizationStateCreateInfo.frontFace = VK_FRONT_FACE_CLOCKWISE;
	m_rasterizationStateCreateInfo.depthBiasEnable = VK_FALSE;
	m_rasterizationStateCreateInfo.depthBiasConstantFactor = 0.0f;
	m_rasterizationStateCreateInfo.depthBiasClamp = 0.0f;
	m_rasterizationStateCreateInfo.depthBiasSlopeFactor = 0.0f;
	m_rasterizationStateCreateInfo.lineWidth = 1.0f;

	m_multisampleStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
	m_multisampleStateCreateInfo.pNext = nullptr;
	m_multisampleStateCreateInfo.flags = 0;
	m_multisampleStateCreateInfo.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT;
	m_multisampleStateCreateInfo.sampleShadingEnable = VK_FALSE;
	m_multisampleStateCreateInfo.minSampleShading = 0.0f;
	m_multisampleStateCreateInfo.pSampleMask = nullptr;
	m_multisampleStateCreateInfo.alphaToCoverageEnable = VK_FALSE;
	m_multisampleStateCreateInfo.alphaToOneEnable = VK_FALSE;

	m_depthStencilStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
	m_depthStencilStateCreateInfo.pNext = nullptr;
	m_depthStencilStateCreateInfo.flags = 0;
	m_depthStencilStateCreateInfo.depthTestEnable = VK_FALSE;
	m_depthStencilStateCreateInfo.depthWriteEnable = VK_FALSE;
	m_depthStencilStateCreateInfo.depthCompareOp = VK_COMPARE_OP_NEVER;
	m_depthStencilStateCreateInfo.depthBoundsTestEnable = VK_FALSE;
	m_depthStencilStateCreateInfo.stencilTestEnable = VK_FALSE;
	m_depthStencilStateCreateInfo.front = {};
	m_depthStencilStateCreateInfo.back = {};
	m_depthStencilStateCreateInfo.minDepthBounds = 0.0f;
	m_depthStencilStateCreateInfo.maxDepthBounds = 1.0f;

	m_colorBlendAttachmentState.blendEnable = VK_FALSE;
	m_colorBlendAttachmentState.srcColorBlendFactor = VK_BLEND_FACTOR_ONE;
	m_colorBlendAttachmentState.dstColorBlendFactor = VK_BLEND_FACTOR_ZERO;
	m_colorBlendAttachmentState.colorBlendOp = VK_BLEND_OP_ADD;
	m_colorBlendAttachmentState.srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE;
	m_colorBlendAttachmentState.dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO;
	m_colorBlendAttachmentState.alphaBlendOp = VK_BLEND_OP_ADD;
	m_colorBlendAttachmentState.colorWriteMask = { VK_COLOR_COMPONENT_R_BIT |
		VK_COLOR_COMPONENT_G_BIT |
		VK_COLOR_COMPONENT_B_BIT |
		VK_COLOR_COMPONENT_A_BIT };

	m_colorBlendStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
	m_colorBlendStateCreateInfo.pNext = nullptr;
	m_colorBlendStateCreateInfo.flags = 0;
	m_colorBlendStateCreateInfo.logicOpEnable = VK_FALSE;
	m_colorBlendStateCreateInfo.logicOp = VK_LOGIC_OP_COPY;
	m_colorBlendStateCreateInfo.attachmentCount = 1;
	m_colorBlendStateCreateInfo.pAttachments = &m_colorBlendAttachmentState;

	m_dynamicStateCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
	m_dynamicStateCreateInfo.pNext = nullptr;
	m_dynamicStateCreateInfo.flags = 0;
	m_dynamicStateCreateInfo.dynamicStateCount = 2;
	m_dynamicStateCreateInfo.pDynamicStates = m_dynamicStates.data();

#if defined(NTSHENGN_DEBUG)
	if (std::filesystem::exists(m_fragmentShaderName)) {
		m_fragmentShaderLastModified = std::filesystem::last_write_time(m_fragmentShaderName);
	}
	else {
		const std::filesystem::path absolutePath = std::filesystem::absolute(std::filesystem::current_path());
		NTSHENGN_MODULE_ERROR("Fragment shader \"raymarching.frag\" does not exist (\"" + absolutePath.string() + "/" + m_fragmentShaderName + "\").", NTSHENGN_RESULT_MODULE_ERROR);
	}
	if (std::filesystem::exists(m_raymarchingHelperFileName)) {
		m_raymarchingHelperLastModified = std::filesystem::last_write_time(m_raymarchingHelperFileName);
	}
	if (std::filesystem::exists(m_sceneFileName)) {
		m_sceneLastModified = std::filesystem::last_write_time(m_sceneFileName);
	}
#endif
	recreateGraphicsPipeline();

	// Create light buffer
	m_lightBuffers.resize(m_framesInFlight);
	m_lightBufferAllocations.resize(m_framesInFlight);
	VkBufferCreateInfo lightBufferCreateInfo = {};
	lightBufferCreateInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
	lightBufferCreateInfo.pNext = nullptr;
	lightBufferCreateInfo.flags = 0;
	lightBufferCreateInfo.size = sizeof(nml::vec4) + 512 * sizeof(GGJRootsLight);
	lightBufferCreateInfo.usage = VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT;
	lightBufferCreateInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;
	lightBufferCreateInfo.queueFamilyIndexCount = 1;
	lightBufferCreateInfo.pQueueFamilyIndices = &m_graphicsQueueIndex;

	VmaAllocationCreateInfo bufferAllocationCreateInfo = {};
	bufferAllocationCreateInfo.usage = VMA_MEMORY_USAGE_AUTO_PREFER_HOST;
	bufferAllocationCreateInfo.flags = VMA_ALLOCATION_CREATE_HOST_ACCESS_SEQUENTIAL_WRITE_BIT;

	for (uint32_t i = 0; i < m_framesInFlight; i++) {
		vmaCreateBuffer(m_allocator, &lightBufferCreateInfo, &bufferAllocationCreateInfo, &m_lightBuffers[i], &m_lightBufferAllocations[i], nullptr);
	}

	// Create descriptor pool
	VkDescriptorPoolSize lightDescriptorPoolSize = {};
	lightDescriptorPoolSize.type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
	lightDescriptorPoolSize.descriptorCount = m_framesInFlight;

	VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {};
	descriptorPoolCreateInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
	descriptorPoolCreateInfo.pNext = nullptr;
	descriptorPoolCreateInfo.flags = 0;
	descriptorPoolCreateInfo.maxSets = m_framesInFlight;
	descriptorPoolCreateInfo.poolSizeCount = 1;
	descriptorPoolCreateInfo.pPoolSizes = &lightDescriptorPoolSize;
	NTSHENGN_VK_CHECK(vkCreateDescriptorPool(m_device, &descriptorPoolCreateInfo, nullptr, &m_descriptorPool));

	// Allocate descriptor sets
	m_descriptorSets.resize(m_framesInFlight);
	for (uint32_t i = 0; i < m_framesInFlight; i++) {
		VkDescriptorSetAllocateInfo descriptorSetAllocateInfo = {};
		descriptorSetAllocateInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
		descriptorSetAllocateInfo.pNext = nullptr;
		descriptorSetAllocateInfo.descriptorPool = m_descriptorPool;
		descriptorSetAllocateInfo.descriptorSetCount = 1;
		descriptorSetAllocateInfo.pSetLayouts = &m_descriptorSetLayout;
		NTSHENGN_VK_CHECK(vkAllocateDescriptorSets(m_device, &descriptorSetAllocateInfo, &m_descriptorSets[i]));
	}

	// Update descriptor sets
	for (uint32_t i = 0; i < m_framesInFlight; i++) {
		VkDescriptorBufferInfo lightDescriptorBufferInfo;
		lightDescriptorBufferInfo.buffer = m_lightBuffers[i];
		lightDescriptorBufferInfo.offset = 0;
		lightDescriptorBufferInfo.range = sizeof(nml::vec4) + 512 * sizeof(GGJRootsLight);

		VkWriteDescriptorSet lightWriteDescriptorSet;
		lightWriteDescriptorSet.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
		lightWriteDescriptorSet.pNext = nullptr;
		lightWriteDescriptorSet.dstSet = m_descriptorSets[i];
		lightWriteDescriptorSet.dstBinding = 0;
		lightWriteDescriptorSet.dstArrayElement = 0;
		lightWriteDescriptorSet.descriptorCount = 1;
		lightWriteDescriptorSet.descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
		lightWriteDescriptorSet.pImageInfo = nullptr;
		lightWriteDescriptorSet.pBufferInfo = &lightDescriptorBufferInfo;
		lightWriteDescriptorSet.pTexelBufferView = nullptr;

		vkUpdateDescriptorSets(m_device, 1, &lightWriteDescriptorSet, 0, nullptr);
	}

	// Resize buffers according to number of frames in flight and swapchain size
	m_renderingCommandPools.resize(m_framesInFlight);
	m_renderingCommandBuffers.resize(m_framesInFlight);

	m_fences.resize(m_framesInFlight);
	m_imageAvailableSemaphores.resize(m_framesInFlight);
	m_renderFinishedSemaphores.resize(m_imageCount);

	VkCommandPoolCreateInfo commandPoolCreateInfo = {};
	commandPoolCreateInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
	commandPoolCreateInfo.pNext = nullptr;
	commandPoolCreateInfo.flags = 0;
	commandPoolCreateInfo.queueFamilyIndex = m_graphicsQueueIndex;

	VkCommandBufferAllocateInfo commandBufferAllocateInfo = {};
	commandBufferAllocateInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
	commandBufferAllocateInfo.pNext = nullptr;
	commandBufferAllocateInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
	commandBufferAllocateInfo.commandBufferCount = 1;

	VkFenceCreateInfo fenceCreateInfo = {};
	fenceCreateInfo.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
	fenceCreateInfo.pNext = nullptr;
	fenceCreateInfo.flags = VK_FENCE_CREATE_SIGNALED_BIT;

	VkSemaphoreCreateInfo semaphoreCreateInfo = {};
	semaphoreCreateInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
	semaphoreCreateInfo.pNext = nullptr;
	semaphoreCreateInfo.flags = 0;
	for (uint32_t i = 0; i < m_framesInFlight; i++) {
		// Create rendering command pools and buffers
		NTSHENGN_VK_CHECK(vkCreateCommandPool(m_device, &commandPoolCreateInfo, nullptr, &m_renderingCommandPools[i]));

		commandBufferAllocateInfo.commandPool = m_renderingCommandPools[i];
		NTSHENGN_VK_CHECK(vkAllocateCommandBuffers(m_device, &commandBufferAllocateInfo, &m_renderingCommandBuffers[i]));

		// Create sync objects
		NTSHENGN_VK_CHECK(vkCreateFence(m_device, &fenceCreateInfo, nullptr, &m_fences[i]));

		NTSHENGN_VK_CHECK(vkCreateSemaphore(m_device, &semaphoreCreateInfo, nullptr, &m_imageAvailableSemaphores[i]));
	}
	for (uint32_t i = 0; i < m_imageCount; i++) {
		NTSHENGN_VK_CHECK(vkCreateSemaphore(m_device, &semaphoreCreateInfo, nullptr, &m_renderFinishedSemaphores[i]));
	}

	// Set current frame-in-flight to 0
	m_currentFrameInFlight = 0;
}

void NtshEngn::GraphicsModule::update(double dt) {
	NTSHENGN_UNUSED(dt);

	if (m_windowModule && !m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		// Do not update if the main window got closed
		return;
	}

	const NtshEngn::Transform& cameraTransform = m_ecs->getComponent<Transform>(m_mainCamera);
	nml::vec4 cameraPosition = nml::vec4(cameraTransform.position.data(), 0.0f);
	nml::vec4 cameraDirection = nml::vec4(cameraTransform.rotation.data(), 0.0f);

	NTSHENGN_VK_CHECK(vkWaitForFences(m_device, 1, &m_fences[m_currentFrameInFlight], VK_TRUE, std::numeric_limits<uint64_t>::max()));

#if defined(NTSHENGN_DEBUG)
	// Check for any file modification
	bool shaderModified = false;
	const std::filesystem::file_time_type timeNow = std::filesystem::_File_time_clock::now();
	std::filesystem::file_time_type fileLastModified;
	if (std::filesystem::exists(m_fragmentShaderName)) {
		fileLastModified = std::filesystem::last_write_time(m_fragmentShaderName);
		if ((fileLastModified > m_fragmentShaderLastModified) && (timeNow > (fileLastModified + std::chrono::milliseconds(250)))) {
			shaderModified = true;
			m_fragmentShaderLastModified = fileLastModified;
		}
	}
	else {
		const std::filesystem::path absolutePath = std::filesystem::absolute(std::filesystem::current_path());
		NTSHENGN_MODULE_ERROR("Fragment shader \"raymarching.frag\" does not exist (\"" + absolutePath.string() + "/" + m_fragmentShaderName + "\").", NtshEngn::Result::ModuleError);
	}
	if (std::filesystem::exists(m_raymarchingHelperFileName)) {
		fileLastModified = std::filesystem::last_write_time(m_raymarchingHelperFileName);
		if ((fileLastModified > m_raymarchingHelperLastModified) && (timeNow > (fileLastModified + std::chrono::milliseconds(250)))) {
			shaderModified = true;
			m_raymarchingHelperLastModified = fileLastModified;
		}
	}
	if (std::filesystem::exists(m_sceneFileName)) {
		fileLastModified = std::filesystem::last_write_time(m_sceneFileName);
		if ((fileLastModified > m_sceneLastModified) && (timeNow > (fileLastModified + std::chrono::milliseconds(250)))) {
			shaderModified = true;
			m_sceneLastModified = fileLastModified;
		}
	}

	if (shaderModified) {
		NTSHENGN_VK_CHECK(vkQueueWaitIdle(m_graphicsQueue));

		if (recreateGraphicsPipeline()) {
			NTSHENGN_MODULE_INFO("Fragment shader reloaded.");
		}
		else {
			NTSHENGN_MODULE_WARNING("Fragment shader could not be reloaded.");
		}
	}
#endif

	uint32_t imageIndex = m_imageCount - 1;
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		VkResult acquireNextImageResult = vkAcquireNextImageKHR(m_device, m_swapchain, std::numeric_limits<uint64_t>::max(), m_imageAvailableSemaphores[m_currentFrameInFlight], VK_NULL_HANDLE, &imageIndex);
		if (acquireNextImageResult == VK_ERROR_OUT_OF_DATE_KHR) {
			resize();
		}
		else if (acquireNextImageResult != VK_SUCCESS && acquireNextImageResult != VK_SUBOPTIMAL_KHR) {
			NTSHENGN_MODULE_ERROR("Next swapchain image acquire failed.", NtshEngn::Result::ModuleError);
		}
	}
	else {
		VkSubmitInfo emptySignalSubmitInfo = {};
		emptySignalSubmitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
		emptySignalSubmitInfo.pNext = nullptr;
		emptySignalSubmitInfo.waitSemaphoreCount = 0;
		emptySignalSubmitInfo.pWaitSemaphores = nullptr;
		emptySignalSubmitInfo.pWaitDstStageMask = nullptr;
		emptySignalSubmitInfo.commandBufferCount = 0;
		emptySignalSubmitInfo.pCommandBuffers = nullptr;
		emptySignalSubmitInfo.signalSemaphoreCount = 1;
		emptySignalSubmitInfo.pSignalSemaphores = &m_imageAvailableSemaphores[m_currentFrameInFlight];
		NTSHENGN_VK_CHECK(vkQueueSubmit(m_graphicsQueue, 1, &emptySignalSubmitInfo, VK_NULL_HANDLE));
	}

	void* data;

	// Update light buffer
	NTSHENGN_VK_CHECK(vmaMapMemory(m_allocator, m_lightBufferAllocations[m_currentFrameInFlight], &data));
	uint32_t nbLights = static_cast<uint32_t>(m_lights.size());
	memcpy(data, &nbLights, sizeof(uint32_t));
	VkDeviceSize offset = 0;
	for (auto it = m_lights.begin(); it != m_lights.end(); it++) {
		memcpy(reinterpret_cast<char*>(data) + offset + sizeof(nml::vec4), &(it->second), 2 * sizeof(nml::vec4));
		offset += 2 * sizeof(nml::vec4);
	}
	vmaUnmapMemory(m_allocator, m_lightBufferAllocations[m_currentFrameInFlight]);

	// Record rendering commands
	NTSHENGN_VK_CHECK(vkResetCommandPool(m_device, m_renderingCommandPools[m_currentFrameInFlight], 0));

	// Begin command buffer recording
	VkCommandBufferBeginInfo commandBufferBeginInfo = {};
	commandBufferBeginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
	commandBufferBeginInfo.pNext = nullptr;
	commandBufferBeginInfo.flags = VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;
	NTSHENGN_VK_CHECK(vkBeginCommandBuffer(m_renderingCommandBuffers[m_currentFrameInFlight], &commandBufferBeginInfo));

	// Layout transition VK_IMAGE_LAYOUT_UNDEFINED -> VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
	VkImageMemoryBarrier2 undefinedToColorAttachmentOptimalImageMemoryBarrier = {};
	undefinedToColorAttachmentOptimalImageMemoryBarrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.pNext = nullptr;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.srcStageMask = VK_PIPELINE_STAGE_2_NONE;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.srcAccessMask = 0;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.dstStageMask = VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.dstAccessMask = VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.newLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.srcQueueFamilyIndex = m_graphicsQueueIndex;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.dstQueueFamilyIndex = m_graphicsQueueIndex;
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		undefinedToColorAttachmentOptimalImageMemoryBarrier.image = m_swapchainImages[imageIndex];
	}
	else {
		undefinedToColorAttachmentOptimalImageMemoryBarrier.image = m_drawImage;
	}
	undefinedToColorAttachmentOptimalImageMemoryBarrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.subresourceRange.baseMipLevel = 0;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.subresourceRange.levelCount = 1;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.subresourceRange.baseArrayLayer = 0;
	undefinedToColorAttachmentOptimalImageMemoryBarrier.subresourceRange.layerCount = 1;

	VkDependencyInfo undefinedToColorAttachmentOptimalDependencyInfo = {};
	undefinedToColorAttachmentOptimalDependencyInfo.sType = VK_STRUCTURE_TYPE_DEPENDENCY_INFO;
	undefinedToColorAttachmentOptimalDependencyInfo.pNext = nullptr;
	undefinedToColorAttachmentOptimalDependencyInfo.dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT;
	undefinedToColorAttachmentOptimalDependencyInfo.memoryBarrierCount = 0;
	undefinedToColorAttachmentOptimalDependencyInfo.pMemoryBarriers = nullptr;
	undefinedToColorAttachmentOptimalDependencyInfo.bufferMemoryBarrierCount = 0;
	undefinedToColorAttachmentOptimalDependencyInfo.pBufferMemoryBarriers = nullptr;
	undefinedToColorAttachmentOptimalDependencyInfo.imageMemoryBarrierCount = 1;
	undefinedToColorAttachmentOptimalDependencyInfo.pImageMemoryBarriers = &undefinedToColorAttachmentOptimalImageMemoryBarrier;

	m_vkCmdPipelineBarrier2KHR(m_renderingCommandBuffers[m_currentFrameInFlight], &undefinedToColorAttachmentOptimalDependencyInfo);

	// Bind descriptor set 0
	vkCmdBindDescriptorSets(m_renderingCommandBuffers[m_currentFrameInFlight], VK_PIPELINE_BIND_POINT_GRAPHICS, m_graphicsPipelineLayout, 0, 1, &m_descriptorSets[m_currentFrameInFlight], 0, nullptr);

	// Begin rendering
	VkRenderingAttachmentInfo renderingAttachmentInfo = {};
	renderingAttachmentInfo.sType = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO;
	renderingAttachmentInfo.pNext = nullptr;
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		renderingAttachmentInfo.imageView = m_swapchainImageViews[imageIndex];
	}
	else {
		renderingAttachmentInfo.imageView = m_drawImageView;
	}
	renderingAttachmentInfo.imageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
	renderingAttachmentInfo.resolveMode = VK_RESOLVE_MODE_NONE;
	renderingAttachmentInfo.resolveImageView = VK_NULL_HANDLE;
	renderingAttachmentInfo.resolveImageLayout = VK_IMAGE_LAYOUT_UNDEFINED;
	renderingAttachmentInfo.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;
	renderingAttachmentInfo.storeOp = VK_ATTACHMENT_STORE_OP_STORE;
	renderingAttachmentInfo.clearValue.color = { 0.0f, 0.0f, 0.0f, 0.0f };
	renderingAttachmentInfo.clearValue.depthStencil = { 0.0f, 0 };

	VkRenderingInfo renderingInfo = {};
	renderingInfo.sType = VK_STRUCTURE_TYPE_RENDERING_INFO;
	renderingInfo.pNext = nullptr;
	renderingInfo.flags = 0;
	renderingInfo.renderArea = m_scissor;
	renderingInfo.layerCount = 1;
	renderingInfo.viewMask = 0;
	renderingInfo.colorAttachmentCount = 1;
	renderingInfo.pColorAttachments = &renderingAttachmentInfo;
	renderingInfo.pDepthAttachment = nullptr;
	renderingInfo.pStencilAttachment = nullptr;
	m_vkCmdBeginRenderingKHR(m_renderingCommandBuffers[m_currentFrameInFlight], &renderingInfo);

	if (m_graphicsPipeline != VK_NULL_HANDLE) {
		// Bind graphics pipeline
		vkCmdBindPipeline(m_renderingCommandBuffers[m_currentFrameInFlight], VK_PIPELINE_BIND_POINT_GRAPHICS, m_graphicsPipeline);
		vkCmdSetViewport(m_renderingCommandBuffers[m_currentFrameInFlight], 0, 1, &m_viewport);
		vkCmdSetScissor(m_renderingCommandBuffers[m_currentFrameInFlight], 0, 1, &m_scissor);

		// Push time constant
		const NtshEngn::Transform rootTransform = m_ecs->getComponent<Transform>(m_rootEntity);
		PushConstants pushConstants = { static_cast<float>(std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now().time_since_epoch()).count()) / 1000.0f, m_scissor.extent.width, m_scissor.extent.height, 0.0f, { cameraPosition[0], cameraPosition[1], cameraPosition[2], 0.0f }, { cameraDirection[0], cameraDirection[1], cameraDirection[2], 0.0f }, { rootTransform.rotation[0], rootTransform.rotation[1], rootTransform.rotation[2], 0.0f }, { rootTransform.position[0], rootTransform.position[1], rootTransform.position[2], 0.0f }, { rootTransform.scale[0], rootTransform.scale[1], rootTransform.scale[2], 0.0f } };
		vkCmdPushConstants(m_renderingCommandBuffers[m_currentFrameInFlight], m_graphicsPipelineLayout, VK_SHADER_STAGE_FRAGMENT_BIT, 0, sizeof(PushConstants), &pushConstants);

		// Draw
		vkCmdDraw(m_renderingCommandBuffers[m_currentFrameInFlight], 3, 1, 0, 0);
	}

	// End rendering
	m_vkCmdEndRenderingKHR(m_renderingCommandBuffers[m_currentFrameInFlight]);

	// Layout transition VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL -> VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		VkImageMemoryBarrier2 colorAttachmentOptimalToPresentSrcImageMemoryBarrier = {};
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.pNext = nullptr;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.srcStageMask = VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.srcAccessMask = VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.dstStageMask = VK_PIPELINE_STAGE_2_NONE;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.dstAccessMask = 0;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.oldLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.newLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.srcQueueFamilyIndex = m_graphicsQueueIndex;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.dstQueueFamilyIndex = m_graphicsQueueIndex;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.image = m_swapchainImages[imageIndex];
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.subresourceRange.baseMipLevel = 0;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.subresourceRange.levelCount = 1;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.subresourceRange.baseArrayLayer = 0;
		colorAttachmentOptimalToPresentSrcImageMemoryBarrier.subresourceRange.layerCount = 1;

		VkDependencyInfo colorAttachmentOptimalToPresentSrcDependencyInfo = {};
		colorAttachmentOptimalToPresentSrcDependencyInfo.sType = VK_STRUCTURE_TYPE_DEPENDENCY_INFO;
		colorAttachmentOptimalToPresentSrcDependencyInfo.pNext = nullptr;
		colorAttachmentOptimalToPresentSrcDependencyInfo.dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT;
		colorAttachmentOptimalToPresentSrcDependencyInfo.memoryBarrierCount = 0;
		colorAttachmentOptimalToPresentSrcDependencyInfo.pMemoryBarriers = nullptr;
		colorAttachmentOptimalToPresentSrcDependencyInfo.bufferMemoryBarrierCount = 0;
		colorAttachmentOptimalToPresentSrcDependencyInfo.pBufferMemoryBarriers = nullptr;
		colorAttachmentOptimalToPresentSrcDependencyInfo.imageMemoryBarrierCount = 1;
		colorAttachmentOptimalToPresentSrcDependencyInfo.pImageMemoryBarriers = &colorAttachmentOptimalToPresentSrcImageMemoryBarrier;

		m_vkCmdPipelineBarrier2KHR(m_renderingCommandBuffers[m_currentFrameInFlight], &colorAttachmentOptimalToPresentSrcDependencyInfo);
	}

	// End command buffer recording
	NTSHENGN_VK_CHECK(vkEndCommandBuffer(m_renderingCommandBuffers[m_currentFrameInFlight]));

	NTSHENGN_VK_CHECK(vkResetFences(m_device, 1, &m_fences[m_currentFrameInFlight]));

	VkPipelineStageFlags waitDstStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
	VkSubmitInfo submitInfo = {};
	submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
	submitInfo.pNext = nullptr;
	submitInfo.waitSemaphoreCount = 1;
	submitInfo.pWaitSemaphores = &m_imageAvailableSemaphores[m_currentFrameInFlight];
	submitInfo.pWaitDstStageMask = &waitDstStageMask;
	submitInfo.commandBufferCount = 1;
	submitInfo.pCommandBuffers = &m_renderingCommandBuffers[m_currentFrameInFlight];
	submitInfo.signalSemaphoreCount = 1;
	submitInfo.pSignalSemaphores = &m_renderFinishedSemaphores[imageIndex];
	NTSHENGN_VK_CHECK(vkQueueSubmit(m_graphicsQueue, 1, &submitInfo, m_fences[m_currentFrameInFlight]));

	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		VkPresentInfoKHR presentInfo = {};
		presentInfo.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
		presentInfo.pNext = nullptr;
		presentInfo.waitSemaphoreCount = 1;
		presentInfo.pWaitSemaphores = &m_renderFinishedSemaphores[imageIndex];
		presentInfo.swapchainCount = 1;
		presentInfo.pSwapchains = &m_swapchain;
		presentInfo.pImageIndices = &imageIndex;
		presentInfo.pResults = nullptr;
		VkResult queuePresentResult = vkQueuePresentKHR(m_graphicsQueue, &presentInfo);
		if (queuePresentResult == VK_ERROR_OUT_OF_DATE_KHR || queuePresentResult == VK_SUBOPTIMAL_KHR) {
			resize();
		}
		else if (queuePresentResult != VK_SUCCESS) {
			NTSHENGN_MODULE_ERROR("Queue present swapchain image failed.", NTSHENGN_RESULT_MODULE_ERROR);
		}
	}
	else {
		VkPipelineStageFlags emptyWaitDstStageMask = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
		VkSubmitInfo emptyWaitSubmitInfo = {};
		emptyWaitSubmitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
		emptyWaitSubmitInfo.pNext = nullptr;
		emptyWaitSubmitInfo.waitSemaphoreCount = 1;
		emptyWaitSubmitInfo.pWaitSemaphores = &m_renderFinishedSemaphores[imageIndex];
		emptyWaitSubmitInfo.pWaitDstStageMask = &emptyWaitDstStageMask;
		emptyWaitSubmitInfo.commandBufferCount = 0;
		emptyWaitSubmitInfo.pCommandBuffers = nullptr;
		emptyWaitSubmitInfo.signalSemaphoreCount = 0;
		emptyWaitSubmitInfo.pSignalSemaphores = nullptr;
		NTSHENGN_VK_CHECK(vkQueueSubmit(m_graphicsQueue, 1, &emptyWaitSubmitInfo, VK_NULL_HANDLE));
	}

	m_currentFrameInFlight = (m_currentFrameInFlight + 1) % m_framesInFlight;
}

void NtshEngn::GraphicsModule::destroy() {
	NTSHENGN_VK_CHECK(vkQueueWaitIdle(m_graphicsQueue));

	// Destroy sync objects
	for (uint32_t i = 0; i < m_imageCount; i++) {
		vkDestroySemaphore(m_device, m_renderFinishedSemaphores[i], nullptr);
	}
	for (uint32_t i = 0; i < m_framesInFlight; i++) {
		vkDestroySemaphore(m_device, m_imageAvailableSemaphores[i], nullptr);

		vkDestroyFence(m_device, m_fences[i], nullptr);

		// Destroy rendering command pools
		vkDestroyCommandPool(m_device, m_renderingCommandPools[i], nullptr);
	}

	// Destroy light buffers
	for (uint32_t i = 0; i < m_framesInFlight; i++) {
		vmaDestroyBuffer(m_allocator, m_lightBuffers[i], m_lightBufferAllocations[i]);
	}

	// Destroy descriptor pool
	vkDestroyDescriptorPool(m_device, m_descriptorPool, nullptr);

	// Destroy graphics pipeline
	vkDestroyShaderModule(m_device, m_vertexShaderModule, nullptr);
	if (m_fragmentShaderModule != VK_NULL_HANDLE) {
		vkDestroyShaderModule(m_device, m_fragmentShaderModule, nullptr);
	}
	vkDestroyPipelineLayout(m_device, m_graphicsPipelineLayout, nullptr);
	if (m_graphicsPipeline != VK_NULL_HANDLE) {
		vkDestroyPipeline(m_device, m_graphicsPipeline, nullptr);
	}

	// Destroy descriptor set layout
	vkDestroyDescriptorSetLayout(m_device, m_descriptorSetLayout, nullptr);

	// Destroy swapchain
	if (m_swapchain != VK_NULL_HANDLE) {
		for (VkImageView& swapchainImageView : m_swapchainImageViews) {
			vkDestroyImageView(m_device, swapchainImageView, nullptr);
		}
		vkDestroySwapchainKHR(m_device, m_swapchain, nullptr);
	}
	// Or destroy the image
	else {
		vkDestroyImageView(m_device, m_drawImageView, nullptr);
		vkDestroyImage(m_device, m_drawImage, nullptr);
		vkFreeMemory(m_device, m_drawImageMemory, nullptr);
	}

	vmaDestroyAllocator(m_allocator);

	// Destroy device
	vkDestroyDevice(m_device, nullptr);

	// Destroy surface
	if (m_surface != VK_NULL_HANDLE) {
		vkDestroySurfaceKHR(m_instance, m_surface, nullptr);
	}

#if defined(NTSHENGN_DEBUG)
	// Destroy debug messenger
	auto destroyDebugUtilsMessengerEXT = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(m_instance, "vkDestroyDebugUtilsMessengerEXT");
	destroyDebugUtilsMessengerEXT(m_instance, m_debugMessenger, nullptr);
#endif

	// Destroy instance
	vkDestroyInstance(m_instance, nullptr);
}

NtshEngn::MeshId NtshEngn::GraphicsModule::load(const NtshEngn::Mesh& mesh) {
	NTSHENGN_UNUSED(mesh);
	NTSHENGN_MODULE_FUNCTION_NOT_IMPLEMENTED();
	return 0;
}

NtshEngn::ImageId NtshEngn::GraphicsModule::load(const NtshEngn::Image& image) {
	NTSHENGN_UNUSED(image);
	NTSHENGN_MODULE_FUNCTION_NOT_IMPLEMENTED();
	return 0;
}

VkSurfaceCapabilitiesKHR NtshEngn::GraphicsModule::getSurfaceCapabilities() {
	VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo = {};
	surfaceInfo.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
	surfaceInfo.pNext = nullptr;
	surfaceInfo.surface = m_surface;

	VkSurfaceCapabilities2KHR surfaceCapabilities;
	surfaceCapabilities.sType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
	surfaceCapabilities.pNext = nullptr;
	NTSHENGN_VK_CHECK(vkGetPhysicalDeviceSurfaceCapabilities2KHR(m_physicalDevice, &surfaceInfo, &surfaceCapabilities));

	return surfaceCapabilities.surfaceCapabilities;
}

std::vector<VkSurfaceFormatKHR> NtshEngn::GraphicsModule::getSurfaceFormats() {
	VkPhysicalDeviceSurfaceInfo2KHR surfaceInfo = {};
	surfaceInfo.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
	surfaceInfo.pNext = nullptr;
	surfaceInfo.surface = m_surface;

	uint32_t surfaceFormatsCount;
	NTSHENGN_VK_CHECK(vkGetPhysicalDeviceSurfaceFormats2KHR(m_physicalDevice, &surfaceInfo, &surfaceFormatsCount, nullptr));
	std::vector<VkSurfaceFormat2KHR> surfaceFormats2(surfaceFormatsCount);
	for (VkSurfaceFormat2KHR& surfaceFormat2 : surfaceFormats2) {
		surfaceFormat2.sType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
		surfaceFormat2.pNext = nullptr;
	}
	NTSHENGN_VK_CHECK(vkGetPhysicalDeviceSurfaceFormats2KHR(m_physicalDevice, &surfaceInfo, &surfaceFormatsCount, surfaceFormats2.data()));

	std::vector<VkSurfaceFormatKHR> surfaceFormats;
	for (const VkSurfaceFormat2KHR surfaceFormat2 : surfaceFormats2) {
		surfaceFormats.push_back(surfaceFormat2.surfaceFormat);
	}

	return surfaceFormats;
}

std::vector<VkPresentModeKHR> NtshEngn::GraphicsModule::getSurfacePresentModes() {
	uint32_t presentModesCount;
	NTSHENGN_VK_CHECK(vkGetPhysicalDeviceSurfacePresentModesKHR(m_physicalDevice, m_surface, &presentModesCount, nullptr));
	std::vector<VkPresentModeKHR> presentModes(presentModesCount);
	NTSHENGN_VK_CHECK(vkGetPhysicalDeviceSurfacePresentModesKHR(m_physicalDevice, m_surface, &presentModesCount, presentModes.data()));

	return presentModes;
}

VkPhysicalDeviceMemoryProperties NtshEngn::GraphicsModule::getMemoryProperties() {
	VkPhysicalDeviceMemoryProperties2 memoryProperties = {};
	memoryProperties.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
	memoryProperties.pNext = nullptr;
	vkGetPhysicalDeviceMemoryProperties2(m_physicalDevice, &memoryProperties);

	return memoryProperties.memoryProperties;
}

std::vector<uint32_t> NtshEngn::GraphicsModule::compileFragmentShader() {
#if defined(NTSHENGN_DEBUG)
	if (!m_glslangInitialized) {
		glslang::InitializeProcess();
		m_glslangInitialized = true;
	}

	std::vector<uint32_t> spvCode;

	if (!std::filesystem::exists(m_fragmentShaderName)) {
		const std::filesystem::path absolutePath = std::filesystem::absolute(std::filesystem::current_path());
		NTSHENGN_MODULE_ERROR("Fragment shader raymarching.frag does not exist (\"" + absolutePath.string() + "/" + m_fragmentShaderName + "\").", NTSHENGN_RESULT_MODULE_ERROR);
	}
	std::string shaderCode = NtshEngn::readAscii(m_fragmentShaderName);
	const char* shaderCodeCharPtr = shaderCode.c_str();

	EShLanguage shaderType = EShLangFragment;

	glslang::TShader shader(shaderType);
	shader.setStrings(&shaderCodeCharPtr, 1);
	int clientInputSemanticsVersion = 110;
	glslang::EshTargetClientVersion vulkanClientVersion = glslang::EShTargetVulkan_1_1;
	glslang::EShTargetLanguageVersion spvLanguageVersion = glslang::EShTargetSpv_1_2;
	shader.setEnvInput(glslang::EShSourceGlsl, shaderType, glslang::EShClientVulkan, clientInputSemanticsVersion);
	shader.setEnvClient(glslang::EShClientVulkan, vulkanClientVersion);
	shader.setEnvTarget(glslang::EshTargetSpv, spvLanguageVersion);
	EShMessages messages = (EShMessages)(EShMsgSpvRules | EShMsgVulkanRules);
	int defaultVersion = 460;

	// Preprocess
	const TBuiltInResource defaultTBuiltInResource = {
		/* .MaxLights = */ 32,
		/* .MaxClipPlanes = */ 6,
		/* .MaxTextureUnits = */ 32,
		/* .MaxTextureCoords = */ 32,
		/* .MaxVertexAttribs = */ 64,
		/* .MaxVertexUniformComponents = */ 4096,
		/* .MaxVaryingFloats = */ 64,
		/* .MaxVertexTextureImageUnits = */ 32,
		/* .MaxCombinedTextureImageUnits = */ 80,
		/* .MaxTextureImageUnits = */ 32,
		/* .MaxFragmentUniformComponents = */ 4096,
		/* .MaxDrawBuffers = */ 32,
		/* .MaxVertexUniformVectors = */ 128,
		/* .MaxVaryingVectors = */ 8,
		/* .MaxFragmentUniformVectors = */ 16,
		/* .MaxVertexOutputVectors = */ 16,
		/* .MaxFragmentInputVectors = */ 15,
		/* .MinProgramTexelOffset = */ -8,
		/* .MaxProgramTexelOffset = */ 7,
		/* .MaxClipDistances = */ 8,
		/* .MaxComputeWorkGroupCountX = */ 65535,
		/* .MaxComputeWorkGroupCountY = */ 65535,
		/* .MaxComputeWorkGroupCountZ = */ 65535,
		/* .MaxComputeWorkGroupSizeX = */ 1024,
		/* .MaxComputeWorkGroupSizeY = */ 1024,
		/* .MaxComputeWorkGroupSizeZ = */ 64,
		/* .MaxComputeUniformComponents = */ 1024,
		/* .MaxComputeTextureImageUnits = */ 16,
		/* .MaxComputeImageUniforms = */ 8,
		/* .MaxComputeAtomicCounters = */ 8,
		/* .MaxComputeAtomicCounterBuffers = */ 1,
		/* .MaxVaryingComponents = */ 60,
		/* .MaxVertexOutputComponents = */ 64,
		/* .MaxGeometryInputComponents = */ 64,
		/* .MaxGeometryOutputComponents = */ 128,
		/* .MaxFragmentInputComponents = */ 128,
		/* .MaxImageUnits = */ 8,
		/* .MaxCombinedImageUnitsAndFragmentOutputs = */ 8,
		/* .MaxCombinedShaderOutputResources = */ 8,
		/* .MaxImageSamples = */ 0,
		/* .MaxVertexImageUniforms = */ 0,
		/* .MaxTessControlImageUniforms = */ 0,
		/* .MaxTessEvaluationImageUniforms = */ 0,
		/* .MaxGeometryImageUniforms = */ 0,
		/* .MaxFragmentImageUniforms = */ 8,
		/* .MaxCombinedImageUniforms = */ 8,
		/* .MaxGeometryTextureImageUnits = */ 16,
		/* .MaxGeometryOutputVertices = */ 256,
		/* .MaxGeometryTotalOutputComponents = */ 1024,
		/* .MaxGeometryUniformComponents = */ 1024,
		/* .MaxGeometryVaryingComponents = */ 64,
		/* .MaxTessControlInputComponents = */ 128,
		/* .MaxTessControlOutputComponents = */ 128,
		/* .MaxTessControlTextureImageUnits = */ 16,
		/* .MaxTessControlUniformComponents = */ 1024,
		/* .MaxTessControlTotalOutputComponents = */ 4096,
		/* .MaxTessEvaluationInputComponents = */ 128,
		/* .MaxTessEvaluationOutputComponents = */ 128,
		/* .MaxTessEvaluationTextureImageUnits = */ 16,
		/* .MaxTessEvaluationUniformComponents = */ 1024,
		/* .MaxTessPatchComponents = */ 120,
		/* .MaxPatchVertices = */ 32,
		/* .MaxTessGenLevel = */ 64,
		/* .MaxViewports = */ 16,
		/* .MaxVertexAtomicCounters = */ 0,
		/* .MaxTessControlAtomicCounters = */ 0,
		/* .MaxTessEvaluationAtomicCounters = */ 0,
		/* .MaxGeometryAtomicCounters = */ 0,
		/* .MaxFragmentAtomicCounters = */ 8,
		/* .MaxCombinedAtomicCounters = */ 8,
		/* .MaxAtomicCounterBindings = */ 1,
		/* .MaxVertexAtomicCounterBuffers = */ 0,
		/* .MaxTessControlAtomicCounterBuffers = */ 0,
		/* .MaxTessEvaluationAtomicCounterBuffers = */ 0,
		/* .MaxGeometryAtomicCounterBuffers = */ 0,
		/* .MaxFragmentAtomicCounterBuffers = */ 1,
		/* .MaxCombinedAtomicCounterBuffers = */ 1,
		/* .MaxAtomicCounterBufferSize = */ 16384,
		/* .MaxTransformFeedbackBuffers = */ 4,
		/* .MaxTransformFeedbackInterleavedComponents = */ 64,
		/* .MaxCullDistances = */ 8,
		/* .MaxCombinedClipAndCullDistances = */ 8,
		/* .MaxSamples = */ 4,
		/* .maxMeshOutputVerticesNV = */ 256,
		/* .maxMeshOutputPrimitivesNV = */ 512,
		/* .maxMeshWorkGroupSizeX_NV = */ 32,
		/* .maxMeshWorkGroupSizeY_NV = */ 1,
		/* .maxMeshWorkGroupSizeZ_NV = */ 1,
		/* .maxTaskWorkGroupSizeX_NV = */ 32,
		/* .maxTaskWorkGroupSizeY_NV = */ 1,
		/* .maxTaskWorkGroupSizeZ_NV = */ 1,
		/* .maxMeshViewCountNV = */ 4,
		/* .maxMeshOutputVerticesEXT = */ 256,
		/* .maxMeshOutputPrimitivesEXT = */ 256,
		/* .maxMeshWorkGroupSizeX_EXT = */ 128,
		/* .maxMeshWorkGroupSizeY_EXT = */ 128,
		/* .maxMeshWorkGroupSizeZ_EXT = */ 128,
		/* .maxTaskWorkGroupSizeX_EXT = */ 128,
		/* .maxTaskWorkGroupSizeY_EXT = */ 128,
		/* .maxTaskWorkGroupSizeZ_EXT = */ 128,
		/* .maxMeshViewCountEXT = */ 4,
		/* .maxDualSourceDrawBuffersEXT = */ 1,

		/* .limits = */ {
			/* .nonInductiveForLoops = */ 1,
			/* .whileLoops = */ 1,
			/* .doWhileLoops = */ 1,
			/* .generalUniformIndexing = */ 1,
			/* .generalAttributeMatrixVectorIndexing = */ 1,
			/* .generalVaryingIndexing = */ 1,
			/* .generalSamplerIndexing = */ 1,
			/* .generalVariableIndexing = */ 1,
			/* .generalConstantMatrixVectorIndexing = */ 1,
		} };
	DirStackFileIncluder includer;
	includer.pushExternalLocalDirectory(m_fragmentShaderName);
	std::string preprocess;
	if (!shader.preprocess(&defaultTBuiltInResource, defaultVersion, ENoProfile, false, false, messages, &preprocess, includer)) {
		NTSHENGN_MODULE_WARNING("Shader preprocessing failed.\n" + std::string(shader.getInfoLog()));
		return spvCode;
	}

	// Parse
	const char* preprocessCharPtr = preprocess.c_str();
	shader.setStrings(&preprocessCharPtr, 1);
	if (!shader.parse(&defaultTBuiltInResource, defaultVersion, false, messages)) {
		NTSHENGN_MODULE_WARNING("Shader parsing failed.\n" + std::string(shader.getInfoLog()));
		return spvCode;
	}

	// Link
	glslang::TProgram program;
	program.addShader(&shader);
	if (!program.link(messages)) {
		NTSHENGN_MODULE_WARNING("Shader linking failed.");
		return spvCode;
	}

	// Compile
	spv::SpvBuildLogger buildLogger;
	glslang::SpvOptions spvOptions;
	glslang::GlslangToSpv(*program.getIntermediate(shaderType), spvCode, &buildLogger, &spvOptions);

	return spvCode;
#else
	return std::vector<uint32_t>();
#endif
}

bool NtshEngn::GraphicsModule::recreateGraphicsPipeline() {
#if defined(NTSHENGN_DEBUG)
	const std::vector<uint32_t> fragmentShaderCode = compileFragmentShader();
	if (fragmentShaderCode.size() != 0) {
		// Destroy fragment shader module and graphics pipeline if the fragment shader compilation succeeded
		if (m_fragmentShaderModule != VK_NULL_HANDLE) {
			vkDestroyShaderModule(m_device, m_fragmentShaderModule, nullptr);
		}
		if (m_graphicsPipeline != VK_NULL_HANDLE) {
			vkDestroyPipeline(m_device, m_graphicsPipeline, nullptr);
		}
	}
	else {
		// Don't recreate the pipeline if the fragment shader compilation failed
		return false;
	}
#else
	const std::vector<uint32_t> fragmentShaderCode = { 0x07230203,0x00010000,0x0008000b,0x0000064a,0x00000000,0x00020011,0x00000001,0x0006000b,
	0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
	0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000620,0x00000644,0x00030010,
	0x00000004,0x00000007,0x00030003,0x00000002,0x000001cc,0x000a0004,0x475f4c47,0x4c474f4f,
	0x70635f45,0x74735f70,0x5f656c79,0x656e696c,0x7269645f,0x69746365,0x00006576,0x00080004,
	0x475f4c47,0x4c474f4f,0x6e695f45,0x64756c63,0x69645f65,0x74636572,0x00657669,0x00040005,
	0x00000004,0x6e69616d,0x00000000,0x00050005,0x0000000b,0x73696f6e,0x66762865,0x00003b32,
	0x00040005,0x0000000a,0x64656573,0x00000000,0x00050005,0x00000011,0x61746f72,0x66286574,
	0x00003b31,0x00030005,0x00000010,0x00000061,0x00050005,0x00000018,0x286d6266,0x3b326676,
	0x003b3175,0x00040005,0x00000016,0x64656573,0x00000000,0x00050005,0x00000017,0x4f6d756e,
	0x76617463,0x00007365,0x00070005,0x0000001f,0x70536873,0x65726568,0x33667628,0x3b31663b,
	0x00000000,0x00030005,0x0000001d,0x00000070,0x00030005,0x0000001e,0x00000072,0x00070005,
	0x00000025,0x6c506873,0x28656e61,0x3b336676,0x3b336676,0x003b3166,0x00030005,0x00000022,
	0x00000070,0x00030005,0x00000023,0x0000006e,0x00040005,0x00000024,0x74736964,0x00000000,
	0x00090005,0x0000002c,0x65426873,0x7265697a,0x33667628,0x3366763b,0x3366763b,0x3366763b,
	0x0000003b,0x00030005,0x00000028,0x00000070,0x00030005,0x00000029,0x00003176,0x00030005,
	0x0000002a,0x00003276,0x00030005,0x0000002b,0x00003376,0x00050005,0x0000002e,0x6574614d,
	0x6c616972,0x00000000,0x00050006,0x0000002e,0x00000000,0x66666964,0x00657375,0x00080006,
	0x0000002e,0x00000001,0x6174656d,0x63696c6c,0x67756f52,0x73656e68,0x00000073,0x00040005,
	0x0000002f,0x656a624f,0x00007463,0x00050006,0x0000002f,0x00000000,0x74736964,0x00000000,
	0x00040006,0x0000002f,0x00000001,0x0074616d,0x001a0005,0x00000034,0x6e55706f,0x286e6f69,
	0x75727473,0x4f2d7463,0x63656a62,0x31662d74,0x7274732d,0x2d746375,0x6574614d,0x6c616972,
	0x3366762d,0x3266762d,0x733b3131,0x63757274,0x624f2d74,0x7463656a,0x2d31662d,0x75727473,
	0x4d2d7463,0x72657461,0x2d6c6169,0x2d336676,0x31326676,0x00003b31,0x00030005,0x00000032,
	0x00000061,0x00030005,0x00000033,0x00000062,0x001c0005,0x0000003a,0x6d53706f,0x68746f6f,
	0x6f696e55,0x7473286e,0x74637572,0x6a624f2d,0x2d746365,0x732d3166,0x63757274,0x614d2d74,
	0x69726574,0x762d6c61,0x762d3366,0x31313266,0x7274733b,0x2d746375,0x656a624f,0x662d7463,
	0x74732d31,0x74637572,0x74614d2d,0x61697265,0x66762d6c,0x66762d33,0x3b313132,0x003b3166,
	0x00030005,0x00000037,0x00000061,0x00030005,0x00000038,0x00000062,0x00030005,0x00000039,
	0x0000006b,0x00100005,0x0000003f,0x6e4f706f,0x286e6f69,0x75727473,0x4f2d7463,0x63656a62,
	0x31662d74,0x7274732d,0x2d746375,0x6574614d,0x6c616972,0x3366762d,0x3266762d,0x663b3131,
	0x00003b31,0x00030005,0x0000003d,0x0000006f,0x00030005,0x0000003e,0x00000074,0x00050005,
	0x00000043,0x756f7267,0x7628646e,0x003b3366,0x00030005,0x00000042,0x00000070,0x00050005,
	0x00000046,0x65746177,0x66762872,0x00003b33,0x00030005,0x00000045,0x00000070,0x00050005,
	0x00000049,0x65646f6e,0x33667628,0x0000003b,0x00030005,0x00000048,0x00000070,0x00050005,
	0x0000004c,0x746f6f72,0x33667628,0x0000003b,0x00030005,0x0000004b,0x00000070,0x00050005,
	0x0000004f,0x6e656373,0x66762865,0x00003b33,0x00030005,0x0000004e,0x00000070,0x00060005,
	0x00000053,0x6b636162,0x756f7267,0x7628646e,0x003b3366,0x00030005,0x00000052,0x00000070,
	0x00040005,0x00000057,0x656d6163,0x00286172,0x00070005,0x0000005c,0x6d796172,0x68637261,
	0x33667628,0x3366763b,0x0000003b,0x00030005,0x0000005a,0x0000006f,0x00030005,0x0000005b,
	0x00000064,0x00050005,0x0000005f,0x6d726f6e,0x76286c61,0x003b3366,0x00030005,0x0000005e,
	0x00000070,0x00070005,0x00000064,0x74736964,0x75626972,0x6e6f6974,0x3b316628,0x003b3166,
	0x00040005,0x00000062,0x746f644e,0x00000048,0x00050005,0x00000063,0x67756f72,0x73656e68,
	0x00000073,0x00060005,0x00000069,0x73657266,0x286c656e,0x763b3166,0x003b3366,0x00050005,
	0x00000067,0x54736f63,0x61746568,0x00000000,0x00030005,0x00000068,0x00003066,0x00050005,
	0x0000006d,0x31662867,0x3b31663b,0x00000000,0x00040005,0x0000006b,0x746f644e,0x00000056,
	0x00050005,0x0000006c,0x67756f72,0x73656e68,0x00000073,0x00060005,0x00000073,0x74696d73,
	0x31662868,0x3b31663b,0x003b3166,0x00040005,0x00000070,0x746f644c,0x0000004e,0x00040005,
	0x00000071,0x746f6456,0x0000004e,0x00050005,0x00000072,0x67756f72,0x73656e68,0x00000073,
	0x000a0005,0x00000076,0x66666964,0x46657375,0x6e736572,0x6f436c65,0x63657272,0x6e6f6974,
	0x33667628,0x0000003b,0x00030005,0x00000075,0x00726f69,0x000a0005,0x00000081,0x66647262,
	0x3b316628,0x663b3166,0x31663b31,0x3b31663b,0x3b336676,0x663b3166,0x00003b31,0x00040005,
	0x00000079,0x746f644c,0x00000048,0x00040005,0x0000007a,0x746f644e,0x00000048,0x00040005,
	0x0000007b,0x746f6456,0x00000048,0x00040005,0x0000007c,0x746f644c,0x0000004e,0x00040005,
	0x0000007d,0x746f6456,0x0000004e,0x00040005,0x0000007e,0x66666964,0x00657375,0x00050005,
	0x0000007f,0x6174656d,0x63696c6c,0x00000000,0x00050005,0x00000080,0x67756f72,0x73656e68,
	0x00000073,0x000c0005,0x0000008c,0x64616873,0x66762865,0x66763b33,0x66763b33,0x66763b33,
	0x66763b33,0x66763b33,0x31663b33,0x3b31663b,0x00000000,0x00030005,0x00000084,0x00000070,
	0x00030005,0x00000085,0x00000064,0x00030005,0x00000086,0x0000006e,0x00050005,0x00000087,
	0x6867696c,0x736f5074,0x00000000,0x00050005,0x00000088,0x6867696c,0x6c6f4374,0x0000726f,
	0x00040005,0x00000089,0x66666964,0x00657375,0x00050005,0x0000008a,0x6174656d,0x63696c6c,
	0x00000000,0x00050005,0x0000008b,0x67756f72,0x73656e68,0x00000073,0x00080005,0x00000092,
	0x64616873,0x2873776f,0x3b336676,0x3b336676,0x3b336676,0x00000000,0x00030005,0x0000008f,
	0x00000070,0x00030005,0x00000090,0x0000006e,0x00050005,0x00000091,0x6867696c,0x736f5074,
	0x00000000,0x00090005,0x00000097,0x69626d61,0x4f746e65,0x756c6363,0x6e6f6973,0x33667628,
	0x3366763b,0x0000003b,0x00030005,0x00000095,0x00000070,0x00030005,0x00000096,0x0000006e,
	0x00060005,0x0000009c,0x646e6572,0x76287265,0x763b3366,0x003b3366,0x00030005,0x0000009a,
	0x0000006f,0x00030005,0x0000009b,0x00000064,0x00030005,0x0000009f,0x00007075,0x00040005,
	0x000000ae,0x616e6973,0x00000000,0x00040005,0x000000b1,0x61736f63,0x00000000,0x00030005,
	0x000000be,0x00736572,0x00030005,0x000000bf,0x00706d61,0x00040005,0x000000c1,0x71657266,
	0x00000000,0x00030005,0x000000c3,0x00000069,0x00040005,0x000000ce,0x61726170,0x0000006d,
	0x00040005,0x000000da,0x61726170,0x0000006d,0x00030005,0x000000f1,0x00003163,0x00030005,
	0x000000f5,0x00003263,0x00030005,0x000000fd,0x00003363,0x00030005,0x00000101,0x00003374,
	0x00030005,0x00000105,0x00003274,0x00030005,0x0000010d,0x00003174,0x00030005,0x00000118,
	0x00003074,0x00030005,0x0000011e,0x00323274,0x00030005,0x00000122,0x00007170,0x00030005,
	0x00000134,0x00707070,0x00030005,0x0000013d,0x00007171,0x00030005,0x00000143,0x00003270,
	0x00030005,0x00000147,0x00003172,0x00030005,0x00000159,0x00003272,0x00040005,0x00000164,
	0x746f6f72,0x00000000,0x00030005,0x00000194,0x00006361,0x00040005,0x0000019e,0x746f6f72,
	0x00000073,0x00030005,0x000001b3,0x00003170,0x00030005,0x000001c6,0x00003270,0x00030005,
	0x000001f2,0x00000068,0x00040005,0x000001fc,0x4477656e,0x00747369,0x00030005,0x00000209,
	0x00006662,0x00050005,0x00000212,0x6e656c62,0x63614664,0x00726f74,0x00040005,0x00000221,
	0x4d77656e,0x00007461,0x00040005,0x00000240,0x74736964,0x00000000,0x00040005,0x00000245,
	0x61726170,0x0000006d,0x00040005,0x0000024f,0x61726170,0x0000006d,0x00040005,0x00000256,
	0x61726170,0x0000006d,0x00040005,0x00000262,0x61726170,0x0000006d,0x00040005,0x00000263,
	0x61726170,0x0000006d,0x00040005,0x0000026c,0x61726170,0x0000006d,0x00040005,0x0000026d,
	0x61726170,0x0000006d,0x00040005,0x00000273,0x61726170,0x0000006d,0x00050005,0x0000027e,
	0x6f6c6f63,0x63614672,0x00726f74,0x00040005,0x0000028e,0x61726170,0x0000006d,0x00040005,
	0x0000028f,0x61726170,0x0000006d,0x00040005,0x00000296,0x74736964,0x00000000,0x00060005,
	0x00000298,0x68737550,0x736e6f43,0x746e6174,0x00000073,0x00050006,0x00000298,0x00000000,
	0x656d6974,0x00000000,0x00050006,0x00000298,0x00000001,0x74646977,0x00000068,0x00050006,
	0x00000298,0x00000002,0x67696568,0x00007468,0x00070006,0x00000298,0x00000003,0x656d6163,
	0x6f506172,0x69746973,0x00006e6f,0x00070006,0x00000298,0x00000004,0x656d6163,0x69446172,
	0x74636572,0x006e6f69,0x00080006,0x00000298,0x00000005,0x746f6f72,0x64616548,0x69736f50,
	0x6e6f6974,0x00000000,0x00080006,0x00000298,0x00000006,0x746f6f72,0x746e6543,0x6f507265,
	0x69746973,0x00006e6f,0x00080006,0x00000298,0x00000007,0x746f6f72,0x6c696154,0x69736f50,
	0x6e6f6974,0x00000000,0x00030005,0x0000029a,0x00004370,0x00040005,0x000002a1,0x61726170,
	0x0000006d,0x00040005,0x000002a3,0x61726170,0x0000006d,0x00040005,0x000002a4,0x61726170,
	0x0000006d,0x00040005,0x000002b0,0x656d6974,0x00000000,0x00030005,0x000002b5,0x00000061,
	0x00040005,0x000002b9,0x74736964,0x00000000,0x00040005,0x000002be,0x61726170,0x0000006d,
	0x00040005,0x000002bf,0x61726170,0x0000006d,0x00040005,0x000002c8,0x656d6974,0x00000000,
	0x00050005,0x000002cc,0x67676977,0x6954656c,0x0000656d,0x00060005,0x000002cd,0x67676977,
	0x6e49656c,0x736e6574,0x00797469,0x00040005,0x000002cf,0x746e6563,0x00007265,0x00040005,
	0x000002e2,0x64616568,0x00000000,0x00040005,0x000002f5,0x6c696174,0x00000000,0x00040005,
	0x00000301,0x74736964,0x00000000,0x00040005,0x00000302,0x61726170,0x0000006d,0x00040005,
	0x00000304,0x61726170,0x0000006d,0x00040005,0x00000306,0x61726170,0x0000006d,0x00040005,
	0x00000308,0x61726170,0x0000006d,0x00040005,0x00000317,0x756f7267,0x0000646e,0x00040005,
	0x00000318,0x61726170,0x0000006d,0x00040005,0x0000031b,0x65746177,0x00000072,0x00040005,
	0x0000031c,0x61726170,0x0000006d,0x00040005,0x0000031f,0x65646f6e,0x00000000,0x00040005,
	0x00000320,0x61726170,0x0000006d,0x00040005,0x00000323,0x746f6f72,0x00000000,0x00040005,
	0x00000324,0x61726170,0x0000006d,0x00040005,0x00000327,0x6e656373,0x00000065,0x00040005,
	0x00000328,0x61726170,0x0000006d,0x00040005,0x0000032a,0x61726170,0x0000006d,0x00040005,
	0x0000032c,0x61726170,0x0000006d,0x00040005,0x0000032f,0x61726170,0x0000006d,0x00040005,
	0x00000331,0x61726170,0x0000006d,0x00040005,0x00000333,0x61726170,0x0000006d,0x00040005,
	0x00000335,0x61726170,0x0000006d,0x00040005,0x00000336,0x61726170,0x0000006d,0x00040005,
	0x00000338,0x61726170,0x0000006d,0x00040005,0x0000033a,0x61726170,0x0000006d,0x00040005,
	0x0000033c,0x61726170,0x0000006d,0x00030005,0x0000033f,0x00000069,0x00040005,0x00000348,
	0x6867694c,0x00000074,0x00060006,0x00000348,0x00000000,0x69736f70,0x6e6f6974,0x00000000,
	0x00050006,0x00000348,0x00000001,0x6f6c6f63,0x00000072,0x00050005,0x0000034b,0x6867694c,
	0x676e6974,0x00000000,0x00060006,0x0000034b,0x00000000,0x694c626e,0x73746867,0x00000000,
	0x00050006,0x0000034b,0x00000001,0x6867696c,0x00007374,0x00040005,0x0000034d,0x6867696c,
	0x00000074,0x00060005,0x0000035a,0x6867696c,0x736f5074,0x6f697469,0x0000006e,0x00040005,
	0x00000367,0x74736964,0x00000000,0x00040005,0x0000036b,0x61726170,0x0000006d,0x00040005,
	0x0000036c,0x61726170,0x0000006d,0x00050005,0x0000036e,0x6867696c,0x6a624f74,0x00746365,
	0x00040005,0x00000374,0x61726170,0x0000006d,0x00040005,0x00000376,0x61726170,0x0000006d,
	0x00040005,0x00000381,0x77726f66,0x00647261,0x00040005,0x0000038e,0x68676972,0x00000074,
	0x00040005,0x00000393,0x6c616572,0x00007055,0x00040005,0x000003aa,0x656a626f,0x00007463,
	0x00030005,0x000003ae,0x00000069,0x00030005,0x000003b8,0x00000070,0x00050005,0x000003bf,
	0x656a626f,0x69487463,0x00000074,0x00040005,0x000003c0,0x61726170,0x0000006d,0x00030005,
	0x000003e0,0x0000006e,0x00040005,0x000003e1,0x61726170,0x0000006d,0x00040005,0x000003ea,
	0x61726170,0x0000006d,0x00040005,0x000003f0,0x61726170,0x0000006d,0x00040005,0x000003f6,
	0x61726170,0x0000006d,0x00030005,0x000003ff,0x00000061,0x00040005,0x00000403,0x75715361,
	0x00657261,0x00050005,0x00000407,0x746f644e,0x75715348,0x00657261,0x00040005,0x0000040b,
	0x6f6e6564,0x0000006d,0x00030005,0x00000426,0x00000072,0x00030005,0x00000429,0x0000006b,
	0x00040005,0x0000042e,0x6f6e6564,0x0000006d,0x00030005,0x0000043a,0x00007667,0x00040005,
	0x0000043b,0x61726170,0x0000006d,0x00040005,0x0000043d,0x61726170,0x0000006d,0x00030005,
	0x00000440,0x00006c67,0x00040005,0x00000441,0x61726170,0x0000006d,0x00040005,0x00000443,
	0x61726170,0x0000006d,0x00050005,0x0000044b,0x53726f69,0x72617571,0x00000065,0x00030005,
	0x00000451,0x00524954,0x00050005,0x00000454,0x44766e69,0x6d756e65,0x00000000,0x00030005,
	0x00000460,0x006d756e,0x00030005,0x0000047e,0x00000064,0x00040005,0x0000047f,0x61726170,
	0x0000006d,0x00040005,0x00000481,0x61726170,0x0000006d,0x00030005,0x00000484,0x00000066,
	0x00040005,0x0000048b,0x61726170,0x0000006d,0x00040005,0x0000048d,0x61726170,0x0000006d,
	0x00030005,0x0000048f,0x00005466,0x00040005,0x00000494,0x61726170,0x0000006d,0x00040005,
	0x00000496,0x61726170,0x0000006d,0x00040005,0x00000498,0x52495466,0x00000000,0x00040005,
	0x0000049d,0x61726170,0x0000006d,0x00040005,0x0000049f,0x61726170,0x0000006d,0x00030005,
	0x000004a1,0x00000067,0x00040005,0x000004a2,0x61726170,0x0000006d,0x00040005,0x000004a4,
	0x61726170,0x0000006d,0x00040005,0x000004a6,0x61726170,0x0000006d,0x00030005,0x000004a9,
	0x00636664,0x00040005,0x000004ac,0x61726170,0x0000006d,0x00050005,0x000004ae,0x626d616c,
	0x69747265,0x00006e61,0x00030005,0x000004d0,0x0000006c,0x00030005,0x000004d5,0x00000076,
	0x00030005,0x000004d8,0x00000068,0x00040005,0x000004dd,0x746f644c,0x00000048,0x00040005,
	0x000004e2,0x746f644e,0x00000048,0x00040005,0x000004e7,0x746f6456,0x00000048,0x00040005,
	0x000004ec,0x746f644c,0x0000004e,0x00040005,0x000004f1,0x746f6456,0x0000004e,0x00040005,
	0x000004f6,0x66647262,0x00000000,0x00040005,0x000004f7,0x61726170,0x0000006d,0x00040005,
	0x000004f9,0x61726170,0x0000006d,0x00040005,0x000004fb,0x61726170,0x0000006d,0x00040005,
	0x000004fd,0x61726170,0x0000006d,0x00040005,0x000004ff,0x61726170,0x0000006d,0x00040005,
	0x00000501,0x61726170,0x0000006d,0x00040005,0x00000503,0x61726170,0x0000006d,0x00040005,
	0x00000505,0x61726170,0x0000006d,0x00030005,0x0000050f,0x00736572,0x00040005,0x00000510,
	0x74736964,0x00000000,0x00050005,0x00000511,0x6867696c,0x7a695374,0x00000065,0x00030005,
	0x00000513,0x00000069,0x00030005,0x0000051c,0x00746968,0x00040005,0x00000522,0x61726170,
	0x0000006d,0x00030005,0x0000053e,0x00006f61,0x00040005,0x0000053f,0x67696577,0x00007468,
	0x00030005,0x00000540,0x00000069,0x00030005,0x00000549,0x006e656c,0x00040005,0x00000550,
	0x74736964,0x00000000,0x00040005,0x00000556,0x61726170,0x0000006d,0x00040005,0x0000056c,
	0x63617266,0x00000000,0x00040005,0x0000056d,0x6f6c6f63,0x00000072,0x00040005,0x0000056e,
	0x74706564,0x00000068,0x00050005,0x00000576,0x61636f6c,0x6c6f436c,0x0000726f,0x00040005,
	0x00000577,0x656a626f,0x00007463,0x00040005,0x00000578,0x61726170,0x0000006d,0x00040005,
	0x0000057a,0x61726170,0x0000006d,0x00030005,0x0000057d,0x00000070,0x00030005,0x00000584,
	0x0000006e,0x00040005,0x00000585,0x61726170,0x0000006d,0x00050005,0x00000588,0x6174656d,
	0x63696c6c,0x00000000,0x00040005,0x00000590,0x66666964,0x00657375,0x00050005,0x00000593,
	0x67756f72,0x73656e68,0x00000073,0x00030005,0x00000596,0x00006f61,0x00040005,0x00000597,
	0x61726170,0x0000006d,0x00040005,0x00000599,0x61726170,0x0000006d,0x00030005,0x0000059c,
	0x00000069,0x00050005,0x000005ad,0x69736f70,0x6e6f6974,0x00000000,0x00040005,0x000005bb,
	0x61726170,0x0000006d,0x00040005,0x000005bd,0x61726170,0x0000006d,0x00040005,0x000005bf,
	0x61726170,0x0000006d,0x00040005,0x000005c1,0x61726170,0x0000006d,0x00040005,0x000005c3,
	0x61726170,0x0000006d,0x00040005,0x000005c7,0x61726170,0x0000006d,0x00040005,0x000005c9,
	0x61726170,0x0000006d,0x00040005,0x000005cb,0x61726170,0x0000006d,0x00040005,0x000005ce,
	0x61726170,0x0000006d,0x00040005,0x000005d0,0x61726170,0x0000006d,0x00040005,0x000005d2,
	0x61726170,0x0000006d,0x00040005,0x000005de,0x61726170,0x0000006d,0x00040005,0x000005ef,
	0x61726170,0x0000006d,0x00060005,0x00000612,0x656d6163,0x614d6172,0x78697274,0x00000000,
	0x00030005,0x00000614,0x006d6964,0x00040005,0x0000061e,0x5577656e,0x00000076,0x00030005,
	0x00000620,0x00007675,0x00030005,0x0000062c,0x00000064,0x00040005,0x00000634,0x6f6c6f63,
	0x00000072,0x00040005,0x0000063f,0x61726170,0x0000006d,0x00040005,0x00000640,0x61726170,
	0x0000006d,0x00050005,0x00000644,0x4374756f,0x726f6c6f,0x00000000,0x00050048,0x00000298,
	0x00000000,0x00000023,0x00000000,0x00050048,0x00000298,0x00000001,0x00000023,0x00000004,
	0x00050048,0x00000298,0x00000002,0x00000023,0x00000008,0x00050048,0x00000298,0x00000003,
	0x00000023,0x00000010,0x00050048,0x00000298,0x00000004,0x00000023,0x00000020,0x00050048,
	0x00000298,0x00000005,0x00000023,0x00000030,0x00050048,0x00000298,0x00000006,0x00000023,
	0x00000040,0x00050048,0x00000298,0x00000007,0x00000023,0x00000050,0x00030047,0x00000298,
	0x00000002,0x00050048,0x00000348,0x00000000,0x00000023,0x00000000,0x00050048,0x00000348,
	0x00000001,0x00000023,0x00000010,0x00040047,0x0000034a,0x00000006,0x00000020,0x00050048,
	0x0000034b,0x00000000,0x00000023,0x00000000,0x00050048,0x0000034b,0x00000001,0x00000023,
	0x00000010,0x00030047,0x0000034b,0x00000002,0x00040047,0x0000034d,0x00000022,0x00000000,
	0x00040047,0x0000034d,0x00000021,0x00000000,0x00040047,0x00000620,0x0000001e,0x00000000,
	0x00040047,0x00000644,0x0000001e,0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,
	0x00000002,0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000002,
	0x00040020,0x00000008,0x00000007,0x00000007,0x00040021,0x00000009,0x00000006,0x00000008,
	0x00040020,0x0000000d,0x00000007,0x00000006,0x00040018,0x0000000e,0x00000007,0x00000002,
	0x00040021,0x0000000f,0x0000000e,0x0000000d,0x00040015,0x00000013,0x00000020,0x00000000,
	0x00040020,0x00000014,0x00000007,0x00000013,0x00050021,0x00000015,0x00000006,0x00000008,
	0x00000014,0x00040017,0x0000001a,0x00000006,0x00000003,0x00040020,0x0000001b,0x00000007,
	0x0000001a,0x00050021,0x0000001c,0x00000006,0x0000001b,0x0000000d,0x00060021,0x00000021,
	0x00000006,0x0000001b,0x0000001b,0x0000000d,0x00070021,0x00000027,0x00000006,0x0000001b,
	0x0000001b,0x0000001b,0x0000001b,0x0004001e,0x0000002e,0x0000001a,0x00000007,0x0004001e,
	0x0000002f,0x00000006,0x0000002e,0x00040020,0x00000030,0x00000007,0x0000002f,0x00050021,
	0x00000031,0x0000002f,0x00000030,0x00000030,0x00060021,0x00000036,0x0000002f,0x00000030,
	0x00000030,0x0000000d,0x00050021,0x0000003c,0x0000002f,0x00000030,0x0000000d,0x00040021,
	0x00000041,0x0000002f,0x0000001b,0x00040021,0x00000051,0x0000001a,0x0000001b,0x00040018,
	0x00000055,0x0000001a,0x00000003,0x00030021,0x00000056,0x00000055,0x00050021,0x00000059,
	0x0000002f,0x0000001b,0x0000001b,0x00050021,0x00000061,0x00000006,0x0000000d,0x0000000d,
	0x00050021,0x00000066,0x0000001a,0x0000000d,0x0000001b,0x00060021,0x0000006f,0x00000006,
	0x0000000d,0x0000000d,0x0000000d,0x000b0021,0x00000078,0x0000001a,0x0000000d,0x0000000d,
	0x0000000d,0x0000000d,0x0000000d,0x0000001b,0x0000000d,0x0000000d,0x000b0021,0x00000083,
	0x0000001a,0x0000001b,0x0000001b,0x0000001b,0x0000001b,0x0000001b,0x0000001b,0x0000000d,
	0x0000000d,0x00060021,0x0000008e,0x00000006,0x0000001b,0x0000001b,0x0000001b,0x00050021,
	0x00000094,0x00000006,0x0000001b,0x0000001b,0x00050021,0x00000099,0x0000001a,0x0000001b,
	0x0000001b,0x00040020,0x0000009e,0x00000006,0x0000001a,0x0004003b,0x0000009e,0x0000009f,
	0x00000006,0x0004002b,0x00000006,0x000000a0,0x00000000,0x0004002b,0x00000006,0x000000a1,
	0x3f800000,0x0006002c,0x0000001a,0x000000a2,0x000000a0,0x000000a1,0x000000a0,0x0004002b,
	0x00000013,0x000000a3,0x00000000,0x0004002b,0x00000013,0x000000a7,0x00000001,0x0004002b,
	0x00000006,0x000000c0,0x3f000000,0x0004002b,0x00000006,0x000000c2,0x3ff9999a,0x00020014,
	0x000000cb,0x0004002b,0x00000006,0x000000d9,0x3fc90fdb,0x00040015,0x000000de,0x00000020,
	0x00000001,0x0004002b,0x000000de,0x000000df,0x00000001,0x0004002b,0x00000006,0x000000f6,
	0x40000000,0x0004002b,0x00000006,0x00000109,0x40400000,0x0004002b,0x00000006,0x0000012a,
	0x41580000,0x0004002b,0x00000006,0x00000148,0x3fc00000,0x0004002b,0x00000006,0x00000150,
	0x3e800000,0x0004002b,0x00000006,0x00000153,0x41d80000,0x0004002b,0x00000006,0x00000177,
	0xc0000000,0x0004002b,0x00000006,0x00000196,0xc0400000,0x0004002b,0x00000006,0x000001a7,
	0x40860a92,0x0004002b,0x000000de,0x000001e3,0x00000000,0x00040020,0x00000220,0x00000007,
	0x0000002e,0x0004002b,0x00000006,0x00000243,0x3b03126f,0x0004002b,0x00000006,0x0000024a,
	0x42000000,0x0004002b,0x00000006,0x0000024d,0x3ca3d70a,0x0004002b,0x00000006,0x00000254,
	0x3c03126f,0x0004002b,0x00000006,0x00000259,0x41000000,0x0004002b,0x00000006,0x0000025f,
	0x3d4ccccd,0x0004002b,0x00000013,0x00000261,0x00000002,0x0004002b,0x00000006,0x00000268,
	0x41a00000,0x0004002b,0x00000006,0x0000027a,0x41b00000,0x0004002b,0x00000006,0x00000281,
	0x435c0000,0x0004002b,0x00000006,0x00000284,0x3dcccccd,0x0004002b,0x00000006,0x00000285,
	0x3f11eb85,0x0004002b,0x00000006,0x00000286,0x3cf5c28f,0x0006002c,0x0000001a,0x00000287,
	0x00000284,0x00000285,0x00000286,0x0004002b,0x00000013,0x0000028d,0x00000004,0x0004002b,
	0x00000006,0x00000297,0x41200000,0x000a001e,0x00000298,0x00000006,0x00000013,0x00000013,
	0x0000001a,0x0000001a,0x0000001a,0x0000001a,0x0000001a,0x00040020,0x00000299,0x00000009,
	0x00000298,0x0004003b,0x00000299,0x0000029a,0x00000009,0x00040020,0x0000029b,0x00000009,
	0x00000006,0x0004002b,0x00000006,0x000002a7,0x3db851ec,0x0004002b,0x00000006,0x000002a8,
	0x3f0f5c29,0x0004002b,0x00000006,0x000002a9,0x3f23d70a,0x0006002c,0x0000001a,0x000002aa,
	0x000002a7,0x000002a8,0x000002a9,0x0005002c,0x00000007,0x000002ab,0x000000c0,0x000000a1,
	0x0005002c,0x0000002e,0x000002ac,0x000002aa,0x000002ab,0x0004002b,0x00000006,0x000002b3,
	0x42c80000,0x0006002c,0x0000001a,0x000002bb,0x000000a0,0x00000268,0x000000a0,0x0004002b,
	0x00000006,0x000002bd,0x43960000,0x0006002c,0x0000001a,0x000002c2,0x000000a1,0x000000a0,
	0x000000a0,0x0005002c,0x00000007,0x000002c3,0x000000a0,0x000000a0,0x0005002c,0x0000002e,
	0x000002c4,0x000002c2,0x000002c3,0x0004002b,0x00000006,0x000002ce,0x42480000,0x0004002b,
	0x000000de,0x000002d0,0x00000006,0x0004002b,0x000000de,0x000002e3,0x00000005,0x0004002b,
	0x000000de,0x000002f6,0x00000007,0x0004002b,0x00000006,0x000002fc,0x41f00000,0x0004002b,
	0x00000006,0x0000030c,0x41700000,0x0004002b,0x00000006,0x0000030e,0x3ea8f5c3,0x0004002b,
	0x00000006,0x0000030f,0x3f28f5c3,0x0004002b,0x00000006,0x00000310,0x3f666666,0x0006002c,
	0x0000001a,0x00000311,0x0000030e,0x0000030f,0x00000310,0x0005002c,0x00000007,0x00000312,
	0x000000a0,0x000000a1,0x0005002c,0x0000002e,0x00000313,0x00000311,0x00000312,0x0004002b,
	0x00000006,0x0000032e,0x42200000,0x00040020,0x0000033e,0x00000007,0x000000de,0x00040017,
	0x00000347,0x00000006,0x00000004,0x0004001e,0x00000348,0x00000347,0x0000001a,0x0004002b,
	0x00000013,0x00000349,0x00000200,0x0004001c,0x0000034a,0x00000348,0x00000349,0x0004001e,
	0x0000034b,0x00000013,0x0000034a,0x00040020,0x0000034c,0x00000002,0x0000034b,0x0004003b,
	0x0000034c,0x0000034d,0x00000002,0x00040020,0x0000034e,0x00000002,0x00000013,0x0004002b,
	0x00000013,0x00000353,0x00000003,0x00040020,0x00000354,0x00000002,0x00000006,0x00040020,
	0x00000360,0x00000002,0x00000347,0x0006002c,0x0000001a,0x00000370,0x000000a1,0x000000a1,
	0x000000a1,0x0005002c,0x00000007,0x00000371,0x000000a1,0x000000a0,0x0005002c,0x0000002e,
	0x00000372,0x00000370,0x00000371,0x0006002c,0x0000001a,0x0000037e,0x00000284,0x00000284,
	0x00000284,0x0004002b,0x000000de,0x00000382,0x00000004,0x00040020,0x00000386,0x00000009,
	0x0000001a,0x0006002c,0x0000001a,0x000003ab,0x000000a0,0x000000a0,0x000000a0,0x0005002c,
	0x0000002e,0x000003ac,0x000003ab,0x000002c3,0x0005002c,0x0000002f,0x000003ad,0x000000a0,
	0x000003ac,0x0004002b,0x00000013,0x000003b6,0x00000100,0x0004002b,0x00000006,0x000003c6,
	0x3a83126f,0x0004002b,0x00000006,0x000003d6,0x459c4000,0x0004002b,0x00000006,0x000003e7,
	0x3c23d70a,0x0006002c,0x0000001a,0x000003e8,0x000003e7,0x000000a0,0x000000a0,0x0006002c,
	0x0000001a,0x000003ee,0x000000a0,0x000003e7,0x000000a0,0x0006002c,0x0000001a,0x000003f4,
	0x000000a0,0x000000a0,0x000003e7,0x0004002b,0x00000006,0x00000412,0x40490fdb,0x0004002b,
	0x00000006,0x00000420,0x40a00000,0x00040017,0x0000044f,0x000000cb,0x00000003,0x00040020,
	0x00000450,0x00000007,0x0000044f,0x0004002b,0x00000006,0x00000458,0x484e165c,0x0006002c,
	0x0000001a,0x00000459,0x00000458,0x00000458,0x00000458,0x0004002b,0x00000006,0x00000462,
	0x3e44b9f4,0x0006002c,0x0000001a,0x00000463,0x00000462,0x00000462,0x00000462,0x0004002b,
	0x00000006,0x00000465,0x43952000,0x0004002b,0x00000006,0x00000467,0x4382b0a4,0x0004002b,
	0x00000006,0x0000046b,0x430a6e14,0x0004002b,0x00000006,0x00000471,0x3f4ed183,0x0006002c,
	0x0000001a,0x00000472,0x00000471,0x00000471,0x00000471,0x0004002b,0x00000006,0x00000473,
	0xbf88f5c3,0x0006002c,0x0000001a,0x00000474,0x00000473,0x00000473,0x00000473,0x0004002b,
	0x00000006,0x00000485,0x3d23d70a,0x0006002c,0x0000001a,0x00000486,0x00000485,0x00000485,
	0x00000485,0x0004002b,0x00000006,0x000004aa,0x3f866666,0x0006002c,0x0000001a,0x000004ab,
	0x000004aa,0x000004aa,0x000004aa,0x0004002b,0x00000006,0x000004b7,0x40800000,0x0004002b,
	0x00000006,0x00000512,0x3e19999a,0x0004002b,0x00000006,0x00000532,0x42700000,0x0004002b,
	0x000000de,0x00000547,0x00000008,0x0004002b,0x00000006,0x00000560,0x3f59999a,0x0004002b,
	0x00000006,0x00000565,0x3f19999a,0x00040020,0x000005c4,0x00000002,0x0000001a,0x0004002b,
	0x00000006,0x000005e3,0xb50637bd,0x00040020,0x00000611,0x00000007,0x00000055,0x00040020,
	0x00000615,0x00000009,0x00000013,0x0004002b,0x000000de,0x00000619,0x00000002,0x00040020,
	0x0000061f,0x00000001,0x00000007,0x0004003b,0x0000061f,0x00000620,0x00000001,0x0004002b,
	0x000000de,0x00000635,0x00000003,0x00040020,0x00000643,0x00000003,0x00000347,0x0004003b,
	0x00000643,0x00000644,0x00000003,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,
	0x000200f8,0x00000005,0x0004003b,0x00000611,0x00000612,0x00000007,0x0004003b,0x00000008,
	0x00000614,0x00000007,0x0004003b,0x00000008,0x0000061e,0x00000007,0x0004003b,0x0000001b,
	0x0000062c,0x00000007,0x0004003b,0x0000001b,0x00000634,0x00000007,0x0004003b,0x0000001b,
	0x0000063f,0x00000007,0x0004003b,0x0000001b,0x00000640,0x00000007,0x0003003e,0x0000009f,
	0x000000a2,0x00040039,0x00000055,0x00000613,0x00000057,0x0003003e,0x00000612,0x00000613,
	0x00050041,0x00000615,0x00000616,0x0000029a,0x000000df,0x0004003d,0x00000013,0x00000617,
	0x00000616,0x00040070,0x00000006,0x00000618,0x00000617,0x00050041,0x00000615,0x0000061a,
	0x0000029a,0x00000619,0x0004003d,0x00000013,0x0000061b,0x0000061a,0x00040070,0x00000006,
	0x0000061c,0x0000061b,0x00050050,0x00000007,0x0000061d,0x00000618,0x0000061c,0x0003003e,
	0x00000614,0x0000061d,0x0004003d,0x00000007,0x00000621,0x00000620,0x0004003d,0x00000007,
	0x00000622,0x00000614,0x00050085,0x00000007,0x00000623,0x00000621,0x00000622,0x0005008e,
	0x00000007,0x00000624,0x00000623,0x000000f6,0x0004003d,0x00000007,0x00000625,0x00000614,
	0x00050083,0x00000007,0x00000626,0x00000624,0x00000625,0x00050041,0x00000615,0x00000627,
	0x0000029a,0x00000619,0x0004003d,0x00000013,0x00000628,0x00000627,0x00040070,0x00000006,
	0x00000629,0x00000628,0x00050050,0x00000007,0x0000062a,0x00000629,0x00000629,0x00050088,
	0x00000007,0x0000062b,0x00000626,0x0000062a,0x0003003e,0x0000061e,0x0000062b,0x0004003d,
	0x00000055,0x0000062d,0x00000612,0x0004003d,0x00000007,0x0000062e,0x0000061e,0x00050051,
	0x00000006,0x0000062f,0x0000062e,0x00000000,0x00050051,0x00000006,0x00000630,0x0000062e,
	0x00000001,0x00060050,0x0000001a,0x00000631,0x0000062f,0x00000630,0x000000f6,0x0006000c,
	0x0000001a,0x00000632,0x00000001,0x00000045,0x00000631,0x00050091,0x0000001a,0x00000633,
	0x0000062d,0x00000632,0x0003003e,0x0000062c,0x00000633,0x00060041,0x0000029b,0x00000636,
	0x0000029a,0x00000635,0x000000a3,0x0004003d,0x00000006,0x00000637,0x00000636,0x0004007f,
	0x00000006,0x00000638,0x00000637,0x00050041,0x00000386,0x00000639,0x0000029a,0x00000635,
	0x0004003d,0x0000001a,0x0000063a,0x00000639,0x0007004f,0x00000007,0x0000063b,0x0000063a,
	0x0000063a,0x00000001,0x00000002,0x00050051,0x00000006,0x0000063c,0x0000063b,0x00000000,
	0x00050051,0x00000006,0x0000063d,0x0000063b,0x00000001,0x00060050,0x0000001a,0x0000063e,
	0x00000638,0x0000063c,0x0000063d,0x0003003e,0x0000063f,0x0000063e,0x0004003d,0x0000001a,
	0x00000641,0x0000062c,0x0003003e,0x00000640,0x00000641,0x00060039,0x0000001a,0x00000642,
	0x0000009c,0x0000063f,0x00000640,0x0003003e,0x00000634,0x00000642,0x0004003d,0x0000001a,
	0x00000645,0x00000634,0x00050051,0x00000006,0x00000646,0x00000645,0x00000000,0x00050051,
	0x00000006,0x00000647,0x00000645,0x00000001,0x00050051,0x00000006,0x00000648,0x00000645,
	0x00000002,0x00070050,0x00000347,0x00000649,0x00000646,0x00000647,0x00000648,0x000000a1,
	0x0003003e,0x00000644,0x00000649,0x000100fd,0x00010038,0x00050036,0x00000006,0x0000000b,
	0x00000000,0x00000009,0x00030037,0x00000008,0x0000000a,0x000200f8,0x0000000c,0x00050041,
	0x0000000d,0x000000a4,0x0000000a,0x000000a3,0x0004003d,0x00000006,0x000000a5,0x000000a4,
	0x0006000c,0x00000006,0x000000a6,0x00000001,0x0000000d,0x000000a5,0x00050041,0x0000000d,
	0x000000a8,0x0000000a,0x000000a7,0x0004003d,0x00000006,0x000000a9,0x000000a8,0x0006000c,
	0x00000006,0x000000aa,0x00000001,0x0000000d,0x000000a9,0x00050081,0x00000006,0x000000ab,
	0x000000a6,0x000000aa,0x000200fe,0x000000ab,0x00010038,0x00050036,0x0000000e,0x00000011,
	0x00000000,0x0000000f,0x00030037,0x0000000d,0x00000010,0x000200f8,0x00000012,0x0004003b,
	0x0000000d,0x000000ae,0x00000007,0x0004003b,0x0000000d,0x000000b1,0x00000007,0x0004003d,
	0x00000006,0x000000af,0x00000010,0x0006000c,0x00000006,0x000000b0,0x00000001,0x0000000d,
	0x000000af,0x0003003e,0x000000ae,0x000000b0,0x0004003d,0x00000006,0x000000b2,0x00000010,
	0x0006000c,0x00000006,0x000000b3,0x00000001,0x0000000e,0x000000b2,0x0003003e,0x000000b1,
	0x000000b3,0x0004003d,0x00000006,0x000000b4,0x000000b1,0x0004003d,0x00000006,0x000000b5,
	0x000000ae,0x0004007f,0x00000006,0x000000b6,0x000000b5,0x0004003d,0x00000006,0x000000b7,
	0x000000ae,0x0004003d,0x00000006,0x000000b8,0x000000b1,0x00050050,0x00000007,0x000000b9,
	0x000000b4,0x000000b6,0x00050050,0x00000007,0x000000ba,0x000000b7,0x000000b8,0x00050050,
	0x0000000e,0x000000bb,0x000000b9,0x000000ba,0x000200fe,0x000000bb,0x00010038,0x00050036,
	0x00000006,0x00000018,0x00000000,0x00000015,0x00030037,0x00000008,0x00000016,0x00030037,
	0x00000014,0x00000017,0x000200f8,0x00000019,0x0004003b,0x0000000d,0x000000be,0x00000007,
	0x0004003b,0x0000000d,0x000000bf,0x00000007,0x0004003b,0x0000000d,0x000000c1,0x00000007,
	0x0004003b,0x00000014,0x000000c3,0x00000007,0x0004003b,0x00000008,0x000000ce,0x00000007,
	0x0004003b,0x0000000d,0x000000da,0x00000007,0x0003003e,0x000000be,0x000000a0,0x0003003e,
	0x000000bf,0x000000c0,0x0003003e,0x000000c1,0x000000c2,0x0003003e,0x000000c3,0x000000a3,
	0x000200f9,0x000000c4,0x000200f8,0x000000c4,0x000400f6,0x000000c6,0x000000c7,0x00000000,
	0x000200f9,0x000000c8,0x000200f8,0x000000c8,0x0004003d,0x00000013,0x000000c9,0x000000c3,
	0x0004003d,0x00000013,0x000000ca,0x00000017,0x000500b0,0x000000cb,0x000000cc,0x000000c9,
	0x000000ca,0x000400fa,0x000000cc,0x000000c5,0x000000c6,0x000200f8,0x000000c5,0x0004003d,
	0x00000006,0x000000cd,0x000000bf,0x0004003d,0x00000007,0x000000cf,0x00000016,0x0003003e,
	0x000000ce,0x000000cf,0x00050039,0x00000006,0x000000d0,0x0000000b,0x000000ce,0x00050085,
	0x00000006,0x000000d1,0x000000cd,0x000000d0,0x0004003d,0x00000006,0x000000d2,0x000000be,
	0x00050081,0x00000006,0x000000d3,0x000000d2,0x000000d1,0x0003003e,0x000000be,0x000000d3,
	0x0004003d,0x00000006,0x000000d4,0x000000bf,0x00050085,0x00000006,0x000000d5,0x000000d4,
	0x000000c0,0x0003003e,0x000000bf,0x000000d5,0x0004003d,0x00000007,0x000000d6,0x00000016,
	0x0004003d,0x00000006,0x000000d7,0x000000c1,0x0005008e,0x00000007,0x000000d8,0x000000d6,
	0x000000d7,0x0003003e,0x000000da,0x000000d9,0x00050039,0x0000000e,0x000000db,0x00000011,
	0x000000da,0x00050090,0x00000007,0x000000dc,0x000000d8,0x000000db,0x0003003e,0x00000016,
	0x000000dc,0x000200f9,0x000000c7,0x000200f8,0x000000c7,0x0004003d,0x00000013,0x000000dd,
	0x000000c3,0x00050080,0x00000013,0x000000e0,0x000000dd,0x000000df,0x0003003e,0x000000c3,
	0x000000e0,0x000200f9,0x000000c4,0x000200f8,0x000000c6,0x0004003d,0x00000006,0x000000e1,
	0x000000be,0x000200fe,0x000000e1,0x00010038,0x00050036,0x00000006,0x0000001f,0x00000000,
	0x0000001c,0x00030037,0x0000001b,0x0000001d,0x00030037,0x0000000d,0x0000001e,0x000200f8,
	0x00000020,0x0004003d,0x0000001a,0x000000e4,0x0000001d,0x0006000c,0x00000006,0x000000e5,
	0x00000001,0x00000042,0x000000e4,0x0004003d,0x00000006,0x000000e6,0x0000001e,0x00050083,
	0x00000006,0x000000e7,0x000000e5,0x000000e6,0x000200fe,0x000000e7,0x00010038,0x00050036,
	0x00000006,0x00000025,0x00000000,0x00000021,0x00030037,0x0000001b,0x00000022,0x00030037,
	0x0000001b,0x00000023,0x00030037,0x0000000d,0x00000024,0x000200f8,0x00000026,0x0004003d,
	0x0000001a,0x000000ea,0x00000022,0x0004003d,0x0000001a,0x000000eb,0x00000023,0x00050094,
	0x00000006,0x000000ec,0x000000ea,0x000000eb,0x0004003d,0x00000006,0x000000ed,0x00000024,
	0x00050081,0x00000006,0x000000ee,0x000000ec,0x000000ed,0x000200fe,0x000000ee,0x00010038,
	0x00050036,0x00000006,0x0000002c,0x00000000,0x00000027,0x00030037,0x0000001b,0x00000028,
	0x00030037,0x0000001b,0x00000029,0x00030037,0x0000001b,0x0000002a,0x00030037,0x0000001b,
	0x0000002b,0x000200f8,0x0000002d,0x0004003b,0x0000001b,0x000000f1,0x00000007,0x0004003b,
	0x0000001b,0x000000f5,0x00000007,0x0004003b,0x0000001b,0x000000fd,0x00000007,0x0004003b,
	0x0000000d,0x00000101,0x00000007,0x0004003b,0x0000000d,0x00000105,0x00000007,0x0004003b,
	0x0000000d,0x0000010d,0x00000007,0x0004003b,0x0000000d,0x00000118,0x00000007,0x0004003b,
	0x0000000d,0x0000011e,0x00000007,0x0004003b,0x00000008,0x00000122,0x00000007,0x0004003b,
	0x0000000d,0x00000134,0x00000007,0x0004003b,0x0000000d,0x0000013d,0x00000007,0x0004003b,
	0x0000000d,0x00000143,0x00000007,0x0004003b,0x0000000d,0x00000147,0x00000007,0x0004003b,
	0x0000000d,0x00000159,0x00000007,0x0004003b,0x0000000d,0x00000164,0x00000007,0x0004003b,
	0x0000000d,0x00000194,0x00000007,0x0004003b,0x00000008,0x0000019e,0x00000007,0x0004003b,
	0x0000001b,0x000001b3,0x00000007,0x0004003b,0x0000001b,0x000001c6,0x00000007,0x0004003d,
	0x0000001a,0x000000f2,0x00000028,0x0004003d,0x0000001a,0x000000f3,0x00000029,0x00050083,
	0x0000001a,0x000000f4,0x000000f2,0x000000f3,0x0003003e,0x000000f1,0x000000f4,0x0004003d,
	0x0000001a,0x000000f7,0x0000002a,0x0005008e,0x0000001a,0x000000f8,0x000000f7,0x000000f6,
	0x0004003d,0x0000001a,0x000000f9,0x0000002b,0x00050083,0x0000001a,0x000000fa,0x000000f8,
	0x000000f9,0x0004003d,0x0000001a,0x000000fb,0x00000029,0x00050083,0x0000001a,0x000000fc,
	0x000000fa,0x000000fb,0x0003003e,0x000000f5,0x000000fc,0x0004003d,0x0000001a,0x000000fe,
	0x00000029,0x0004003d,0x0000001a,0x000000ff,0x0000002a,0x00050083,0x0000001a,0x00000100,
	0x000000fe,0x000000ff,0x0003003e,0x000000fd,0x00000100,0x0004003d,0x0000001a,0x00000102,
	0x000000f5,0x0004003d,0x0000001a,0x00000103,0x000000f5,0x00050094,0x00000006,0x00000104,
	0x00000102,0x00000103,0x0003003e,0x00000101,0x00000104,0x0004003d,0x0000001a,0x00000106,
	0x000000fd,0x0004003d,0x0000001a,0x00000107,0x000000f5,0x00050094,0x00000006,0x00000108,
	0x00000106,0x00000107,0x00050085,0x00000006,0x0000010a,0x00000108,0x00000109,0x0004003d,
	0x00000006,0x0000010b,0x00000101,0x00050088,0x00000006,0x0000010c,0x0000010a,0x0000010b,
	0x0003003e,0x00000105,0x0000010c,0x0004003d,0x0000001a,0x0000010e,0x000000f1,0x0004003d,
	0x0000001a,0x0000010f,0x000000f5,0x00050094,0x00000006,0x00000110,0x0000010e,0x0000010f,
	0x0004003d,0x0000001a,0x00000111,0x000000fd,0x0004003d,0x0000001a,0x00000112,0x000000fd,
	0x00050094,0x00000006,0x00000113,0x00000111,0x00000112,0x00050085,0x00000006,0x00000114,
	0x000000f6,0x00000113,0x00050081,0x00000006,0x00000115,0x00000110,0x00000114,0x0004003d,
	0x00000006,0x00000116,0x00000101,0x00050088,0x00000006,0x00000117,0x00000115,0x00000116,
	0x0003003e,0x0000010d,0x00000117,0x0004003d,0x0000001a,0x00000119,0x000000f1,0x0004003d,
	0x0000001a,0x0000011a,0x000000fd,0x00050094,0x00000006,0x0000011b,0x00000119,0x0000011a,
	0x0004003d,0x00000006,0x0000011c,0x00000101,0x00050088,0x00000006,0x0000011d,0x0000011b,
	0x0000011c,0x0003003e,0x00000118,0x0000011d,0x0004003d,0x00000006,0x0000011f,0x00000105,
	0x0004003d,0x00000006,0x00000120,0x00000105,0x00050085,0x00000006,0x00000121,0x0000011f,
	0x00000120,0x0003003e,0x0000011e,0x00000121,0x0004003d,0x00000006,0x00000123,0x0000010d,
	0x0004003d,0x00000006,0x00000124,0x0000011e,0x00050088,0x00000006,0x00000125,0x00000124,
	0x00000109,0x00050083,0x00000006,0x00000126,0x00000123,0x00000125,0x0004003d,0x00000006,
	0x00000127,0x0000011e,0x0004003d,0x00000006,0x00000128,0x00000105,0x00050085,0x00000006,
	0x00000129,0x00000127,0x00000128,0x00050088,0x00000006,0x0000012b,0x00000129,0x0000012a,
	0x0004003d,0x00000006,0x0000012c,0x00000105,0x0004003d,0x00000006,0x0000012d,0x0000010d,
	0x00050085,0x00000006,0x0000012e,0x0000012c,0x0000012d,0x00050088,0x00000006,0x0000012f,
	0x0000012e,0x00000109,0x00050083,0x00000006,0x00000130,0x0000012b,0x0000012f,0x0004003d,
	0x00000006,0x00000131,0x00000118,0x00050081,0x00000006,0x00000132,0x00000130,0x00000131,
	0x00050050,0x00000007,0x00000133,0x00000126,0x00000132,0x0003003e,0x00000122,0x00000133,
	0x00050041,0x0000000d,0x00000135,0x00000122,0x000000a3,0x0004003d,0x00000006,0x00000136,
	0x00000135,0x00050041,0x0000000d,0x00000137,0x00000122,0x000000a3,0x0004003d,0x00000006,
	0x00000138,0x00000137,0x00050085,0x00000006,0x00000139,0x00000136,0x00000138,0x00050041,
	0x0000000d,0x0000013a,0x00000122,0x000000a3,0x0004003d,0x00000006,0x0000013b,0x0000013a,
	0x00050085,0x00000006,0x0000013c,0x00000139,0x0000013b,0x0003003e,0x00000134,0x0000013c,
	0x00050041,0x0000000d,0x0000013e,0x00000122,0x000000a7,0x0004003d,0x00000006,0x0000013f,
	0x0000013e,0x00050041,0x0000000d,0x00000140,0x00000122,0x000000a7,0x0004003d,0x00000006,
	0x00000141,0x00000140,0x00050085,0x00000006,0x00000142,0x0000013f,0x00000141,0x0003003e,
	0x0000013d,0x00000142,0x00050041,0x0000000d,0x00000144,0x00000122,0x000000a3,0x0004003d,
	0x00000006,0x00000145,0x00000144,0x0006000c,0x00000006,0x00000146,0x00000001,0x00000004,
	0x00000145,0x0003003e,0x00000143,0x00000146,0x00050041,0x0000000d,0x00000149,0x00000122,
	0x000000a3,0x0004003d,0x00000006,0x0000014a,0x00000149,0x00050088,0x00000006,0x0000014b,
	0x00000148,0x0000014a,0x00050041,0x0000000d,0x0000014c,0x00000122,0x000000a7,0x0004003d,
	0x00000006,0x0000014d,0x0000014c,0x00050085,0x00000006,0x0000014e,0x0000014b,0x0000014d,
	0x0003003e,0x00000147,0x0000014e,0x0004003d,0x00000006,0x0000014f,0x0000013d,0x00050085,
	0x00000006,0x00000151,0x0000014f,0x00000150,0x0004003d,0x00000006,0x00000152,0x00000134,
	0x00050088,0x00000006,0x00000154,0x00000152,0x00000153,0x00050081,0x00000006,0x00000155,
	0x00000151,0x00000154,0x000500ba,0x000000cb,0x00000156,0x00000155,0x000000a0,0x000300f7,
	0x00000158,0x00000000,0x000400fa,0x00000156,0x00000157,0x00000193,0x000200f8,0x00000157,
	0x0004003d,0x00000006,0x0000015a,0x00000147,0x0004003d,0x00000006,0x0000015b,0x00000143,
	0x00050088,0x00000006,0x0000015c,0x00000109,0x0000015b,0x0006000c,0x00000006,0x0000015d,
	0x00000001,0x0000001f,0x0000015c,0x00050085,0x00000006,0x0000015e,0x0000015a,0x0000015d,
	0x0003003e,0x00000159,0x0000015e,0x00050041,0x0000000d,0x0000015f,0x00000122,0x000000a3,
	0x0004003d,0x00000006,0x00000160,0x0000015f,0x000500b8,0x000000cb,0x00000161,0x00000160,
	0x000000a0,0x000300f7,0x00000163,0x00000000,0x000400fa,0x00000161,0x00000162,0x00000172,
	0x000200f8,0x00000162,0x00050041,0x0000000d,0x00000165,0x00000122,0x000000a7,0x0004003d,
	0x00000006,0x00000166,0x00000165,0x0006000c,0x00000006,0x00000167,0x00000001,0x00000006,
	0x00000166,0x0004003d,0x00000006,0x00000168,0x00000159,0x00050041,0x0000000d,0x00000169,
	0x00000122,0x000000a7,0x0004003d,0x00000006,0x0000016a,0x00000169,0x0006000c,0x00000006,
	0x0000016b,0x00000001,0x00000006,0x0000016a,0x0004007f,0x00000006,0x0000016c,0x0000016b,
	0x00050085,0x00000006,0x0000016d,0x00000168,0x0000016c,0x0006000c,0x00000006,0x0000016e,
	0x00000001,0x00000017,0x0000016d,0x00050088,0x00000006,0x0000016f,0x0000016e,0x00000109,
	0x0006000c,0x00000006,0x00000170,0x00000001,0x00000014,0x0000016f,0x00050085,0x00000006,
	0x00000171,0x00000167,0x00000170,0x0003003e,0x00000164,0x00000171,0x000200f9,0x00000163,
	0x000200f8,0x00000172,0x0004003d,0x00000006,0x00000173,0x00000159,0x0006000c,0x00000006,
	0x00000174,0x00000001,0x00000016,0x00000173,0x00050088,0x00000006,0x00000175,0x00000174,
	0x00000109,0x0006000c,0x00000006,0x00000176,0x00000001,0x00000013,0x00000175,0x0003003e,
	0x00000164,0x00000176,0x000200f9,0x00000163,0x000200f8,0x00000163,0x0004003d,0x00000006,
	0x00000178,0x00000143,0x00050088,0x00000006,0x00000179,0x00000178,0x00000109,0x0006000c,
	0x00000006,0x0000017a,0x00000001,0x0000001f,0x00000179,0x00050085,0x00000006,0x0000017b,
	0x00000177,0x0000017a,0x0004003d,0x00000006,0x0000017c,0x00000164,0x00050085,0x00000006,
	0x0000017d,0x0000017b,0x0000017c,0x0004003d,0x00000006,0x0000017e,0x00000105,0x00050088,
	0x00000006,0x0000017f,0x0000017e,0x00000109,0x00050083,0x00000006,0x00000180,0x0000017d,
	0x0000017f,0x0008000c,0x00000006,0x00000181,0x00000001,0x0000002b,0x00000180,0x000000a0,
	0x000000a1,0x0003003e,0x00000164,0x00000181,0x0004003d,0x0000001a,0x00000182,0x00000028,
	0x0004003d,0x0000001a,0x00000183,0x00000029,0x0004003d,0x0000001a,0x00000184,0x0000002a,
	0x0004003d,0x00000006,0x00000185,0x00000164,0x00060050,0x0000001a,0x00000186,0x00000185,
	0x00000185,0x00000185,0x0008000c,0x0000001a,0x00000187,0x00000001,0x0000002e,0x00000183,
	0x00000184,0x00000186,0x0004003d,0x0000001a,0x00000188,0x0000002a,0x0004003d,0x0000001a,
	0x00000189,0x0000002b,0x0004003d,0x00000006,0x0000018a,0x00000164,0x00060050,0x0000001a,
	0x0000018b,0x0000018a,0x0000018a,0x0000018a,0x0008000c,0x0000001a,0x0000018c,0x00000001,
	0x0000002e,0x00000188,0x00000189,0x0000018b,0x0004003d,0x00000006,0x0000018d,0x00000164,
	0x00060050,0x0000001a,0x0000018e,0x0000018d,0x0000018d,0x0000018d,0x0008000c,0x0000001a,
	0x0000018f,0x00000001,0x0000002e,0x00000187,0x0000018c,0x0000018e,0x00050083,0x0000001a,
	0x00000190,0x00000182,0x0000018f,0x0006000c,0x00000006,0x00000191,0x00000001,0x00000042,
	0x00000190,0x000200fe,0x00000191,0x000200f8,0x00000193,0x0004003d,0x00000006,0x00000195,
	0x00000147,0x00050041,0x0000000d,0x00000197,0x00000122,0x000000a3,0x0004003d,0x00000006,
	0x00000198,0x00000197,0x00050088,0x00000006,0x00000199,0x00000196,0x00000198,0x0006000c,
	0x00000006,0x0000019a,0x00000001,0x0000001f,0x00000199,0x00050085,0x00000006,0x0000019b,
	0x00000195,0x0000019a,0x0006000c,0x00000006,0x0000019c,0x00000001,0x00000011,0x0000019b,
	0x00050088,0x00000006,0x0000019d,0x0000019c,0x00000109,0x0003003e,0x00000194,0x0000019d,
	0x00050041,0x0000000d,0x0000019f,0x00000122,0x000000a3,0x0004003d,0x00000006,0x000001a0,
	0x0000019f,0x0004007f,0x00000006,0x000001a1,0x000001a0,0x00050088,0x00000006,0x000001a2,
	0x000001a1,0x00000109,0x0006000c,0x00000006,0x000001a3,0x00000001,0x0000001f,0x000001a2,
	0x00050085,0x00000006,0x000001a4,0x000000f6,0x000001a3,0x0004003d,0x00000006,0x000001a5,
	0x00000194,0x0004003d,0x00000006,0x000001a6,0x00000194,0x00050083,0x00000006,0x000001a8,
	0x000001a6,0x000001a7,0x00050050,0x00000007,0x000001a9,0x000001a5,0x000001a8,0x0006000c,
	0x00000007,0x000001aa,0x00000001,0x0000000e,0x000001a9,0x0005008e,0x00000007,0x000001ab,
	0x000001aa,0x000001a4,0x0004003d,0x00000006,0x000001ac,0x00000105,0x00050088,0x00000006,
	0x000001ad,0x000001ac,0x00000109,0x00050050,0x00000007,0x000001ae,0x000001ad,0x000001ad,
	0x00050083,0x00000007,0x000001af,0x000001ab,0x000001ae,0x00050050,0x00000007,0x000001b0,
	0x000000a0,0x000000a0,0x00050050,0x00000007,0x000001b1,0x000000a1,0x000000a1,0x0008000c,
	0x00000007,0x000001b2,0x00000001,0x0000002b,0x000001af,0x000001b0,0x000001b1,0x0003003e,
	0x0000019e,0x000001b2,0x0004003d,0x0000001a,0x000001b4,0x00000028,0x0004003d,0x0000001a,
	0x000001b5,0x00000029,0x0004003d,0x0000001a,0x000001b6,0x0000002a,0x00050041,0x0000000d,
	0x000001b7,0x0000019e,0x000000a3,0x0004003d,0x00000006,0x000001b8,0x000001b7,0x00060050,
	0x0000001a,0x000001b9,0x000001b8,0x000001b8,0x000001b8,0x0008000c,0x0000001a,0x000001ba,
	0x00000001,0x0000002e,0x000001b5,0x000001b6,0x000001b9,0x0004003d,0x0000001a,0x000001bb,
	0x0000002a,0x0004003d,0x0000001a,0x000001bc,0x0000002b,0x00050041,0x0000000d,0x000001bd,
	0x0000019e,0x000000a3,0x0004003d,0x00000006,0x000001be,0x000001bd,0x00060050,0x0000001a,
	0x000001bf,0x000001be,0x000001be,0x000001be,0x0008000c,0x0000001a,0x000001c0,0x00000001,
	0x0000002e,0x000001bb,0x000001bc,0x000001bf,0x00050041,0x0000000d,0x000001c1,0x0000019e,
	0x000000a3,0x0004003d,0x00000006,0x000001c2,0x000001c1,0x00060050,0x0000001a,0x000001c3,
	0x000001c2,0x000001c2,0x000001c2,0x0008000c,0x0000001a,0x000001c4,0x00000001,0x0000002e,
	0x000001ba,0x000001c0,0x000001c3,0x00050083,0x0000001a,0x000001c5,0x000001b4,0x000001c4,
	0x0003003e,0x000001b3,0x000001c5,0x0004003d,0x0000001a,0x000001c7,0x00000028,0x0004003d,
	0x0000001a,0x000001c8,0x00000029,0x0004003d,0x0000001a,0x000001c9,0x0000002a,0x00050041,
	0x0000000d,0x000001ca,0x0000019e,0x000000a7,0x0004003d,0x00000006,0x000001cb,0x000001ca,
	0x00060050,0x0000001a,0x000001cc,0x000001cb,0x000001cb,0x000001cb,0x0008000c,0x0000001a,
	0x000001cd,0x00000001,0x0000002e,0x000001c8,0x000001c9,0x000001cc,0x0004003d,0x0000001a,
	0x000001ce,0x0000002a,0x0004003d,0x0000001a,0x000001cf,0x0000002b,0x00050041,0x0000000d,
	0x000001d0,0x0000019e,0x000000a7,0x0004003d,0x00000006,0x000001d1,0x000001d0,0x00060050,
	0x0000001a,0x000001d2,0x000001d1,0x000001d1,0x000001d1,0x0008000c,0x0000001a,0x000001d3,
	0x00000001,0x0000002e,0x000001ce,0x000001cf,0x000001d2,0x00050041,0x0000000d,0x000001d4,
	0x0000019e,0x000000a7,0x0004003d,0x00000006,0x000001d5,0x000001d4,0x00060050,0x0000001a,
	0x000001d6,0x000001d5,0x000001d5,0x000001d5,0x0008000c,0x0000001a,0x000001d7,0x00000001,
	0x0000002e,0x000001cd,0x000001d3,0x000001d6,0x00050083,0x0000001a,0x000001d8,0x000001c7,
	0x000001d7,0x0003003e,0x000001c6,0x000001d8,0x0004003d,0x0000001a,0x000001d9,0x000001b3,
	0x0004003d,0x0000001a,0x000001da,0x000001b3,0x00050094,0x00000006,0x000001db,0x000001d9,
	0x000001da,0x0004003d,0x0000001a,0x000001dc,0x000001c6,0x0004003d,0x0000001a,0x000001dd,
	0x000001c6,0x00050094,0x00000006,0x000001de,0x000001dc,0x000001dd,0x0007000c,0x00000006,
	0x000001df,0x00000001,0x00000025,0x000001db,0x000001de,0x0006000c,0x00000006,0x000001e0,
	0x00000001,0x0000001f,0x000001df,0x000200fe,0x000001e0,0x000200f8,0x00000158,0x000100ff,
	0x00010038,0x00050036,0x0000002f,0x00000034,0x00000000,0x00000031,0x00030037,0x00000030,
	0x00000032,0x00030037,0x00000030,0x00000033,0x000200f8,0x00000035,0x0004003b,0x00000030,
	0x000001e9,0x00000007,0x00050041,0x0000000d,0x000001e4,0x00000032,0x000001e3,0x0004003d,
	0x00000006,0x000001e5,0x000001e4,0x00050041,0x0000000d,0x000001e6,0x00000033,0x000001e3,
	0x0004003d,0x00000006,0x000001e7,0x000001e6,0x000500b8,0x000000cb,0x000001e8,0x000001e5,
	0x000001e7,0x000300f7,0x000001eb,0x00000000,0x000400fa,0x000001e8,0x000001ea,0x000001ed,
	0x000200f8,0x000001ea,0x0004003d,0x0000002f,0x000001ec,0x00000032,0x0003003e,0x000001e9,
	0x000001ec,0x000200f9,0x000001eb,0x000200f8,0x000001ed,0x0004003d,0x0000002f,0x000001ee,
	0x00000033,0x0003003e,0x000001e9,0x000001ee,0x000200f9,0x000001eb,0x000200f8,0x000001eb,
	0x0004003d,0x0000002f,0x000001ef,0x000001e9,0x000200fe,0x000001ef,0x00010038,0x00050036,
	0x0000002f,0x0000003a,0x00000000,0x00000036,0x00030037,0x00000030,0x00000037,0x00030037,
	0x00000030,0x00000038,0x00030037,0x0000000d,0x00000039,0x000200f8,0x0000003b,0x0004003b,
	0x0000000d,0x000001f2,0x00000007,0x0004003b,0x0000000d,0x000001fc,0x00000007,0x0004003b,
	0x0000000d,0x00000209,0x00000007,0x0004003b,0x0000000d,0x00000212,0x00000007,0x0004003b,
	0x0000000d,0x00000218,0x00000007,0x0004003b,0x00000220,0x00000221,0x00000007,0x0004003d,
	0x00000006,0x000001f3,0x00000039,0x00050041,0x0000000d,0x000001f4,0x00000037,0x000001e3,
	0x0004003d,0x00000006,0x000001f5,0x000001f4,0x00050041,0x0000000d,0x000001f6,0x00000038,
	0x000001e3,0x0004003d,0x00000006,0x000001f7,0x000001f6,0x00050083,0x00000006,0x000001f8,
	0x000001f5,0x000001f7,0x0006000c,0x00000006,0x000001f9,0x00000001,0x00000004,0x000001f8,
	0x00050083,0x00000006,0x000001fa,0x000001f3,0x000001f9,0x0007000c,0x00000006,0x000001fb,
	0x00000001,0x00000028,0x000001fa,0x000000a0,0x0003003e,0x000001f2,0x000001fb,0x00050041,
	0x0000000d,0x000001fd,0x00000037,0x000001e3,0x0004003d,0x00000006,0x000001fe,0x000001fd,
	0x00050041,0x0000000d,0x000001ff,0x00000038,0x000001e3,0x0004003d,0x00000006,0x00000200,
	0x000001ff,0x0007000c,0x00000006,0x00000201,0x00000001,0x00000025,0x000001fe,0x00000200,
	0x0004003d,0x00000006,0x00000202,0x000001f2,0x0004003d,0x00000006,0x00000203,0x000001f2,
	0x00050085,0x00000006,0x00000204,0x00000202,0x00000203,0x00050085,0x00000006,0x00000205,
	0x00000204,0x00000150,0x0004003d,0x00000006,0x00000206,0x00000039,0x00050088,0x00000006,
	0x00000207,0x00000205,0x00000206,0x00050083,0x00000006,0x00000208,0x00000201,0x00000207,
	0x0003003e,0x000001fc,0x00000208,0x0004003d,0x00000006,0x0000020a,0x000001f2,0x0004003d,
	0x00000006,0x0000020b,0x00000039,0x00050088,0x00000006,0x0000020c,0x0000020a,0x0000020b,
	0x0004003d,0x00000006,0x0000020d,0x000001f2,0x0004003d,0x00000006,0x0000020e,0x00000039,
	0x00050088,0x00000006,0x0000020f,0x0000020d,0x0000020e,0x00050085,0x00000006,0x00000210,
	0x0000020c,0x0000020f,0x00050085,0x00000006,0x00000211,0x00000210,0x000000c0,0x0003003e,
	0x00000209,0x00000211,0x00050041,0x0000000d,0x00000213,0x00000037,0x000001e3,0x0004003d,
	0x00000006,0x00000214,0x00000213,0x00050041,0x0000000d,0x00000215,0x00000038,0x000001e3,
	0x0004003d,0x00000006,0x00000216,0x00000215,0x000500b8,0x000000cb,0x00000217,0x00000214,
	0x00000216,0x000300f7,0x0000021a,0x00000000,0x000400fa,0x00000217,0x00000219,0x0000021c,
	0x000200f8,0x00000219,0x0004003d,0x00000006,0x0000021b,0x00000209,0x0003003e,0x00000218,
	0x0000021b,0x000200f9,0x0000021a,0x000200f8,0x0000021c,0x0004003d,0x00000006,0x0000021d,
	0x00000209,0x00050083,0x00000006,0x0000021e,0x000000a1,0x0000021d,0x0003003e,0x00000218,
	0x0000021e,0x000200f9,0x0000021a,0x000200f8,0x0000021a,0x0004003d,0x00000006,0x0000021f,
	0x00000218,0x0003003e,0x00000212,0x0000021f,0x00060041,0x0000001b,0x00000222,0x00000037,
	0x000000df,0x000001e3,0x0004003d,0x0000001a,0x00000223,0x00000222,0x00060041,0x0000001b,
	0x00000224,0x00000038,0x000000df,0x000001e3,0x0004003d,0x0000001a,0x00000225,0x00000224,
	0x0004003d,0x00000006,0x00000226,0x00000212,0x00060050,0x0000001a,0x00000227,0x00000226,
	0x00000226,0x00000226,0x0008000c,0x0000001a,0x00000228,0x00000001,0x0000002e,0x00000223,
	0x00000225,0x00000227,0x00060041,0x00000008,0x00000229,0x00000037,0x000000df,0x000000df,
	0x0004003d,0x00000007,0x0000022a,0x00000229,0x00060041,0x00000008,0x0000022b,0x00000038,
	0x000000df,0x000000df,0x0004003d,0x00000007,0x0000022c,0x0000022b,0x0004003d,0x00000006,
	0x0000022d,0x00000212,0x00050050,0x00000007,0x0000022e,0x0000022d,0x0000022d,0x0008000c,
	0x00000007,0x0000022f,0x00000001,0x0000002e,0x0000022a,0x0000022c,0x0000022e,0x00050050,
	0x0000002e,0x00000230,0x00000228,0x0000022f,0x0003003e,0x00000221,0x00000230,0x0004003d,
	0x00000006,0x00000231,0x000001fc,0x0004003d,0x0000002e,0x00000232,0x00000221,0x00050050,
	0x0000002f,0x00000233,0x00000231,0x00000232,0x000200fe,0x00000233,0x00010038,0x00050036,
	0x0000002f,0x0000003f,0x00000000,0x0000003c,0x00030037,0x00000030,0x0000003d,0x00030037,
	0x0000000d,0x0000003e,0x000200f8,0x00000040,0x00050041,0x0000000d,0x00000236,0x0000003d,
	0x000001e3,0x0004003d,0x00000006,0x00000237,0x00000236,0x0006000c,0x00000006,0x00000238,
	0x00000001,0x00000004,0x00000237,0x0004003d,0x00000006,0x00000239,0x0000003e,0x00050083,
	0x00000006,0x0000023a,0x00000238,0x00000239,0x00050041,0x00000220,0x0000023b,0x0000003d,
	0x000000df,0x0004003d,0x0000002e,0x0000023c,0x0000023b,0x00050050,0x0000002f,0x0000023d,
	0x0000023a,0x0000023c,0x000200fe,0x0000023d,0x00010038,0x00050036,0x0000002f,0x00000043,
	0x00000000,0x00000041,0x00030037,0x0000001b,0x00000042,0x000200f8,0x00000044,0x0004003b,
	0x0000000d,0x00000240,0x00000007,0x0004003b,0x00000008,0x00000245,0x00000007,0x0004003b,
	0x00000008,0x0000024f,0x00000007,0x0004003b,0x00000008,0x00000256,0x00000007,0x0004003b,
	0x00000008,0x00000262,0x00000007,0x0004003b,0x00000014,0x00000263,0x00000007,0x0004003b,
	0x00000008,0x0000026c,0x00000007,0x0004003b,0x00000014,0x0000026d,0x00000007,0x0004003b,
	0x00000008,0x00000273,0x00000007,0x0004003b,0x0000000d,0x0000027e,0x00000007,0x0004003b,
	0x00000008,0x0000028e,0x00000007,0x0004003b,0x00000014,0x0000028f,0x00000007,0x0003003e,
	0x00000240,0x000000a0,0x0004003d,0x0000001a,0x00000241,0x00000042,0x0007004f,0x00000007,
	0x00000242,0x00000241,0x00000241,0x00000000,0x00000002,0x0005008e,0x00000007,0x00000244,
	0x00000242,0x00000243,0x0003003e,0x00000245,0x00000244,0x00050039,0x00000006,0x00000246,
	0x0000000b,0x00000245,0x00050085,0x00000006,0x00000247,0x000000f6,0x00000246,0x0004003d,
	0x00000006,0x00000248,0x00000240,0x00050083,0x00000006,0x00000249,0x00000248,0x00000247,
	0x0003003e,0x00000240,0x00000249,0x0004003d,0x0000001a,0x0000024b,0x00000042,0x0007004f,
	0x00000007,0x0000024c,0x0000024b,0x0000024b,0x00000000,0x00000002,0x0005008e,0x00000007,
	0x0000024e,0x0000024c,0x0000024d,0x0003003e,0x0000024f,0x0000024e,0x00050039,0x00000006,
	0x00000250,0x0000000b,0x0000024f,0x00050085,0x00000006,0x00000251,0x0000024a,0x00000250,
	0x0004003d,0x0000001a,0x00000252,0x00000042,0x0007004f,0x00000007,0x00000253,0x00000252,
	0x00000252,0x00000000,0x00000002,0x0005008e,0x00000007,0x00000255,0x00000253,0x00000254,
	0x0003003e,0x00000256,0x00000255,0x00050039,0x00000006,0x00000257,0x0000000b,0x00000256,
	0x00050085,0x00000006,0x00000258,0x00000251,0x00000257,0x00050081,0x00000006,0x0000025a,
	0x00000258,0x00000259,0x0004003d,0x00000006,0x0000025b,0x00000240,0x00050081,0x00000006,
	0x0000025c,0x0000025b,0x0000025a,0x0003003e,0x00000240,0x0000025c,0x0004003d,0x0000001a,
	0x0000025d,0x00000042,0x0007004f,0x00000007,0x0000025e,0x0000025d,0x0000025d,0x00000000,
	0x00000002,0x0005008e,0x00000007,0x00000260,0x0000025e,0x0000025f,0x0003003e,0x00000262,
	0x00000260,0x0003003e,0x00000263,0x00000261,0x00060039,0x00000006,0x00000264,0x00000018,
	0x00000262,0x00000263,0x00050085,0x00000006,0x00000265,0x000000f6,0x00000264,0x0004003d,
	0x00000006,0x00000266,0x00000240,0x00050081,0x00000006,0x00000267,0x00000266,0x00000265,
	0x0003003e,0x00000240,0x00000267,0x0004003d,0x0000001a,0x00000269,0x00000042,0x0007004f,
	0x00000007,0x0000026a,0x00000269,0x00000269,0x00000000,0x00000002,0x0005008e,0x00000007,
	0x0000026b,0x0000026a,0x0000024d,0x0003003e,0x0000026c,0x0000026b,0x0003003e,0x0000026d,
	0x00000261,0x00060039,0x00000006,0x0000026e,0x00000018,0x0000026c,0x0000026d,0x00050085,
	0x00000006,0x0000026f,0x00000268,0x0000026e,0x0004003d,0x0000001a,0x00000270,0x00000042,
	0x0007004f,0x00000007,0x00000271,0x00000270,0x00000270,0x00000000,0x00000002,0x0005008e,
	0x00000007,0x00000272,0x00000271,0x0000024d,0x0003003e,0x00000273,0x00000272,0x00050039,
	0x00000006,0x00000274,0x0000000b,0x00000273,0x00050085,0x00000006,0x00000275,0x0000026f,
	0x00000274,0x0004003d,0x00000006,0x00000276,0x00000240,0x00050081,0x00000006,0x00000277,
	0x00000276,0x00000275,0x0003003e,0x00000240,0x00000277,0x00050041,0x0000000d,0x00000278,
	0x00000042,0x000000a7,0x0004003d,0x00000006,0x00000279,0x00000278,0x00050083,0x00000006,
	0x0000027b,0x00000279,0x0000027a,0x0004003d,0x00000006,0x0000027c,0x00000240,0x00050081,
	0x00000006,0x0000027d,0x0000027c,0x0000027b,0x0003003e,0x00000240,0x0000027d,0x00050041,
	0x0000000d,0x0000027f,0x00000042,0x000000a7,0x0004003d,0x00000006,0x00000280,0x0000027f,
	0x00050088,0x00000006,0x00000282,0x00000280,0x00000281,0x0003003e,0x0000027e,0x00000282,
	0x0004003d,0x00000006,0x00000283,0x00000240,0x0004003d,0x00000006,0x00000288,0x0000027e,
	0x0005008e,0x0000001a,0x00000289,0x00000287,0x00000288,0x0004003d,0x0000001a,0x0000028a,
	0x00000042,0x0007004f,0x00000007,0x0000028b,0x0000028a,0x0000028a,0x00000000,0x00000002,
	0x0005008e,0x00000007,0x0000028c,0x0000028b,0x0000024d,0x0003003e,0x0000028e,0x0000028c,
	0x0003003e,0x0000028f,0x0000028d,0x00060039,0x00000006,0x00000290,0x00000018,0x0000028e,
	0x0000028f,0x00050050,0x00000007,0x00000291,0x000000a0,0x00000290,0x00050050,0x0000002e,
	0x00000292,0x00000289,0x00000291,0x00050050,0x0000002f,0x00000293,0x00000283,0x00000292,
	0x000200fe,0x00000293,0x00010038,0x00050036,0x0000002f,0x00000046,0x00000000,0x00000041,
	0x00030037,0x0000001b,0x00000045,0x000200f8,0x00000047,0x0004003b,0x0000000d,0x00000296,
	0x00000007,0x0004003b,0x0000001b,0x000002a1,0x00000007,0x0004003b,0x0000001b,0x000002a3,
	0x00000007,0x0004003b,0x0000000d,0x000002a4,0x00000007,0x00050041,0x0000029b,0x0000029c,
	0x0000029a,0x000001e3,0x0004003d,0x00000006,0x0000029d,0x0000029c,0x0006000c,0x00000006,
	0x0000029e,0x00000001,0x0000000e,0x0000029d,0x00050085,0x00000006,0x0000029f,0x0000029e,
	0x00000109,0x00050081,0x00000006,0x000002a0,0x00000297,0x0000029f,0x0004003d,0x0000001a,
	0x000002a2,0x00000045,0x0003003e,0x000002a1,0x000002a2,0x0003003e,0x000002a3,0x000000a2,
	0x0003003e,0x000002a4,0x000002a0,0x00070039,0x00000006,0x000002a5,0x00000025,0x000002a1,
	0x000002a3,0x000002a4,0x0003003e,0x00000296,0x000002a5,0x0004003d,0x00000006,0x000002a6,
	0x00000296,0x00050050,0x0000002f,0x000002ad,0x000002a6,0x000002ac,0x000200fe,0x000002ad,
	0x00010038,0x00050036,0x0000002f,0x00000049,0x00000000,0x00000041,0x00030037,0x0000001b,
	0x00000048,0x000200f8,0x0000004a,0x0004003b,0x0000000d,0x000002b0,0x00000007,0x0004003b,
	0x0000000d,0x000002b5,0x00000007,0x0004003b,0x0000000d,0x000002b9,0x00000007,0x0004003b,
	0x0000001b,0x000002be,0x00000007,0x0004003b,0x0000000d,0x000002bf,0x00000007,0x00050041,
	0x0000029b,0x000002b1,0x0000029a,0x000001e3,0x0004003d,0x00000006,0x000002b2,0x000002b1,
	0x00050088,0x00000006,0x000002b4,0x000002b2,0x000002b3,0x0003003e,0x000002b0,0x000002b4,
	0x0004003d,0x00000006,0x000002b6,0x000002b0,0x00050085,0x00000006,0x000002b7,0x000000f6,
	0x000002b6,0x0006000c,0x00000006,0x000002b8,0x00000001,0x0000000d,0x000002b7,0x0003003e,
	0x000002b5,0x000002b8,0x0004003d,0x0000001a,0x000002ba,0x00000048,0x00050083,0x0000001a,
	0x000002bc,0x000002ba,0x000002bb,0x0003003e,0x000002be,0x000002bc,0x0003003e,0x000002bf,
	0x000002bd,0x00060039,0x00000006,0x000002c0,0x0000001f,0x000002be,0x000002bf,0x0003003e,
	0x000002b9,0x000002c0,0x0004003d,0x00000006,0x000002c1,0x000002b9,0x00050050,0x0000002f,
	0x000002c5,0x000002c1,0x000002c4,0x000200fe,0x000002c5,0x00010038,0x00050036,0x0000002f,
	0x0000004c,0x00000000,0x00000041,0x00030037,0x0000001b,0x0000004b,0x000200f8,0x0000004d,
	0x0004003b,0x0000000d,0x000002c8,0x00000007,0x0004003b,0x0000000d,0x000002cc,0x00000007,
	0x0004003b,0x0000000d,0x000002cd,0x00000007,0x0004003b,0x0000001b,0x000002cf,0x00000007,
	0x0004003b,0x0000001b,0x000002e2,0x00000007,0x0004003b,0x0000001b,0x000002f5,0x00000007,
	0x0004003b,0x0000000d,0x00000301,0x00000007,0x0004003b,0x0000001b,0x00000302,0x00000007,
	0x0004003b,0x0000001b,0x00000304,0x00000007,0x0004003b,0x0000001b,0x00000306,0x00000007,
	0x0004003b,0x0000001b,0x00000308,0x00000007,0x00050041,0x0000029b,0x000002c9,0x0000029a,
	0x000001e3,0x0004003d,0x00000006,0x000002ca,0x000002c9,0x00050088,0x00000006,0x000002cb,
	0x000002ca,0x000002b3,0x0003003e,0x000002c8,0x000002cb,0x0003003e,0x000002cc,0x00000109,
	0x0003003e,0x000002cd,0x000002ce,0x00060041,0x0000029b,0x000002d1,0x0000029a,0x000002d0,
	0x000000a3,0x0004003d,0x00000006,0x000002d2,0x000002d1,0x0004007f,0x00000006,0x000002d3,
	0x000002d2,0x00060041,0x0000029b,0x000002d4,0x0000029a,0x000002d0,0x000000a7,0x0004003d,
	0x00000006,0x000002d5,0x000002d4,0x00050041,0x0000029b,0x000002d6,0x0000029a,0x000001e3,
	0x0004003d,0x00000006,0x000002d7,0x000002d6,0x0004003d,0x00000006,0x000002d8,0x000002cc,
	0x00050085,0x00000006,0x000002d9,0x000002d7,0x000002d8,0x0006000c,0x00000006,0x000002da,
	0x00000001,0x0000000e,0x000002d9,0x0004003d,0x00000006,0x000002db,0x000002cd,0x00050085,
	0x00000006,0x000002dc,0x000002da,0x000002db,0x00050081,0x00000006,0x000002dd,0x000002d5,
	0x000002dc,0x00050081,0x00000006,0x000002de,0x000002dd,0x000002ce,0x00060041,0x0000029b,
	0x000002df,0x0000029a,0x000002d0,0x00000261,0x0004003d,0x00000006,0x000002e0,0x000002df,
	0x00060050,0x0000001a,0x000002e1,0x000002d3,0x000002de,0x000002e0,0x0003003e,0x000002cf,
	0x000002e1,0x00060041,0x0000029b,0x000002e4,0x0000029a,0x000002e3,0x000000a3,0x0004003d,
	0x00000006,0x000002e5,0x000002e4,0x0004007f,0x00000006,0x000002e6,0x000002e5,0x00060041,
	0x0000029b,0x000002e7,0x0000029a,0x000002e3,0x000000a7,0x0004003d,0x00000006,0x000002e8,
	0x000002e7,0x00050041,0x0000029b,0x000002e9,0x0000029a,0x000001e3,0x0004003d,0x00000006,
	0x000002ea,0x000002e9,0x0004003d,0x00000006,0x000002eb,0x000002cc,0x00050085,0x00000006,
	0x000002ec,0x000002ea,0x000002eb,0x0006000c,0x00000006,0x000002ed,0x00000001,0x0000000d,
	0x000002ec,0x0004003d,0x00000006,0x000002ee,0x000002cd,0x00050085,0x00000006,0x000002ef,
	0x000002ed,0x000002ee,0x00050081,0x00000006,0x000002f0,0x000002e8,0x000002ef,0x00050081,
	0x00000006,0x000002f1,0x000002f0,0x000002ce,0x00060041,0x0000029b,0x000002f2,0x0000029a,
	0x000002e3,0x00000261,0x0004003d,0x00000006,0x000002f3,0x000002f2,0x00060050,0x0000001a,
	0x000002f4,0x000002e6,0x000002f1,0x000002f3,0x0003003e,0x000002e2,0x000002f4,0x00060041,
	0x0000029b,0x000002f7,0x0000029a,0x000002f6,0x000000a3,0x0004003d,0x00000006,0x000002f8,
	0x000002f7,0x0004007f,0x00000006,0x000002f9,0x000002f8,0x00060041,0x0000029b,0x000002fa,
	0x0000029a,0x000002f6,0x000000a7,0x0004003d,0x00000006,0x000002fb,0x000002fa,0x00050083,
	0x00000006,0x000002fd,0x000002fb,0x000002fc,0x00060041,0x0000029b,0x000002fe,0x0000029a,
	0x000002f6,0x00000261,0x0004003d,0x00000006,0x000002ff,0x000002fe,0x00060050,0x0000001a,
	0x00000300,0x000002f9,0x000002fd,0x000002ff,0x0003003e,0x000002f5,0x00000300,0x0004003d,
	0x0000001a,0x00000303,0x0000004b,0x0003003e,0x00000302,0x00000303,0x0004003d,0x0000001a,
	0x00000305,0x000002e2,0x0003003e,0x00000304,0x00000305,0x0004003d,0x0000001a,0x00000307,
	0x000002cf,0x0003003e,0x00000306,0x00000307,0x0004003d,0x0000001a,0x00000309,0x000002f5,
	0x0003003e,0x00000308,0x00000309,0x00080039,0x00000006,0x0000030a,0x0000002c,0x00000302,
	0x00000304,0x00000306,0x00000308,0x0003003e,0x00000301,0x0000030a,0x0004003d,0x00000006,
	0x0000030b,0x00000301,0x00050083,0x00000006,0x0000030d,0x0000030b,0x0000030c,0x00050050,
	0x0000002f,0x00000314,0x0000030d,0x00000313,0x000200fe,0x00000314,0x00010038,0x00050036,
	0x0000002f,0x0000004f,0x00000000,0x00000041,0x00030037,0x0000001b,0x0000004e,0x000200f8,
	0x00000050,0x0004003b,0x00000030,0x00000317,0x00000007,0x0004003b,0x0000001b,0x00000318,
	0x00000007,0x0004003b,0x00000030,0x0000031b,0x00000007,0x0004003b,0x0000001b,0x0000031c,
	0x00000007,0x0004003b,0x00000030,0x0000031f,0x00000007,0x0004003b,0x0000001b,0x00000320,
	0x00000007,0x0004003b,0x00000030,0x00000323,0x00000007,0x0004003b,0x0000001b,0x00000324,
	0x00000007,0x0004003b,0x00000030,0x00000327,0x00000007,0x0004003b,0x00000030,0x00000328,
	0x00000007,0x0004003b,0x00000030,0x0000032a,0x00000007,0x0004003b,0x0000000d,0x0000032c,
	0x00000007,0x0004003b,0x00000030,0x0000032f,0x00000007,0x0004003b,0x0000000d,0x00000331,
	0x00000007,0x0004003b,0x00000030,0x00000333,0x00000007,0x0004003b,0x00000030,0x00000335,
	0x00000007,0x0004003b,0x0000000d,0x00000336,0x00000007,0x0004003b,0x00000030,0x00000338,
	0x00000007,0x0004003b,0x00000030,0x0000033a,0x00000007,0x0004003b,0x0000000d,0x0000033c,
	0x00000007,0x0004003b,0x0000033e,0x0000033f,0x00000007,0x0004003b,0x0000001b,0x0000035a,
	0x00000007,0x0004003b,0x0000000d,0x00000367,0x00000007,0x0004003b,0x0000001b,0x0000036b,
	0x00000007,0x0004003b,0x0000000d,0x0000036c,0x00000007,0x0004003b,0x00000030,0x0000036e,
	0x00000007,0x0004003b,0x00000030,0x00000374,0x00000007,0x0004003b,0x00000030,0x00000376,
	0x00000007,0x0004003d,0x0000001a,0x00000319,0x0000004e,0x0003003e,0x00000318,0x00000319,
	0x00050039,0x0000002f,0x0000031a,0x00000043,0x00000318,0x0003003e,0x00000317,0x0000031a,
	0x0004003d,0x0000001a,0x0000031d,0x0000004e,0x0003003e,0x0000031c,0x0000031d,0x00050039,
	0x0000002f,0x0000031e,0x00000046,0x0000031c,0x0003003e,0x0000031b,0x0000031e,0x0004003d,
	0x0000001a,0x00000321,0x0000004e,0x0003003e,0x00000320,0x00000321,0x00050039,0x0000002f,
	0x00000322,0x00000049,0x00000320,0x0003003e,0x0000031f,0x00000322,0x0004003d,0x0000001a,
	0x00000325,0x0000004e,0x0003003e,0x00000324,0x00000325,0x00050039,0x0000002f,0x00000326,
	0x0000004c,0x00000324,0x0003003e,0x00000323,0x00000326,0x0004003d,0x0000002f,0x00000329,
	0x00000317,0x0003003e,0x00000328,0x00000329,0x0004003d,0x0000002f,0x0000032b,0x0000031b,
	0x0003003e,0x0000032a,0x0000032b,0x0003003e,0x0000032c,0x000000f6,0x00070039,0x0000002f,
	0x0000032d,0x0000003a,0x00000328,0x0000032a,0x0000032c,0x0003003e,0x00000327,0x0000032d,
	0x0004003d,0x0000002f,0x00000330,0x0000031f,0x0003003e,0x0000032f,0x00000330,0x0003003e,
	0x00000331,0x0000032e,0x00060039,0x0000002f,0x00000332,0x0000003f,0x0000032f,0x00000331,
	0x0004003d,0x0000002f,0x00000334,0x00000327,0x0003003e,0x00000333,0x00000334,0x0003003e,
	0x00000335,0x00000332,0x0003003e,0x00000336,0x000000a1,0x00070039,0x0000002f,0x00000337,
	0x0000003a,0x00000333,0x00000335,0x00000336,0x0003003e,0x00000327,0x00000337,0x0004003d,
	0x0000002f,0x00000339,0x00000327,0x0003003e,0x00000338,0x00000339,0x0004003d,0x0000002f,
	0x0000033b,0x00000323,0x0003003e,0x0000033a,0x0000033b,0x0003003e,0x0000033c,0x00000109,
	0x00070039,0x0000002f,0x0000033d,0x0000003a,0x00000338,0x0000033a,0x0000033c,0x0003003e,
	0x00000327,0x0000033d,0x0003003e,0x0000033f,0x000001e3,0x000200f9,0x00000340,0x000200f8,
	0x00000340,0x000400f6,0x00000342,0x00000343,0x00000000,0x000200f9,0x00000344,0x000200f8,
	0x00000344,0x0004003d,0x000000de,0x00000345,0x0000033f,0x0004007c,0x00000013,0x00000346,
	0x00000345,0x00050041,0x0000034e,0x0000034f,0x0000034d,0x000001e3,0x0004003d,0x00000013,
	0x00000350,0x0000034f,0x000500b0,0x000000cb,0x00000351,0x00000346,0x00000350,0x000400fa,
	0x00000351,0x00000341,0x00000342,0x000200f8,0x00000341,0x0004003d,0x000000de,0x00000352,
	0x0000033f,0x00080041,0x00000354,0x00000355,0x0000034d,0x000000df,0x00000352,0x000001e3,
	0x00000353,0x0004003d,0x00000006,0x00000356,0x00000355,0x000500b4,0x000000cb,0x00000357,
	0x00000356,0x000000a0,0x000300f7,0x00000359,0x00000000,0x000400fa,0x00000357,0x00000358,
	0x00000359,0x000200f8,0x00000358,0x0004003d,0x000000de,0x0000035b,0x0000033f,0x00080041,
	0x00000354,0x0000035c,0x0000034d,0x000000df,0x0000035b,0x000001e3,0x000000a3,0x0004003d,
	0x00000006,0x0000035d,0x0000035c,0x0004007f,0x00000006,0x0000035e,0x0000035d,0x0004003d,
	0x000000de,0x0000035f,0x0000033f,0x00070041,0x00000360,0x00000361,0x0000034d,0x000000df,
	0x0000035f,0x000001e3,0x0004003d,0x00000347,0x00000362,0x00000361,0x0007004f,0x00000007,
	0x00000363,0x00000362,0x00000362,0x00000001,0x00000002,0x00050051,0x00000006,0x00000364,
	0x00000363,0x00000000,0x00050051,0x00000006,0x00000365,0x00000363,0x00000001,0x00060050,
	0x0000001a,0x00000366,0x0000035e,0x00000364,0x00000365,0x0003003e,0x0000035a,0x00000366,
	0x0004003d,0x0000001a,0x00000368,0x0000004e,0x0004003d,0x0000001a,0x00000369,0x0000035a,
	0x00050083,0x0000001a,0x0000036a,0x00000368,0x00000369,0x0003003e,0x0000036b,0x0000036a,
	0x0003003e,0x0000036c,0x000002b3,0x00060039,0x00000006,0x0000036d,0x0000001f,0x0000036b,
	0x0000036c,0x0003003e,0x00000367,0x0000036d,0x0004003d,0x00000006,0x0000036f,0x00000367,
	0x00050050,0x0000002f,0x00000373,0x0000036f,0x00000372,0x0003003e,0x0000036e,0x00000373,
	0x0004003d,0x0000002f,0x00000375,0x00000327,0x0003003e,0x00000374,0x00000375,0x0004003d,
	0x0000002f,0x00000377,0x0000036e,0x0003003e,0x00000376,0x00000377,0x00060039,0x0000002f,
	0x00000378,0x00000034,0x00000374,0x00000376,0x0003003e,0x00000327,0x00000378,0x000200f9,
	0x00000359,0x000200f8,0x00000359,0x000200f9,0x00000343,0x000200f8,0x00000343,0x0004003d,
	0x000000de,0x00000379,0x0000033f,0x00050080,0x000000de,0x0000037a,0x00000379,0x000000df,
	0x0003003e,0x0000033f,0x0000037a,0x000200f9,0x00000340,0x000200f8,0x00000342,0x0004003d,
	0x0000002f,0x0000037b,0x00000327,0x000200fe,0x0000037b,0x00010038,0x00050036,0x0000001a,
	0x00000053,0x00000000,0x00000051,0x00030037,0x0000001b,0x00000052,0x000200f8,0x00000054,
	0x000200fe,0x0000037e,0x00010038,0x00050036,0x00000055,0x00000057,0x00000000,0x00000056,
	0x000200f8,0x00000058,0x0004003b,0x0000001b,0x00000381,0x00000007,0x0004003b,0x0000001b,
	0x0000038e,0x00000007,0x0004003b,0x0000001b,0x00000393,0x00000007,0x00060041,0x0000029b,
	0x00000383,0x0000029a,0x00000382,0x000000a3,0x0004003d,0x00000006,0x00000384,0x00000383,
	0x0004007f,0x00000006,0x00000385,0x00000384,0x00050041,0x00000386,0x00000387,0x0000029a,
	0x00000382,0x0004003d,0x0000001a,0x00000388,0x00000387,0x0007004f,0x00000007,0x00000389,
	0x00000388,0x00000388,0x00000001,0x00000002,0x00050051,0x00000006,0x0000038a,0x00000389,
	0x00000000,0x00050051,0x00000006,0x0000038b,0x00000389,0x00000001,0x00060050,0x0000001a,
	0x0000038c,0x00000385,0x0000038a,0x0000038b,0x0006000c,0x0000001a,0x0000038d,0x00000001,
	0x00000045,0x0000038c,0x0003003e,0x00000381,0x0000038d,0x0004003d,0x0000001a,0x0000038f,
	0x0000009f,0x0004003d,0x0000001a,0x00000390,0x00000381,0x0007000c,0x0000001a,0x00000391,
	0x00000001,0x00000044,0x0000038f,0x00000390,0x0006000c,0x0000001a,0x00000392,0x00000001,
	0x00000045,0x00000391,0x0003003e,0x0000038e,0x00000392,0x0004003d,0x0000001a,0x00000394,
	0x00000381,0x0004003d,0x0000001a,0x00000395,0x0000038e,0x0007000c,0x0000001a,0x00000396,
	0x00000001,0x00000044,0x00000394,0x00000395,0x0003003e,0x00000393,0x00000396,0x0004003d,
	0x0000001a,0x00000397,0x0000038e,0x0004003d,0x0000001a,0x00000398,0x00000393,0x0004007f,
	0x0000001a,0x00000399,0x00000398,0x0004003d,0x0000001a,0x0000039a,0x00000381,0x00050051,
	0x00000006,0x0000039b,0x00000397,0x00000000,0x00050051,0x00000006,0x0000039c,0x00000397,
	0x00000001,0x00050051,0x00000006,0x0000039d,0x00000397,0x00000002,0x00050051,0x00000006,
	0x0000039e,0x00000399,0x00000000,0x00050051,0x00000006,0x0000039f,0x00000399,0x00000001,
	0x00050051,0x00000006,0x000003a0,0x00000399,0x00000002,0x00050051,0x00000006,0x000003a1,
	0x0000039a,0x00000000,0x00050051,0x00000006,0x000003a2,0x0000039a,0x00000001,0x00050051,
	0x00000006,0x000003a3,0x0000039a,0x00000002,0x00060050,0x0000001a,0x000003a4,0x0000039b,
	0x0000039c,0x0000039d,0x00060050,0x0000001a,0x000003a5,0x0000039e,0x0000039f,0x000003a0,
	0x00060050,0x0000001a,0x000003a6,0x000003a1,0x000003a2,0x000003a3,0x00060050,0x00000055,
	0x000003a7,0x000003a4,0x000003a5,0x000003a6,0x000200fe,0x000003a7,0x00010038,0x00050036,
	0x0000002f,0x0000005c,0x00000000,0x00000059,0x00030037,0x0000001b,0x0000005a,0x00030037,
	0x0000001b,0x0000005b,0x000200f8,0x0000005d,0x0004003b,0x00000030,0x000003aa,0x00000007,
	0x0004003b,0x0000033e,0x000003ae,0x00000007,0x0004003b,0x0000001b,0x000003b8,0x00000007,
	0x0004003b,0x00000030,0x000003bf,0x00000007,0x0004003b,0x0000001b,0x000003c0,0x00000007,
	0x0003003e,0x000003aa,0x000003ad,0x0003003e,0x000003ae,0x000001e3,0x000200f9,0x000003af,
	0x000200f8,0x000003af,0x000400f6,0x000003b1,0x000003b2,0x00000000,0x000200f9,0x000003b3,
	0x000200f8,0x000003b3,0x0004003d,0x000000de,0x000003b4,0x000003ae,0x0004007c,0x00000013,
	0x000003b5,0x000003b4,0x000500b0,0x000000cb,0x000003b7,0x000003b5,0x000003b6,0x000400fa,
	0x000003b7,0x000003b0,0x000003b1,0x000200f8,0x000003b0,0x0004003d,0x0000001a,0x000003b9,
	0x0000005a,0x00050041,0x0000000d,0x000003ba,0x000003aa,0x000001e3,0x0004003d,0x00000006,
	0x000003bb,0x000003ba,0x0004003d,0x0000001a,0x000003bc,0x0000005b,0x0005008e,0x0000001a,
	0x000003bd,0x000003bc,0x000003bb,0x00050081,0x0000001a,0x000003be,0x000003b9,0x000003bd,
	0x0003003e,0x000003b8,0x000003be,0x0004003d,0x0000001a,0x000003c1,0x000003b8,0x0003003e,
	0x000003c0,0x000003c1,0x00050039,0x0000002f,0x000003c2,0x0000004f,0x000003c0,0x0003003e,
	0x000003bf,0x000003c2,0x00050041,0x0000000d,0x000003c3,0x000003bf,0x000001e3,0x0004003d,
	0x00000006,0x000003c4,0x000003c3,0x0006000c,0x00000006,0x000003c5,0x00000001,0x00000004,
	0x000003c4,0x000500b8,0x000000cb,0x000003c7,0x000003c5,0x000003c6,0x000300f7,0x000003c9,
	0x00000000,0x000400fa,0x000003c7,0x000003c8,0x000003c9,0x000200f8,0x000003c8,0x000200f9,
	0x000003b1,0x000200f8,0x000003c9,0x00050041,0x0000000d,0x000003cb,0x000003bf,0x000001e3,
	0x0004003d,0x00000006,0x000003cc,0x000003cb,0x00050041,0x0000000d,0x000003cd,0x000003aa,
	0x000001e3,0x0004003d,0x00000006,0x000003ce,0x000003cd,0x00050081,0x00000006,0x000003cf,
	0x000003ce,0x000003cc,0x00050041,0x0000000d,0x000003d0,0x000003aa,0x000001e3,0x0003003e,
	0x000003d0,0x000003cf,0x00050041,0x00000220,0x000003d1,0x000003bf,0x000000df,0x0004003d,
	0x0000002e,0x000003d2,0x000003d1,0x00050041,0x00000220,0x000003d3,0x000003aa,0x000000df,
	0x0003003e,0x000003d3,0x000003d2,0x00050041,0x0000000d,0x000003d4,0x000003aa,0x000001e3,
	0x0004003d,0x00000006,0x000003d5,0x000003d4,0x000500ba,0x000000cb,0x000003d7,0x000003d5,
	0x000003d6,0x000300f7,0x000003d9,0x00000000,0x000400fa,0x000003d7,0x000003d8,0x000003d9,
	0x000200f8,0x000003d8,0x000200f9,0x000003b1,0x000200f8,0x000003d9,0x000200f9,0x000003b2,
	0x000200f8,0x000003b2,0x0004003d,0x000000de,0x000003db,0x000003ae,0x00050080,0x000000de,
	0x000003dc,0x000003db,0x000000df,0x0003003e,0x000003ae,0x000003dc,0x000200f9,0x000003af,
	0x000200f8,0x000003b1,0x0004003d,0x0000002f,0x000003dd,0x000003aa,0x000200fe,0x000003dd,
	0x00010038,0x00050036,0x0000001a,0x0000005f,0x00000000,0x00000051,0x00030037,0x0000001b,
	0x0000005e,0x000200f8,0x00000060,0x0004003b,0x0000001b,0x000003e0,0x00000007,0x0004003b,
	0x0000001b,0x000003e1,0x00000007,0x0004003b,0x0000001b,0x000003ea,0x00000007,0x0004003b,
	0x0000001b,0x000003f0,0x00000007,0x0004003b,0x0000001b,0x000003f6,0x00000007,0x0004003d,
	0x0000001a,0x000003e2,0x0000005e,0x0003003e,0x000003e1,0x000003e2,0x00050039,0x0000002f,
	0x000003e3,0x0000004f,0x000003e1,0x00050051,0x00000006,0x000003e4,0x000003e3,0x00000000,
	0x00060050,0x0000001a,0x000003e5,0x000003e4,0x000003e4,0x000003e4,0x0004003d,0x0000001a,
	0x000003e6,0x0000005e,0x00050083,0x0000001a,0x000003e9,0x000003e6,0x000003e8,0x0003003e,
	0x000003ea,0x000003e9,0x00050039,0x0000002f,0x000003eb,0x0000004f,0x000003ea,0x00050051,
	0x00000006,0x000003ec,0x000003eb,0x00000000,0x0004003d,0x0000001a,0x000003ed,0x0000005e,
	0x00050083,0x0000001a,0x000003ef,0x000003ed,0x000003ee,0x0003003e,0x000003f0,0x000003ef,
	0x00050039,0x0000002f,0x000003f1,0x0000004f,0x000003f0,0x00050051,0x00000006,0x000003f2,
	0x000003f1,0x00000000,0x0004003d,0x0000001a,0x000003f3,0x0000005e,0x00050083,0x0000001a,
	0x000003f5,0x000003f3,0x000003f4,0x0003003e,0x000003f6,0x000003f5,0x00050039,0x0000002f,
	0x000003f7,0x0000004f,0x000003f6,0x00050051,0x00000006,0x000003f8,0x000003f7,0x00000000,
	0x00060050,0x0000001a,0x000003f9,0x000003ec,0x000003f2,0x000003f8,0x00050083,0x0000001a,
	0x000003fa,0x000003e5,0x000003f9,0x0003003e,0x000003e0,0x000003fa,0x0004003d,0x0000001a,
	0x000003fb,0x000003e0,0x0006000c,0x0000001a,0x000003fc,0x00000001,0x00000045,0x000003fb,
	0x000200fe,0x000003fc,0x00010038,0x00050036,0x00000006,0x00000064,0x00000000,0x00000061,
	0x00030037,0x0000000d,0x00000062,0x00030037,0x0000000d,0x00000063,0x000200f8,0x00000065,
	0x0004003b,0x0000000d,0x000003ff,0x00000007,0x0004003b,0x0000000d,0x00000403,0x00000007,
	0x0004003b,0x0000000d,0x00000407,0x00000007,0x0004003b,0x0000000d,0x0000040b,0x00000007,
	0x0004003d,0x00000006,0x00000400,0x00000063,0x0004003d,0x00000006,0x00000401,0x00000063,
	0x00050085,0x00000006,0x00000402,0x00000400,0x00000401,0x0003003e,0x000003ff,0x00000402,
	0x0004003d,0x00000006,0x00000404,0x000003ff,0x0004003d,0x00000006,0x00000405,0x000003ff,
	0x00050085,0x00000006,0x00000406,0x00000404,0x00000405,0x0003003e,0x00000403,0x00000406,
	0x0004003d,0x00000006,0x00000408,0x00000062,0x0004003d,0x00000006,0x00000409,0x00000062,
	0x00050085,0x00000006,0x0000040a,0x00000408,0x00000409,0x0003003e,0x00000407,0x0000040a,
	0x0004003d,0x00000006,0x0000040c,0x00000407,0x0004003d,0x00000006,0x0000040d,0x00000403,
	0x00050083,0x00000006,0x0000040e,0x0000040d,0x000000a1,0x00050085,0x00000006,0x0000040f,
	0x0000040c,0x0000040e,0x00050081,0x00000006,0x00000410,0x0000040f,0x000000a1,0x0003003e,
	0x0000040b,0x00000410,0x0004003d,0x00000006,0x00000411,0x00000403,0x0004003d,0x00000006,
	0x00000413,0x0000040b,0x00050085,0x00000006,0x00000414,0x00000412,0x00000413,0x0004003d,
	0x00000006,0x00000415,0x0000040b,0x00050085,0x00000006,0x00000416,0x00000414,0x00000415,
	0x00050088,0x00000006,0x00000417,0x00000411,0x00000416,0x000200fe,0x00000417,0x00010038,
	0x00050036,0x0000001a,0x00000069,0x00000000,0x00000066,0x00030037,0x0000000d,0x00000067,
	0x00030037,0x0000001b,0x00000068,0x000200f8,0x0000006a,0x0004003d,0x0000001a,0x0000041a,
	0x00000068,0x0004003d,0x0000001a,0x0000041b,0x00000068,0x00060050,0x0000001a,0x0000041c,
	0x000000a1,0x000000a1,0x000000a1,0x00050083,0x0000001a,0x0000041d,0x0000041c,0x0000041b,
	0x0004003d,0x00000006,0x0000041e,0x00000067,0x00050083,0x00000006,0x0000041f,0x000000a1,
	0x0000041e,0x0007000c,0x00000006,0x00000421,0x00000001,0x0000001a,0x0000041f,0x00000420,
	0x0005008e,0x0000001a,0x00000422,0x0000041d,0x00000421,0x00050081,0x0000001a,0x00000423,
	0x0000041a,0x00000422,0x000200fe,0x00000423,0x00010038,0x00050036,0x00000006,0x0000006d,
	0x00000000,0x00000061,0x00030037,0x0000000d,0x0000006b,0x00030037,0x0000000d,0x0000006c,
	0x000200f8,0x0000006e,0x0004003b,0x0000000d,0x00000426,0x00000007,0x0004003b,0x0000000d,
	0x00000429,0x00000007,0x0004003b,0x0000000d,0x0000042e,0x00000007,0x0004003d,0x00000006,
	0x00000427,0x0000006c,0x00050081,0x00000006,0x00000428,0x00000427,0x000000a1,0x0003003e,
	0x00000426,0x00000428,0x0004003d,0x00000006,0x0000042a,0x00000426,0x0004003d,0x00000006,
	0x0000042b,0x00000426,0x00050085,0x00000006,0x0000042c,0x0000042a,0x0000042b,0x00050088,
	0x00000006,0x0000042d,0x0000042c,0x00000259,0x0003003e,0x00000429,0x0000042d,0x0004003d,
	0x00000006,0x0000042f,0x0000006b,0x0004003d,0x00000006,0x00000430,0x00000429,0x00050083,
	0x00000006,0x00000431,0x000000a1,0x00000430,0x00050085,0x00000006,0x00000432,0x0000042f,
	0x00000431,0x0004003d,0x00000006,0x00000433,0x00000429,0x00050081,0x00000006,0x00000434,
	0x00000432,0x00000433,0x0003003e,0x0000042e,0x00000434,0x0004003d,0x00000006,0x00000435,
	0x0000006b,0x0004003d,0x00000006,0x00000436,0x0000042e,0x00050088,0x00000006,0x00000437,
	0x00000435,0x00000436,0x000200fe,0x00000437,0x00010038,0x00050036,0x00000006,0x00000073,
	0x00000000,0x0000006f,0x00030037,0x0000000d,0x00000070,0x00030037,0x0000000d,0x00000071,
	0x00030037,0x0000000d,0x00000072,0x000200f8,0x00000074,0x0004003b,0x0000000d,0x0000043a,
	0x00000007,0x0004003b,0x0000000d,0x0000043b,0x00000007,0x0004003b,0x0000000d,0x0000043d,
	0x00000007,0x0004003b,0x0000000d,0x00000440,0x00000007,0x0004003b,0x0000000d,0x00000441,
	0x00000007,0x0004003b,0x0000000d,0x00000443,0x00000007,0x0004003d,0x00000006,0x0000043c,
	0x00000071,0x0003003e,0x0000043b,0x0000043c,0x0004003d,0x00000006,0x0000043e,0x00000072,
	0x0003003e,0x0000043d,0x0000043e,0x00060039,0x00000006,0x0000043f,0x0000006d,0x0000043b,
	0x0000043d,0x0003003e,0x0000043a,0x0000043f,0x0004003d,0x00000006,0x00000442,0x00000070,
	0x0003003e,0x00000441,0x00000442,0x0004003d,0x00000006,0x00000444,0x00000072,0x0003003e,
	0x00000443,0x00000444,0x00060039,0x00000006,0x00000445,0x0000006d,0x00000441,0x00000443,
	0x0003003e,0x00000440,0x00000445,0x0004003d,0x00000006,0x00000446,0x0000043a,0x0004003d,
	0x00000006,0x00000447,0x00000440,0x00050085,0x00000006,0x00000448,0x00000446,0x00000447,
	0x000200fe,0x00000448,0x00010038,0x00050036,0x0000001a,0x00000076,0x00000000,0x00000051,
	0x00030037,0x0000001b,0x00000075,0x000200f8,0x00000077,0x0004003b,0x0000001b,0x0000044b,
	0x00000007,0x0004003b,0x00000450,0x00000451,0x00000007,0x0004003b,0x0000001b,0x00000454,
	0x00000007,0x0004003b,0x0000001b,0x00000460,0x00000007,0x0004003d,0x0000001a,0x0000044c,
	0x00000075,0x0004003d,0x0000001a,0x0000044d,0x00000075,0x00050085,0x0000001a,0x0000044e,
	0x0000044c,0x0000044d,0x0003003e,0x0000044b,0x0000044e,0x0004003d,0x0000001a,0x00000452,
	0x00000075,0x000500b8,0x0000044f,0x00000453,0x00000452,0x00000370,0x0003003e,0x00000451,
	0x00000453,0x0004003d,0x0000001a,0x00000455,0x0000044b,0x0004003d,0x0000001a,0x00000456,
	0x0000044b,0x00050085,0x0000001a,0x00000457,0x00000455,0x00000456,0x0004003d,0x0000001a,
	0x0000045a,0x00000075,0x00050085,0x0000001a,0x0000045b,0x00000459,0x0000045a,0x00050085,
	0x0000001a,0x0000045c,0x00000457,0x0000045b,0x00050088,0x0000001a,0x0000045d,0x00000370,
	0x0000045c,0x0004003d,0x0000044f,0x0000045e,0x00000451,0x000600a9,0x0000001a,0x0000045f,
	0x0000045e,0x0000045d,0x00000370,0x0003003e,0x00000454,0x0000045f,0x0004003d,0x0000001a,
	0x00000461,0x00000075,0x0004003d,0x0000001a,0x00000464,0x00000075,0x0005008e,0x0000001a,
	0x00000466,0x00000464,0x00000465,0x0004003d,0x0000001a,0x00000468,0x0000044b,0x0005008e,
	0x0000001a,0x00000469,0x00000468,0x00000467,0x00050083,0x0000001a,0x0000046a,0x00000466,
	0x00000469,0x00060050,0x0000001a,0x0000046c,0x0000046b,0x0000046b,0x0000046b,0x00050081,
	0x0000001a,0x0000046d,0x0000046a,0x0000046c,0x0004003d,0x0000044f,0x0000046e,0x00000451,
	0x000600a9,0x0000001a,0x0000046f,0x0000046e,0x0000046d,0x00000463,0x00050085,0x0000001a,
	0x00000470,0x00000461,0x0000046f,0x0003003e,0x00000460,0x00000470,0x0004003d,0x0000044f,
	0x00000475,0x00000451,0x000600a9,0x0000001a,0x00000476,0x00000475,0x00000474,0x00000472,
	0x0004003d,0x0000001a,0x00000477,0x00000460,0x00050081,0x0000001a,0x00000478,0x00000477,
	0x00000476,0x0003003e,0x00000460,0x00000478,0x0004003d,0x0000001a,0x00000479,0x00000460,
	0x0004003d,0x0000001a,0x0000047a,0x00000454,0x00050085,0x0000001a,0x0000047b,0x00000479,
	0x0000047a,0x000200fe,0x0000047b,0x00010038,0x00050036,0x0000001a,0x00000081,0x00000000,
	0x00000078,0x00030037,0x0000000d,0x00000079,0x00030037,0x0000000d,0x0000007a,0x00030037,
	0x0000000d,0x0000007b,0x00030037,0x0000000d,0x0000007c,0x00030037,0x0000000d,0x0000007d,
	0x00030037,0x0000001b,0x0000007e,0x00030037,0x0000000d,0x0000007f,0x00030037,0x0000000d,
	0x00000080,0x000200f8,0x00000082,0x0004003b,0x0000000d,0x0000047e,0x00000007,0x0004003b,
	0x0000000d,0x0000047f,0x00000007,0x0004003b,0x0000000d,0x00000481,0x00000007,0x0004003b,
	0x0000001b,0x00000484,0x00000007,0x0004003b,0x0000000d,0x0000048b,0x00000007,0x0004003b,
	0x0000001b,0x0000048d,0x00000007,0x0004003b,0x0000001b,0x0000048f,0x00000007,0x0004003b,
	0x0000000d,0x00000494,0x00000007,0x0004003b,0x0000001b,0x00000496,0x00000007,0x0004003b,
	0x0000001b,0x00000498,0x00000007,0x0004003b,0x0000000d,0x0000049d,0x00000007,0x0004003b,
	0x0000001b,0x0000049f,0x00000007,0x0004003b,0x0000000d,0x000004a1,0x00000007,0x0004003b,
	0x0000000d,0x000004a2,0x00000007,0x0004003b,0x0000000d,0x000004a4,0x00000007,0x0004003b,
	0x0000000d,0x000004a6,0x00000007,0x0004003b,0x0000001b,0x000004a9,0x00000007,0x0004003b,
	0x0000001b,0x000004ac,0x00000007,0x0004003b,0x0000001b,0x000004ae,0x00000007,0x0004003d,
	0x00000006,0x00000480,0x0000007a,0x0003003e,0x0000047f,0x00000480,0x0004003d,0x00000006,
	0x00000482,0x00000080,0x0003003e,0x00000481,0x00000482,0x00060039,0x00000006,0x00000483,
	0x00000064,0x0000047f,0x00000481,0x0003003e,0x0000047e,0x00000483,0x0004003d,0x0000001a,
	0x00000487,0x0000007e,0x0004003d,0x00000006,0x00000488,0x0000007f,0x00060050,0x0000001a,
	0x00000489,0x00000488,0x00000488,0x00000488,0x0008000c,0x0000001a,0x0000048a,0x00000001,
	0x0000002e,0x00000486,0x00000487,0x00000489,0x0004003d,0x00000006,0x0000048c,0x00000079,
	0x0003003e,0x0000048b,0x0000048c,0x0003003e,0x0000048d,0x0000048a,0x00060039,0x0000001a,
	0x0000048e,0x00000069,0x0000048b,0x0000048d,0x0003003e,0x00000484,0x0000048e,0x0004003d,
	0x0000001a,0x00000490,0x0000007e,0x0004003d,0x00000006,0x00000491,0x0000007f,0x00060050,
	0x0000001a,0x00000492,0x00000491,0x00000491,0x00000491,0x0008000c,0x0000001a,0x00000493,
	0x00000001,0x0000002e,0x00000486,0x00000490,0x00000492,0x0004003d,0x00000006,0x00000495,
	0x0000007c,0x0003003e,0x00000494,0x00000495,0x0003003e,0x00000496,0x00000493,0x00060039,
	0x0000001a,0x00000497,0x00000069,0x00000494,0x00000496,0x0003003e,0x0000048f,0x00000497,
	0x0004003d,0x0000001a,0x00000499,0x0000007e,0x0004003d,0x00000006,0x0000049a,0x0000007f,
	0x00060050,0x0000001a,0x0000049b,0x0000049a,0x0000049a,0x0000049a,0x0008000c,0x0000001a,
	0x0000049c,0x00000001,0x0000002e,0x00000486,0x00000499,0x0000049b,0x0004003d,0x00000006,
	0x0000049e,0x0000007d,0x0003003e,0x0000049d,0x0000049e,0x0003003e,0x0000049f,0x0000049c,
	0x00060039,0x0000001a,0x000004a0,0x00000069,0x0000049d,0x0000049f,0x0003003e,0x00000498,
	0x000004a0,0x0004003d,0x00000006,0x000004a3,0x0000007c,0x0003003e,0x000004a2,0x000004a3,
	0x0004003d,0x00000006,0x000004a5,0x0000007d,0x0003003e,0x000004a4,0x000004a5,0x0004003d,
	0x00000006,0x000004a7,0x00000080,0x0003003e,0x000004a6,0x000004a7,0x00070039,0x00000006,
	0x000004a8,0x00000073,0x000004a2,0x000004a4,0x000004a6,0x0003003e,0x000004a1,0x000004a8,
	0x0003003e,0x000004ac,0x000004ab,0x00050039,0x0000001a,0x000004ad,0x00000076,0x000004ac,
	0x0003003e,0x000004a9,0x000004ad,0x0004003d,0x0000001a,0x000004af,0x0000007e,0x00060050,
	0x0000001a,0x000004b0,0x00000412,0x00000412,0x00000412,0x00050088,0x0000001a,0x000004b1,
	0x000004af,0x000004b0,0x0003003e,0x000004ae,0x000004b1,0x0004003d,0x00000006,0x000004b2,
	0x0000047e,0x0004003d,0x0000001a,0x000004b3,0x00000484,0x0005008e,0x0000001a,0x000004b4,
	0x000004b3,0x000004b2,0x0004003d,0x00000006,0x000004b5,0x000004a1,0x0005008e,0x0000001a,
	0x000004b6,0x000004b4,0x000004b5,0x0004003d,0x00000006,0x000004b8,0x0000007c,0x00050085,
	0x00000006,0x000004b9,0x000004b7,0x000004b8,0x0004003d,0x00000006,0x000004ba,0x0000007d,
	0x00050085,0x00000006,0x000004bb,0x000004b9,0x000004ba,0x0007000c,0x00000006,0x000004bc,
	0x00000001,0x00000028,0x000004bb,0x000003c6,0x00060050,0x0000001a,0x000004bd,0x000004bc,
	0x000004bc,0x000004bc,0x00050088,0x0000001a,0x000004be,0x000004b6,0x000004bd,0x0004003d,
	0x0000001a,0x000004bf,0x0000048f,0x00050083,0x0000001a,0x000004c0,0x00000370,0x000004bf,
	0x0004003d,0x0000001a,0x000004c1,0x00000498,0x00060050,0x0000001a,0x000004c2,0x000000a1,
	0x000000a1,0x000000a1,0x00050083,0x0000001a,0x000004c3,0x000004c2,0x000004c1,0x00050051,
	0x00000006,0x000004c4,0x000004c3,0x00000000,0x00050051,0x00000006,0x000004c5,0x000004c3,
	0x00000001,0x00050051,0x00000006,0x000004c6,0x000004c3,0x00000002,0x00060050,0x0000001a,
	0x000004c7,0x000004c4,0x000004c5,0x000004c6,0x00050085,0x0000001a,0x000004c8,0x000004c0,
	0x000004c7,0x0004003d,0x0000001a,0x000004c9,0x000004ae,0x00050085,0x0000001a,0x000004ca,
	0x000004c8,0x000004c9,0x0004003d,0x0000001a,0x000004cb,0x000004a9,0x00050085,0x0000001a,
	0x000004cc,0x000004ca,0x000004cb,0x00050081,0x0000001a,0x000004cd,0x000004be,0x000004cc,
	0x000200fe,0x000004cd,0x00010038,0x00050036,0x0000001a,0x0000008c,0x00000000,0x00000083,
	0x00030037,0x0000001b,0x00000084,0x00030037,0x0000001b,0x00000085,0x00030037,0x0000001b,
	0x00000086,0x00030037,0x0000001b,0x00000087,0x00030037,0x0000001b,0x00000088,0x00030037,
	0x0000001b,0x00000089,0x00030037,0x0000000d,0x0000008a,0x00030037,0x0000000d,0x0000008b,
	0x000200f8,0x0000008d,0x0004003b,0x0000001b,0x000004d0,0x00000007,0x0004003b,0x0000001b,
	0x000004d5,0x00000007,0x0004003b,0x0000001b,0x000004d8,0x00000007,0x0004003b,0x0000000d,
	0x000004dd,0x00000007,0x0004003b,0x0000000d,0x000004e2,0x00000007,0x0004003b,0x0000000d,
	0x000004e7,0x00000007,0x0004003b,0x0000000d,0x000004ec,0x00000007,0x0004003b,0x0000000d,
	0x000004f1,0x00000007,0x0004003b,0x0000001b,0x000004f6,0x00000007,0x0004003b,0x0000000d,
	0x000004f7,0x00000007,0x0004003b,0x0000000d,0x000004f9,0x00000007,0x0004003b,0x0000000d,
	0x000004fb,0x00000007,0x0004003b,0x0000000d,0x000004fd,0x00000007,0x0004003b,0x0000000d,
	0x000004ff,0x00000007,0x0004003b,0x0000001b,0x00000501,0x00000007,0x0004003b,0x0000000d,
	0x00000503,0x00000007,0x0004003b,0x0000000d,0x00000505,0x00000007,0x0004003d,0x0000001a,
	0x000004d1,0x00000087,0x0004003d,0x0000001a,0x000004d2,0x00000084,0x00050083,0x0000001a,
	0x000004d3,0x000004d1,0x000004d2,0x0006000c,0x0000001a,0x000004d4,0x00000001,0x00000045,
	0x000004d3,0x0003003e,0x000004d0,0x000004d4,0x0004003d,0x0000001a,0x000004d6,0x00000085,
	0x0004007f,0x0000001a,0x000004d7,0x000004d6,0x0003003e,0x000004d5,0x000004d7,0x0004003d,
	0x0000001a,0x000004d9,0x000004d5,0x0004003d,0x0000001a,0x000004da,0x000004d0,0x00050081,
	0x0000001a,0x000004db,0x000004d9,0x000004da,0x0006000c,0x0000001a,0x000004dc,0x00000001,
	0x00000045,0x000004db,0x0003003e,0x000004d8,0x000004dc,0x0004003d,0x0000001a,0x000004de,
	0x000004d0,0x0004003d,0x0000001a,0x000004df,0x000004d8,0x00050094,0x00000006,0x000004e0,
	0x000004de,0x000004df,0x0007000c,0x00000006,0x000004e1,0x00000001,0x00000028,0x000004e0,
	0x000000a0,0x0003003e,0x000004dd,0x000004e1,0x0004003d,0x0000001a,0x000004e3,0x00000086,
	0x0004003d,0x0000001a,0x000004e4,0x000004d8,0x00050094,0x00000006,0x000004e5,0x000004e3,
	0x000004e4,0x0007000c,0x00000006,0x000004e6,0x00000001,0x00000028,0x000004e5,0x000000a0,
	0x0003003e,0x000004e2,0x000004e6,0x0004003d,0x0000001a,0x000004e8,0x000004d5,0x0004003d,
	0x0000001a,0x000004e9,0x000004d8,0x00050094,0x00000006,0x000004ea,0x000004e8,0x000004e9,
	0x0007000c,0x00000006,0x000004eb,0x00000001,0x00000028,0x000004ea,0x000000a0,0x0003003e,
	0x000004e7,0x000004eb,0x0004003d,0x0000001a,0x000004ed,0x000004d0,0x0004003d,0x0000001a,
	0x000004ee,0x00000086,0x00050094,0x00000006,0x000004ef,0x000004ed,0x000004ee,0x0007000c,
	0x00000006,0x000004f0,0x00000001,0x00000028,0x000004ef,0x000000a0,0x0003003e,0x000004ec,
	0x000004f0,0x0004003d,0x0000001a,0x000004f2,0x000004d5,0x0004003d,0x0000001a,0x000004f3,
	0x00000086,0x00050094,0x00000006,0x000004f4,0x000004f2,0x000004f3,0x0007000c,0x00000006,
	0x000004f5,0x00000001,0x00000028,0x000004f4,0x000000a0,0x0003003e,0x000004f1,0x000004f5,
	0x0004003d,0x00000006,0x000004f8,0x000004dd,0x0003003e,0x000004f7,0x000004f8,0x0004003d,
	0x00000006,0x000004fa,0x000004e2,0x0003003e,0x000004f9,0x000004fa,0x0004003d,0x00000006,
	0x000004fc,0x000004e7,0x0003003e,0x000004fb,0x000004fc,0x0004003d,0x00000006,0x000004fe,
	0x000004ec,0x0003003e,0x000004fd,0x000004fe,0x0004003d,0x00000006,0x00000500,0x000004f1,
	0x0003003e,0x000004ff,0x00000500,0x0004003d,0x0000001a,0x00000502,0x00000089,0x0003003e,
	0x00000501,0x00000502,0x0004003d,0x00000006,0x00000504,0x0000008a,0x0003003e,0x00000503,
	0x00000504,0x0004003d,0x00000006,0x00000506,0x0000008b,0x0003003e,0x00000505,0x00000506,
	0x000c0039,0x0000001a,0x00000507,0x00000081,0x000004f7,0x000004f9,0x000004fb,0x000004fd,
	0x000004ff,0x00000501,0x00000503,0x00000505,0x0003003e,0x000004f6,0x00000507,0x0004003d,
	0x0000001a,0x00000508,0x00000088,0x0004003d,0x0000001a,0x00000509,0x000004f6,0x00050085,
	0x0000001a,0x0000050a,0x00000508,0x00000509,0x0004003d,0x00000006,0x0000050b,0x000004ec,
	0x0005008e,0x0000001a,0x0000050c,0x0000050a,0x0000050b,0x000200fe,0x0000050c,0x00010038,
	0x00050036,0x00000006,0x00000092,0x00000000,0x0000008e,0x00030037,0x0000001b,0x0000008f,
	0x00030037,0x0000001b,0x00000090,0x00030037,0x0000001b,0x00000091,0x000200f8,0x00000093,
	0x0004003b,0x0000000d,0x0000050f,0x00000007,0x0004003b,0x0000000d,0x00000510,0x00000007,
	0x0004003b,0x0000000d,0x00000511,0x00000007,0x0004003b,0x0000033e,0x00000513,0x00000007,
	0x0004003b,0x0000000d,0x0000051c,0x00000007,0x0004003b,0x0000001b,0x00000522,0x00000007,
	0x0003003e,0x0000050f,0x000000a1,0x0003003e,0x00000510,0x000003e7,0x0003003e,0x00000511,
	0x00000512,0x0003003e,0x00000513,0x000001e3,0x000200f9,0x00000514,0x000200f8,0x00000514,
	0x000400f6,0x00000516,0x00000517,0x00000000,0x000200f9,0x00000518,0x000200f8,0x00000518,
	0x0004003d,0x000000de,0x00000519,0x00000513,0x0004007c,0x00000013,0x0000051a,0x00000519,
	0x000500b0,0x000000cb,0x0000051b,0x0000051a,0x000003b6,0x000400fa,0x0000051b,0x00000515,
	0x00000516,0x000200f8,0x00000515,0x0004003d,0x0000001a,0x0000051d,0x0000008f,0x0004003d,
	0x0000001a,0x0000051e,0x00000091,0x0004003d,0x00000006,0x0000051f,0x00000510,0x0005008e,
	0x0000001a,0x00000520,0x0000051e,0x0000051f,0x00050081,0x0000001a,0x00000521,0x0000051d,
	0x00000520,0x0003003e,0x00000522,0x00000521,0x00050039,0x0000002f,0x00000523,0x0000004f,
	0x00000522,0x00050051,0x00000006,0x00000524,0x00000523,0x00000000,0x0003003e,0x0000051c,
	0x00000524,0x0004003d,0x00000006,0x00000525,0x0000050f,0x0004003d,0x00000006,0x00000526,
	0x0000051c,0x0004003d,0x00000006,0x00000527,0x00000510,0x0004003d,0x00000006,0x00000528,
	0x00000511,0x00050085,0x00000006,0x00000529,0x00000527,0x00000528,0x00050088,0x00000006,
	0x0000052a,0x00000526,0x00000529,0x0007000c,0x00000006,0x0000052b,0x00000001,0x00000025,
	0x00000525,0x0000052a,0x0003003e,0x0000050f,0x0000052b,0x0004003d,0x00000006,0x0000052c,
	0x0000051c,0x0004003d,0x00000006,0x0000052d,0x00000510,0x00050081,0x00000006,0x0000052e,
	0x0000052d,0x0000052c,0x0003003e,0x00000510,0x0000052e,0x0004003d,0x00000006,0x0000052f,
	0x0000051c,0x000500b8,0x000000cb,0x00000530,0x0000052f,0x000003c6,0x0004003d,0x00000006,
	0x00000531,0x00000510,0x000500ba,0x000000cb,0x00000533,0x00000531,0x00000532,0x000500a6,
	0x000000cb,0x00000534,0x00000530,0x00000533,0x000300f7,0x00000536,0x00000000,0x000400fa,
	0x00000534,0x00000535,0x00000536,0x000200f8,0x00000535,0x000200f9,0x00000516,0x000200f8,
	0x00000536,0x000200f9,0x00000517,0x000200f8,0x00000517,0x0004003d,0x000000de,0x00000538,
	0x00000513,0x00050080,0x000000de,0x00000539,0x00000538,0x000000df,0x0003003e,0x00000513,
	0x00000539,0x000200f9,0x00000514,0x000200f8,0x00000516,0x0004003d,0x00000006,0x0000053a,
	0x0000050f,0x0008000c,0x00000006,0x0000053b,0x00000001,0x0000002b,0x0000053a,0x000000a0,
	0x000000a1,0x000200fe,0x0000053b,0x00010038,0x00050036,0x00000006,0x00000097,0x00000000,
	0x00000094,0x00030037,0x0000001b,0x00000095,0x00030037,0x0000001b,0x00000096,0x000200f8,
	0x00000098,0x0004003b,0x0000000d,0x0000053e,0x00000007,0x0004003b,0x0000000d,0x0000053f,
	0x00000007,0x0004003b,0x0000033e,0x00000540,0x00000007,0x0004003b,0x0000000d,0x00000549,
	0x00000007,0x0004003b,0x0000000d,0x00000550,0x00000007,0x0004003b,0x0000001b,0x00000556,
	0x00000007,0x0003003e,0x0000053e,0x000000a0,0x0003003e,0x0000053f,0x000000a1,0x0003003e,
	0x00000540,0x000001e3,0x000200f9,0x00000541,0x000200f8,0x00000541,0x000400f6,0x00000543,
	0x00000544,0x00000000,0x000200f9,0x00000545,0x000200f8,0x00000545,0x0004003d,0x000000de,
	0x00000546,0x00000540,0x000500b1,0x000000cb,0x00000548,0x00000546,0x00000547,0x000400fa,
	0x00000548,0x00000542,0x00000543,0x000200f8,0x00000542,0x0004003d,0x000000de,0x0000054a,
	0x00000540,0x0004003d,0x000000de,0x0000054b,0x00000540,0x00050084,0x000000de,0x0000054c,
	0x0000054a,0x0000054b,0x0004006f,0x00000006,0x0000054d,0x0000054c,0x00050085,0x00000006,
	0x0000054e,0x0000024d,0x0000054d,0x00050081,0x00000006,0x0000054f,0x000003e7,0x0000054e,
	0x0003003e,0x00000549,0x0000054f,0x0004003d,0x0000001a,0x00000551,0x00000095,0x0004003d,
	0x0000001a,0x00000552,0x00000096,0x0004003d,0x00000006,0x00000553,0x00000549,0x0005008e,
	0x0000001a,0x00000554,0x00000552,0x00000553,0x00050081,0x0000001a,0x00000555,0x00000551,
	0x00000554,0x0003003e,0x00000556,0x00000555,0x00050039,0x0000002f,0x00000557,0x0000004f,
	0x00000556,0x00050051,0x00000006,0x00000558,0x00000557,0x00000000,0x0003003e,0x00000550,
	0x00000558,0x0004003d,0x00000006,0x00000559,0x00000549,0x0004003d,0x00000006,0x0000055a,
	0x00000550,0x00050083,0x00000006,0x0000055b,0x00000559,0x0000055a,0x0004003d,0x00000006,
	0x0000055c,0x0000053f,0x00050085,0x00000006,0x0000055d,0x0000055b,0x0000055c,0x0004003d,
	0x00000006,0x0000055e,0x0000053e,0x00050081,0x00000006,0x0000055f,0x0000055e,0x0000055d,
	0x0003003e,0x0000053e,0x0000055f,0x0004003d,0x00000006,0x00000561,0x0000053f,0x00050085,
	0x00000006,0x00000562,0x00000561,0x00000560,0x0003003e,0x0000053f,0x00000562,0x000200f9,
	0x00000544,0x000200f8,0x00000544,0x0004003d,0x000000de,0x00000563,0x00000540,0x00050080,
	0x000000de,0x00000564,0x00000563,0x000000df,0x0003003e,0x00000540,0x00000564,0x000200f9,
	0x00000541,0x000200f8,0x00000543,0x0004003d,0x00000006,0x00000566,0x0000053e,0x00050085,
	0x00000006,0x00000567,0x00000565,0x00000566,0x0008000c,0x00000006,0x00000568,0x00000001,
	0x0000002b,0x00000567,0x000000a0,0x000000a1,0x00050083,0x00000006,0x00000569,0x000000a1,
	0x00000568,0x000200fe,0x00000569,0x00010038,0x00050036,0x0000001a,0x0000009c,0x00000000,
	0x00000099,0x00030037,0x0000001b,0x0000009a,0x00030037,0x0000001b,0x0000009b,0x000200f8,
	0x0000009d,0x0004003b,0x0000000d,0x0000056c,0x00000007,0x0004003b,0x0000001b,0x0000056d,
	0x00000007,0x0004003b,0x00000014,0x0000056e,0x00000007,0x0004003b,0x0000001b,0x00000576,
	0x00000007,0x0004003b,0x00000030,0x00000577,0x00000007,0x0004003b,0x0000001b,0x00000578,
	0x00000007,0x0004003b,0x0000001b,0x0000057a,0x00000007,0x0004003b,0x0000001b,0x0000057d,
	0x00000007,0x0004003b,0x0000001b,0x00000584,0x00000007,0x0004003b,0x0000001b,0x00000585,
	0x00000007,0x0004003b,0x0000000d,0x00000588,0x00000007,0x0004003b,0x0000001b,0x00000590,
	0x00000007,0x0004003b,0x0000000d,0x00000593,0x00000007,0x0004003b,0x0000000d,0x00000596,
	0x00000007,0x0004003b,0x0000001b,0x00000597,0x00000007,0x0004003b,0x0000001b,0x00000599,
	0x00000007,0x0004003b,0x0000033e,0x0000059c,0x00000007,0x0004003b,0x0000001b,0x000005ad,
	0x00000007,0x0004003b,0x0000001b,0x000005bb,0x00000007,0x0004003b,0x0000001b,0x000005bd,
	0x00000007,0x0004003b,0x0000001b,0x000005bf,0x00000007,0x0004003b,0x0000001b,0x000005c1,
	0x00000007,0x0004003b,0x0000001b,0x000005c3,0x00000007,0x0004003b,0x0000001b,0x000005c7,
	0x00000007,0x0004003b,0x0000000d,0x000005c9,0x00000007,0x0004003b,0x0000000d,0x000005cb,
	0x00000007,0x0004003b,0x0000001b,0x000005ce,0x00000007,0x0004003b,0x0000001b,0x000005d0,
	0x00000007,0x0004003b,0x0000001b,0x000005d2,0x00000007,0x0004003b,0x0000001b,0x000005de,
	0x00000007,0x0004003b,0x0000001b,0x000005ef,0x00000007,0x0003003e,0x0000056c,0x000000a1,
	0x0003003e,0x0000056d,0x000003ab,0x0003003e,0x0000056e,0x000000a3,0x000200f9,0x0000056f,
	0x000200f8,0x0000056f,0x000400f6,0x00000571,0x00000572,0x00000000,0x000200f9,0x00000573,
	0x000200f8,0x00000573,0x0004003d,0x00000013,0x00000574,0x0000056e,0x000500b0,0x000000cb,
	0x00000575,0x00000574,0x00000261,0x000400fa,0x00000575,0x00000570,0x00000571,0x000200f8,
	0x00000570,0x0003003e,0x00000576,0x000003ab,0x0004003d,0x0000001a,0x00000579,0x0000009a,
	0x0003003e,0x00000578,0x00000579,0x0004003d,0x0000001a,0x0000057b,0x0000009b,0x0003003e,
	0x0000057a,0x0000057b,0x00060039,0x0000002f,0x0000057c,0x0000005c,0x00000578,0x0000057a,
	0x0003003e,0x00000577,0x0000057c,0x0004003d,0x0000001a,0x0000057e,0x0000009a,0x00050041,
	0x0000000d,0x0000057f,0x00000577,0x000001e3,0x0004003d,0x00000006,0x00000580,0x0000057f,
	0x0004003d,0x0000001a,0x00000581,0x0000009b,0x0005008e,0x0000001a,0x00000582,0x00000581,
	0x00000580,0x00050081,0x0000001a,0x00000583,0x0000057e,0x00000582,0x0003003e,0x0000057d,
	0x00000583,0x0004003d,0x0000001a,0x00000586,0x0000057d,0x0003003e,0x00000585,0x00000586,
	0x00050039,0x0000001a,0x00000587,0x0000005f,0x00000585,0x0003003e,0x00000584,0x00000587,
	0x00070041,0x0000000d,0x00000589,0x00000577,0x000000df,0x000000df,0x000000a3,0x0004003d,
	0x00000006,0x0000058a,0x00000589,0x0003003e,0x00000588,0x0000058a,0x00050041,0x0000000d,
	0x0000058b,0x00000577,0x000001e3,0x0004003d,0x00000006,0x0000058c,0x0000058b,0x000500bc,
	0x000000cb,0x0000058d,0x0000058c,0x000003d6,0x000300f7,0x0000058f,0x00000000,0x000400fa,
	0x0000058d,0x0000058e,0x000005ee,0x000200f8,0x0000058e,0x00060041,0x0000001b,0x00000591,
	0x00000577,0x000000df,0x000001e3,0x0004003d,0x0000001a,0x00000592,0x00000591,0x0003003e,
	0x00000590,0x00000592,0x00070041,0x0000000d,0x00000594,0x00000577,0x000000df,0x000000df,
	0x000000a7,0x0004003d,0x00000006,0x00000595,0x00000594,0x0003003e,0x00000593,0x00000595,
	0x0004003d,0x0000001a,0x00000598,0x0000057d,0x0003003e,0x00000597,0x00000598,0x0004003d,
	0x0000001a,0x0000059a,0x00000584,0x0003003e,0x00000599,0x0000059a,0x00060039,0x00000006,
	0x0000059b,0x00000097,0x00000597,0x00000599,0x0003003e,0x00000596,0x0000059b,0x0003003e,
	0x0000059c,0x000001e3,0x000200f9,0x0000059d,0x000200f8,0x0000059d,0x000400f6,0x0000059f,
	0x000005a0,0x00000000,0x000200f9,0x000005a1,0x000200f8,0x000005a1,0x0004003d,0x000000de,
	0x000005a2,0x0000059c,0x0004007c,0x00000013,0x000005a3,0x000005a2,0x00050041,0x0000034e,
	0x000005a4,0x0000034d,0x000001e3,0x0004003d,0x00000013,0x000005a5,0x000005a4,0x000500b0,
	0x000000cb,0x000005a6,0x000005a3,0x000005a5,0x000400fa,0x000005a6,0x0000059e,0x0000059f,
	0x000200f8,0x0000059e,0x0004003d,0x000000de,0x000005a7,0x0000059c,0x00080041,0x00000354,
	0x000005a8,0x0000034d,0x000000df,0x000005a7,0x000001e3,0x00000353,0x0004003d,0x00000006,
	0x000005a9,0x000005a8,0x000500b4,0x000000cb,0x000005aa,0x000005a9,0x000000a1,0x000300f7,
	0x000005ac,0x00000000,0x000400fa,0x000005aa,0x000005ab,0x000005ac,0x000200f8,0x000005ab,
	0x0004003d,0x000000de,0x000005ae,0x0000059c,0x00080041,0x00000354,0x000005af,0x0000034d,
	0x000000df,0x000005ae,0x000001e3,0x000000a3,0x0004003d,0x00000006,0x000005b0,0x000005af,
	0x0004007f,0x00000006,0x000005b1,0x000005b0,0x0004003d,0x000000de,0x000005b2,0x0000059c,
	0x00080041,0x00000354,0x000005b3,0x0000034d,0x000000df,0x000005b2,0x000001e3,0x000000a7,
	0x0004003d,0x00000006,0x000005b4,0x000005b3,0x00050081,0x00000006,0x000005b5,0x000005b4,
	0x00000297,0x0004003d,0x000000de,0x000005b6,0x0000059c,0x00080041,0x00000354,0x000005b7,
	0x0000034d,0x000000df,0x000005b6,0x000001e3,0x00000261,0x0004003d,0x00000006,0x000005b8,
	0x000005b7,0x00060050,0x0000001a,0x000005b9,0x000005b1,0x000005b5,0x000005b8,0x0003003e,
	0x000005ad,0x000005b9,0x0004003d,0x000000de,0x000005ba,0x0000059c,0x0004003d,0x0000001a,
	0x000005bc,0x0000057d,0x0003003e,0x000005bb,0x000005bc,0x0004003d,0x0000001a,0x000005be,
	0x0000009b,0x0003003e,0x000005bd,0x000005be,0x0004003d,0x0000001a,0x000005c0,0x00000584,
	0x0003003e,0x000005bf,0x000005c0,0x0004003d,0x0000001a,0x000005c2,0x000005ad,0x0003003e,
	0x000005c1,0x000005c2,0x00070041,0x000005c4,0x000005c5,0x0000034d,0x000000df,0x000005ba,
	0x000000df,0x0004003d,0x0000001a,0x000005c6,0x000005c5,0x0003003e,0x000005c3,0x000005c6,
	0x0004003d,0x0000001a,0x000005c8,0x00000590,0x0003003e,0x000005c7,0x000005c8,0x0004003d,
	0x00000006,0x000005ca,0x00000588,0x0003003e,0x000005c9,0x000005ca,0x0004003d,0x00000006,
	0x000005cc,0x00000593,0x0003003e,0x000005cb,0x000005cc,0x000c0039,0x0000001a,0x000005cd,
	0x0000008c,0x000005bb,0x000005bd,0x000005bf,0x000005c1,0x000005c3,0x000005c7,0x000005c9,
	0x000005cb,0x0004003d,0x0000001a,0x000005cf,0x0000057d,0x0003003e,0x000005ce,0x000005cf,
	0x0004003d,0x0000001a,0x000005d1,0x00000584,0x0003003e,0x000005d0,0x000005d1,0x0004003d,
	0x0000001a,0x000005d3,0x000005ad,0x0003003e,0x000005d2,0x000005d3,0x00070039,0x00000006,
	0x000005d4,0x00000092,0x000005ce,0x000005d0,0x000005d2,0x0005008e,0x0000001a,0x000005d5,
	0x000005cd,0x000005d4,0x0004003d,0x0000001a,0x000005d6,0x00000576,0x00050081,0x0000001a,
	0x000005d7,0x000005d6,0x000005d5,0x0003003e,0x00000576,0x000005d7,0x000200f9,0x000005ac,
	0x000200f8,0x000005ac,0x000200f9,0x000005a0,0x000200f8,0x000005a0,0x0004003d,0x000000de,
	0x000005d8,0x0000059c,0x00050080,0x000000de,0x000005d9,0x000005d8,0x000000df,0x0003003e,
	0x0000059c,0x000005d9,0x000200f9,0x0000059d,0x000200f8,0x0000059f,0x0004003d,0x00000006,
	0x000005da,0x00000596,0x0004003d,0x0000001a,0x000005db,0x00000576,0x0005008e,0x0000001a,
	0x000005dc,0x000005db,0x000005da,0x0003003e,0x00000576,0x000005dc,0x0004003d,0x0000001a,
	0x000005dd,0x00000576,0x0004003d,0x0000001a,0x000005df,0x0000057d,0x0003003e,0x000005de,
	0x000005df,0x00050039,0x0000001a,0x000005e0,0x00000053,0x000005de,0x00060050,0x0000001a,
	0x000005e1,0x000000f6,0x000000f6,0x000000f6,0x00050088,0x0000001a,0x000005e2,0x000005e0,
	0x000005e1,0x00050041,0x0000000d,0x000005e4,0x00000577,0x000001e3,0x0004003d,0x00000006,
	0x000005e5,0x000005e4,0x00050085,0x00000006,0x000005e6,0x000005e3,0x000005e5,0x00050041,
	0x0000000d,0x000005e7,0x00000577,0x000001e3,0x0004003d,0x00000006,0x000005e8,0x000005e7,
	0x00050085,0x00000006,0x000005e9,0x000005e6,0x000005e8,0x0006000c,0x00000006,0x000005ea,
	0x00000001,0x0000001b,0x000005e9,0x00050083,0x00000006,0x000005eb,0x000000a1,0x000005ea,
	0x00060050,0x0000001a,0x000005ec,0x000005eb,0x000005eb,0x000005eb,0x0008000c,0x0000001a,
	0x000005ed,0x00000001,0x0000002e,0x000005dd,0x000005e2,0x000005ec,0x0003003e,0x00000576,
	0x000005ed,0x000200f9,0x0000058f,0x000200f8,0x000005ee,0x0004003d,0x0000001a,0x000005f0,
	0x0000057d,0x0003003e,0x000005ef,0x000005f0,0x00050039,0x0000001a,0x000005f1,0x00000053,
	0x000005ef,0x0004003d,0x00000006,0x000005f2,0x0000056c,0x0005008e,0x0000001a,0x000005f3,
	0x000005f1,0x000005f2,0x0004003d,0x0000001a,0x000005f4,0x0000056d,0x00050081,0x0000001a,
	0x000005f5,0x000005f4,0x000005f3,0x0003003e,0x0000056d,0x000005f5,0x0004003d,0x0000001a,
	0x000005f6,0x0000056d,0x000200fe,0x000005f6,0x000200f8,0x0000058f,0x0004003d,0x0000001a,
	0x000005f8,0x00000576,0x0004003d,0x00000006,0x000005f9,0x0000056c,0x0005008e,0x0000001a,
	0x000005fa,0x000005f8,0x000005f9,0x0004003d,0x0000001a,0x000005fb,0x0000056d,0x00050081,
	0x0000001a,0x000005fc,0x000005fb,0x000005fa,0x0003003e,0x0000056d,0x000005fc,0x0004003d,
	0x00000006,0x000005fd,0x00000588,0x0004003d,0x00000006,0x000005fe,0x0000056c,0x00050085,
	0x00000006,0x000005ff,0x000005fe,0x000005fd,0x0003003e,0x0000056c,0x000005ff,0x0004003d,
	0x00000006,0x00000600,0x0000056c,0x000500b8,0x000000cb,0x00000601,0x00000600,0x0000025f,
	0x000300f7,0x00000603,0x00000000,0x000400fa,0x00000601,0x00000602,0x00000603,0x000200f8,
	0x00000602,0x000200f9,0x00000571,0x000200f8,0x00000603,0x0004003d,0x0000001a,0x00000605,
	0x0000057d,0x0004003d,0x0000001a,0x00000606,0x00000584,0x0005008e,0x0000001a,0x00000607,
	0x00000606,0x000003c6,0x00050081,0x0000001a,0x00000608,0x00000605,0x00000607,0x0003003e,
	0x0000009a,0x00000608,0x0004003d,0x0000001a,0x00000609,0x0000009b,0x0004003d,0x0000001a,
	0x0000060a,0x00000584,0x0007000c,0x0000001a,0x0000060b,0x00000001,0x00000047,0x00000609,
	0x0000060a,0x0003003e,0x0000009b,0x0000060b,0x000200f9,0x00000572,0x000200f8,0x00000572,
	0x0004003d,0x00000013,0x0000060c,0x0000056e,0x00050080,0x00000013,0x0000060d,0x0000060c,
	0x000000df,0x0003003e,0x0000056e,0x0000060d,0x000200f9,0x0000056f,0x000200f8,0x00000571,
	0x0004003d,0x0000001a,0x0000060e,0x0000056d,0x000200fe,0x0000060e,0x00010038 };
#endif

	VkShaderModuleCreateInfo fragmentShaderModuleCreateInfo = {};
	fragmentShaderModuleCreateInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
	fragmentShaderModuleCreateInfo.pNext = nullptr;
	fragmentShaderModuleCreateInfo.flags = 0;
	fragmentShaderModuleCreateInfo.codeSize = fragmentShaderCode.size() * sizeof(uint32_t);
	fragmentShaderModuleCreateInfo.pCode = fragmentShaderCode.data();
	NTSHENGN_VK_CHECK(vkCreateShaderModule(m_device, &fragmentShaderModuleCreateInfo, nullptr, &m_fragmentShaderModule));

	VkPipelineShaderStageCreateInfo fragmentShaderStageCreateInfo = {};
	fragmentShaderStageCreateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
	fragmentShaderStageCreateInfo.pNext = nullptr;
	fragmentShaderStageCreateInfo.flags = 0;
	fragmentShaderStageCreateInfo.stage = VK_SHADER_STAGE_FRAGMENT_BIT;
	fragmentShaderStageCreateInfo.module = m_fragmentShaderModule;
	fragmentShaderStageCreateInfo.pName = "main";
	fragmentShaderStageCreateInfo.pSpecializationInfo = nullptr;

	std::array<VkPipelineShaderStageCreateInfo, 2> shaderStageCreateInfos = { m_vertexShaderStageCreateInfo, fragmentShaderStageCreateInfo };

	VkGraphicsPipelineCreateInfo graphicsPipelineCreateInfo = {};
	graphicsPipelineCreateInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
	graphicsPipelineCreateInfo.pNext = &m_pipelineRenderingCreateInfo;
	graphicsPipelineCreateInfo.flags = 0;
	graphicsPipelineCreateInfo.stageCount = 2;
	graphicsPipelineCreateInfo.pStages = shaderStageCreateInfos.data();
	graphicsPipelineCreateInfo.pVertexInputState = &m_vertexInputStateCreateInfo;
	graphicsPipelineCreateInfo.pInputAssemblyState = &m_inputAssemblyStateCreateInfo;
	graphicsPipelineCreateInfo.pTessellationState = nullptr;
	graphicsPipelineCreateInfo.pViewportState = &m_viewportStateCreateInfo;
	graphicsPipelineCreateInfo.pRasterizationState = &m_rasterizationStateCreateInfo;
	graphicsPipelineCreateInfo.pMultisampleState = &m_multisampleStateCreateInfo;
	graphicsPipelineCreateInfo.pDepthStencilState = &m_depthStencilStateCreateInfo;
	graphicsPipelineCreateInfo.pColorBlendState = &m_colorBlendStateCreateInfo;
	graphicsPipelineCreateInfo.pDynamicState = &m_dynamicStateCreateInfo;
	graphicsPipelineCreateInfo.layout = m_graphicsPipelineLayout;
	graphicsPipelineCreateInfo.renderPass = VK_NULL_HANDLE;
	graphicsPipelineCreateInfo.subpass = 0;
	graphicsPipelineCreateInfo.basePipelineHandle = VK_NULL_HANDLE;
	graphicsPipelineCreateInfo.basePipelineIndex = 0;
	NTSHENGN_VK_CHECK(vkCreateGraphicsPipelines(m_device, VK_NULL_HANDLE, 1, &graphicsPipelineCreateInfo, nullptr, &m_graphicsPipeline));

	return true;
}

void NtshEngn::GraphicsModule::createSwapchain(VkSwapchainKHR oldSwapchain) {
	VkSurfaceCapabilitiesKHR surfaceCapabilities = getSurfaceCapabilities();
	uint32_t minImageCount = surfaceCapabilities.minImageCount + 1;
	if (surfaceCapabilities.maxImageCount > 0 && minImageCount > surfaceCapabilities.maxImageCount) {
		minImageCount = surfaceCapabilities.maxImageCount;
	}

	std::vector<VkSurfaceFormatKHR> surfaceFormats = getSurfaceFormats();
	m_swapchainFormat = surfaceFormats[0].format;
	VkColorSpaceKHR swapchainColorSpace = surfaceFormats[0].colorSpace;
	for (const VkSurfaceFormatKHR& surfaceFormat : surfaceFormats) {
		if (surfaceFormat.format == VK_FORMAT_B8G8R8A8_SRGB && surfaceFormat.colorSpace == VK_COLORSPACE_SRGB_NONLINEAR_KHR) {
			m_swapchainFormat = surfaceFormat.format;
			swapchainColorSpace = surfaceFormat.colorSpace;
			break;
		}
	}

	std::vector<VkPresentModeKHR> presentModes = getSurfacePresentModes();
	VkPresentModeKHR swapchainPresentMode = VK_PRESENT_MODE_FIFO_KHR;
	for (const VkPresentModeKHR& presentMode : presentModes) {
		if (presentMode == VK_PRESENT_MODE_MAILBOX_KHR) {
			swapchainPresentMode = presentMode;
			break;
		}
		else if (presentMode == VK_PRESENT_MODE_IMMEDIATE_KHR) {
			swapchainPresentMode = presentMode;
		}
	}

	VkExtent2D swapchainExtent = {};
	swapchainExtent.width = static_cast<uint32_t>(m_windowModule->getWidth(NTSHENGN_MAIN_WINDOW));
	swapchainExtent.height = static_cast<uint32_t>(m_windowModule->getHeight(NTSHENGN_MAIN_WINDOW));

	m_viewport.x = 0.0f;
	m_viewport.y = 0.0f;
	m_viewport.width = static_cast<float>(swapchainExtent.width);
	m_viewport.height = static_cast<float>(swapchainExtent.height);
	m_viewport.minDepth = 0.0f;
	m_viewport.maxDepth = 1.0f;

	m_scissor.offset.x = 0;
	m_scissor.offset.y = 0;
	m_scissor.extent.width = swapchainExtent.width;
	m_scissor.extent.height = swapchainExtent.height;

	VkSwapchainCreateInfoKHR swapchainCreateInfo = {};
	swapchainCreateInfo.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
	swapchainCreateInfo.pNext = nullptr;
	swapchainCreateInfo.flags = 0;
	swapchainCreateInfo.surface = m_surface;
	swapchainCreateInfo.minImageCount = minImageCount;
	swapchainCreateInfo.imageFormat = m_swapchainFormat;
	swapchainCreateInfo.imageColorSpace = swapchainColorSpace;
	swapchainCreateInfo.imageExtent = swapchainExtent;
	swapchainCreateInfo.imageArrayLayers = 1;
	swapchainCreateInfo.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
	swapchainCreateInfo.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE;
	swapchainCreateInfo.queueFamilyIndexCount = 0;
	swapchainCreateInfo.pQueueFamilyIndices = nullptr;
	swapchainCreateInfo.preTransform = surfaceCapabilities.currentTransform;
	swapchainCreateInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
	swapchainCreateInfo.presentMode = swapchainPresentMode;
	swapchainCreateInfo.clipped = VK_TRUE;
	swapchainCreateInfo.oldSwapchain = oldSwapchain;
	NTSHENGN_VK_CHECK(vkCreateSwapchainKHR(m_device, &swapchainCreateInfo, nullptr, &m_swapchain));

	if (oldSwapchain != VK_NULL_HANDLE) {
		vkDestroySwapchainKHR(m_device, oldSwapchain, nullptr);
	}

	NTSHENGN_VK_CHECK(vkGetSwapchainImagesKHR(m_device, m_swapchain, &m_imageCount, nullptr));
	m_swapchainImages.resize(m_imageCount);
	NTSHENGN_VK_CHECK(vkGetSwapchainImagesKHR(m_device, m_swapchain, &m_imageCount, m_swapchainImages.data()));

	// Create the swapchain image views
	m_swapchainImageViews.resize(m_imageCount);
	for (uint32_t i = 0; i < m_imageCount; i++) {
		VkImageViewCreateInfo swapchainImageViewCreateInfo = {};
		swapchainImageViewCreateInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
		swapchainImageViewCreateInfo.pNext = nullptr;
		swapchainImageViewCreateInfo.flags = 0;
		swapchainImageViewCreateInfo.image = m_swapchainImages[i];
		swapchainImageViewCreateInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
		swapchainImageViewCreateInfo.format = m_swapchainFormat;
		swapchainImageViewCreateInfo.components.r = VK_COMPONENT_SWIZZLE_R;
		swapchainImageViewCreateInfo.components.g = VK_COMPONENT_SWIZZLE_G;
		swapchainImageViewCreateInfo.components.b = VK_COMPONENT_SWIZZLE_B;
		swapchainImageViewCreateInfo.components.a = VK_COMPONENT_SWIZZLE_A;
		swapchainImageViewCreateInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
		swapchainImageViewCreateInfo.subresourceRange.baseMipLevel = 0;
		swapchainImageViewCreateInfo.subresourceRange.levelCount = 1;
		swapchainImageViewCreateInfo.subresourceRange.baseArrayLayer = 0;
		swapchainImageViewCreateInfo.subresourceRange.layerCount = 1;
		NTSHENGN_VK_CHECK(vkCreateImageView(m_device, &swapchainImageViewCreateInfo, nullptr, &m_swapchainImageViews[i]));
	}
}

void NtshEngn::GraphicsModule::resize() {
	if (m_windowModule && m_windowModule->isOpen(NTSHENGN_MAIN_WINDOW)) {
		while (m_windowModule->getWidth(NTSHENGN_MAIN_WINDOW) == 0 || m_windowModule->getHeight(NTSHENGN_MAIN_WINDOW) == 0) {
			m_windowModule->pollEvents();
		}

		NTSHENGN_VK_CHECK(vkQueueWaitIdle(m_graphicsQueue));

		// Destroy swapchain image views
		for (VkImageView& swapchainImageView : m_swapchainImageViews) {
			vkDestroyImageView(m_device, swapchainImageView, nullptr);
		}

		// Recreate the swapchain
		createSwapchain(m_swapchain);
	}
}

const NtshEngn::ComponentMask NtshEngn::GraphicsModule::getComponentMask() const {
	ComponentMask componentMask;
	componentMask.set(m_ecs->getComponentId<Camera>());
	componentMask.set(m_ecs->getComponentId<Renderable>());
	componentMask.set(m_ecs->getComponentId<AABBCollidable>());

	return componentMask;
}

void NtshEngn::GraphicsModule::onEntityComponentAdded(Entity entity, Component componentID) {
	if (componentID == m_ecs->getComponentId<Camera>()) {
		if (m_mainCamera == std::numeric_limits<uint32_t>::max()) {
			m_mainCamera = entity;
		}
	}
	else if (componentID == m_ecs->getComponentId<Renderable>()) {
		m_rootEntity = entity;
	}
	else if (componentID == m_ecs->getComponentId<AABBCollidable>()) {
		const NtshEngn::Transform lightTransform = m_ecs->getComponent<Transform>(entity);
		GGJRootsLight newLight;
		newLight.position[0] = lightTransform.position[0];
		newLight.position[1] = lightTransform.position[1];
		newLight.position[2] = lightTransform.position[2];
		newLight.position[3] = 0.0f;
		newLight.color[0] = lightTransform.rotation[0];
		newLight.color[1] = lightTransform.rotation[1];
		newLight.color[2] = lightTransform.rotation[2];
		newLight.color[3] = 0.0f;
		m_lights[entity] = newLight;
	}
}

void NtshEngn::GraphicsModule::onEntityComponentRemoved(Entity entity, Component componentID) {
	if (componentID == m_ecs->getComponentId<Camera>()) {
		if (m_mainCamera == entity) {
			m_mainCamera = std::numeric_limits<uint32_t>::max();
		}
	}
	else if (componentID == m_ecs->getComponentId<AABBCollidable>()) {
		m_lights[entity].position[3] = 1.0f;
	}
}

extern "C" NTSHENGN_MODULE_API NtshEngn::GraphicsModuleInterface* createModule() {
	return new NtshEngn::GraphicsModule;
}

extern "C" NTSHENGN_MODULE_API void destroyModule(NtshEngn::GraphicsModuleInterface* m) {
	delete m;
}